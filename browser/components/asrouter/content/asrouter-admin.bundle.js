/
*
!
*
*
NOTE
:
This
file
is
generated
by
webpack
from
ASRouterAdmin
.
jsx
*
using
the
npm
bundle
task
.
*
*
/
var
ASRouterAdminRenderUtils
;
/
*
*
*
*
*
*
/
(
(
)
=
>
{
/
/
webpackBootstrap
/
*
*
*
*
*
*
/
"
use
strict
"
;
/
*
*
*
*
*
*
/
var
__webpack_modules__
=
(
[
/
*
0
*
/
/
*
1
*
/
/
*
*
*
/
(
(
__unused_webpack___webpack_module__
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
*
/
__webpack_require__
.
d
(
__webpack_exports__
{
/
*
harmony
export
*
/
ASRouterUtils
:
(
)
=
>
(
/
*
binding
*
/
ASRouterUtils
)
/
*
harmony
export
*
/
}
)
;
/
*
harmony
import
*
/
var
_modules_ActorConstants_mjs__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
2
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
ASRouterUtils
=
{
addListener
(
listener
)
{
if
(
globalThis
.
ASRouterAddParentListener
)
{
globalThis
.
ASRouterAddParentListener
(
listener
)
;
}
}
removeListener
(
listener
)
{
if
(
globalThis
.
ASRouterRemoveParentListener
)
{
globalThis
.
ASRouterRemoveParentListener
(
listener
)
;
}
}
sendMessage
(
action
)
{
if
(
globalThis
.
ASRouterMessage
)
{
return
globalThis
.
ASRouterMessage
(
action
)
;
}
throw
new
Error
(
Unexpected
call
:
\
n
{
JSON
.
stringify
(
action
null
3
)
}
)
;
}
blockById
(
id
options
)
{
return
ASRouterUtils
.
sendMessage
(
{
type
:
_modules_ActorConstants_mjs__WEBPACK_IMPORTED_MODULE_0__
.
MESSAGE_TYPE_HASH
.
BLOCK_MESSAGE_BY_ID
data
:
{
id
.
.
.
options
}
}
)
;
}
modifyMessageJson
(
content
)
{
return
ASRouterUtils
.
sendMessage
(
{
type
:
_modules_ActorConstants_mjs__WEBPACK_IMPORTED_MODULE_0__
.
MESSAGE_TYPE_HASH
.
MODIFY_MESSAGE_JSON
data
:
{
content
}
}
)
;
}
executeAction
(
button_action
)
{
return
ASRouterUtils
.
sendMessage
(
{
type
:
_modules_ActorConstants_mjs__WEBPACK_IMPORTED_MODULE_0__
.
MESSAGE_TYPE_HASH
.
USER_ACTION
data
:
button_action
}
)
;
}
unblockById
(
id
)
{
return
ASRouterUtils
.
sendMessage
(
{
type
:
_modules_ActorConstants_mjs__WEBPACK_IMPORTED_MODULE_0__
.
MESSAGE_TYPE_HASH
.
UNBLOCK_MESSAGE_BY_ID
data
:
{
id
}
}
)
;
}
blockBundle
(
bundle
)
{
return
ASRouterUtils
.
sendMessage
(
{
type
:
_modules_ActorConstants_mjs__WEBPACK_IMPORTED_MODULE_0__
.
MESSAGE_TYPE_HASH
.
BLOCK_BUNDLE
data
:
{
bundle
}
}
)
;
}
unblockBundle
(
bundle
)
{
return
ASRouterUtils
.
sendMessage
(
{
type
:
_modules_ActorConstants_mjs__WEBPACK_IMPORTED_MODULE_0__
.
MESSAGE_TYPE_HASH
.
UNBLOCK_BUNDLE
data
:
{
bundle
}
}
)
;
}
overrideMessage
(
id
)
{
return
ASRouterUtils
.
sendMessage
(
{
type
:
_modules_ActorConstants_mjs__WEBPACK_IMPORTED_MODULE_0__
.
MESSAGE_TYPE_HASH
.
OVERRIDE_MESSAGE
data
:
{
id
}
}
)
;
}
editState
(
key
value
)
{
return
ASRouterUtils
.
sendMessage
(
{
type
:
_modules_ActorConstants_mjs__WEBPACK_IMPORTED_MODULE_0__
.
MESSAGE_TYPE_HASH
.
EDIT_STATE
data
:
{
[
key
]
:
value
}
}
)
;
}
sendTelemetry
(
ping
)
{
return
ASRouterUtils
.
sendMessage
(
{
type
:
_modules_ActorConstants_mjs__WEBPACK_IMPORTED_MODULE_0__
.
MESSAGE_TYPE_HASH
.
AS_ROUTER_TELEMETRY_USER_EVENT
data
:
ping
}
)
;
}
getPreviewEndpoint
(
)
{
return
null
;
}
}
;
/
*
*
*
/
}
)
/
*
2
*
/
/
*
*
*
/
(
(
__unused_webpack___webpack_module__
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
*
/
__webpack_require__
.
d
(
__webpack_exports__
{
/
*
harmony
export
*
/
MESSAGE_TYPE_HASH
:
(
)
=
>
(
/
*
binding
*
/
MESSAGE_TYPE_HASH
)
/
*
harmony
export
*
/
MESSAGE_TYPE_LIST
:
(
)
=
>
(
/
*
binding
*
/
MESSAGE_TYPE_LIST
)
/
*
harmony
export
*
/
}
)
;
/
*
vim
:
set
ts
=
2
sw
=
2
sts
=
2
et
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
MESSAGE_TYPE_LIST
=
[
"
BLOCK_MESSAGE_BY_ID
"
"
USER_ACTION
"
"
IMPRESSION
"
"
TRIGGER
"
/
/
PB
is
Private
Browsing
"
PBNEWTAB_MESSAGE_REQUEST
"
"
DOORHANGER_TELEMETRY
"
"
TOOLBAR_BADGE_TELEMETRY
"
"
MOMENTS_PAGE_TELEMETRY
"
"
INFOBAR_TELEMETRY
"
"
SPOTLIGHT_TELEMETRY
"
"
TOAST_NOTIFICATION_TELEMETRY
"
"
AS_ROUTER_TELEMETRY_USER_EVENT
"
/
/
Admin
types
"
ADMIN_CONNECT_STATE
"
"
UNBLOCK_MESSAGE_BY_ID
"
"
UNBLOCK_ALL
"
"
BLOCK_BUNDLE
"
"
UNBLOCK_BUNDLE
"
"
DISABLE_PROVIDER
"
"
ENABLE_PROVIDER
"
"
EVALUATE_JEXL_EXPRESSION
"
"
EXPIRE_QUERY_CACHE
"
"
FORCE_ATTRIBUTION
"
"
FORCE_PRIVATE_BROWSING_WINDOW
"
"
OVERRIDE_MESSAGE
"
"
MODIFY_MESSAGE_JSON
"
"
RESET_PROVIDER_PREF
"
"
SET_PROVIDER_USER_PREF
"
"
RESET_GROUPS_STATE
"
"
RESET_MESSAGE_STATE
"
"
RESET_SCREEN_IMPRESSIONS
"
"
EDIT_STATE
"
]
;
const
MESSAGE_TYPE_HASH
=
MESSAGE_TYPE_LIST
.
reduce
(
(
hash
value
)
=
>
{
hash
[
value
]
=
value
;
return
hash
;
}
{
}
)
;
/
*
*
*
/
}
)
/
*
3
*
/
/
*
*
*
/
(
(
module
)
=
>
{
module
.
exports
=
React
;
/
*
*
*
/
}
)
/
*
4
*
/
/
*
*
*
/
(
(
module
)
=
>
{
module
.
exports
=
ReactDOM
;
/
*
*
*
/
}
)
/
*
5
*
/
/
*
*
*
/
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
*
/
__webpack_require__
.
d
(
__webpack_exports__
{
/
*
harmony
export
*
/
SimpleHashRouter
:
(
)
=
>
(
/
*
binding
*
/
SimpleHashRouter
)
/
*
harmony
export
*
/
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
3
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
class
SimpleHashRouter
extends
(
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
PureComponent
)
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onHashChange
=
this
.
onHashChange
.
bind
(
this
)
;
this
.
state
=
{
hash
:
__webpack_require__
.
g
.
location
.
hash
}
;
}
onHashChange
(
)
{
this
.
setState
(
{
hash
:
__webpack_require__
.
g
.
location
.
hash
}
)
;
}
componentWillMount
(
)
{
__webpack_require__
.
g
.
addEventListener
(
"
hashchange
"
this
.
onHashChange
)
;
}
componentWillUnmount
(
)
{
__webpack_require__
.
g
.
removeEventListener
(
"
hashchange
"
this
.
onHashChange
)
;
}
render
(
)
{
const
[
.
.
.
routes
]
=
this
.
state
.
hash
.
split
(
"
-
"
)
;
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
cloneElement
(
this
.
props
.
children
{
location
:
{
hash
:
this
.
state
.
hash
routes
}
}
)
;
}
}
/
*
*
*
/
}
)
/
*
6
*
/
/
*
*
*
/
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
*
/
__webpack_require__
.
d
(
__webpack_exports__
{
/
*
harmony
export
*
/
CopyButton
:
(
)
=
>
(
/
*
binding
*
/
CopyButton
)
/
*
harmony
export
*
/
}
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
3
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_0___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_0__
)
;
function
_extends
(
)
{
_extends
=
Object
.
assign
?
Object
.
assign
.
bind
(
)
:
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
CopyButton
=
(
{
className
label
copiedLabel
inputSelector
transformer
.
.
.
props
}
)
=
>
{
const
[
copied
setCopied
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useState
)
(
false
)
;
const
timeout
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useRef
)
(
null
)
;
const
onClick
=
(
0
react__WEBPACK_IMPORTED_MODULE_0__
.
useCallback
)
(
(
)
=
>
{
let
text
=
document
.
querySelector
(
inputSelector
)
.
value
;
if
(
transformer
)
{
text
=
transformer
(
text
)
;
}
navigator
.
clipboard
.
writeText
(
text
)
;
clearTimeout
(
timeout
.
current
)
;
setCopied
(
true
)
;
timeout
.
current
=
setTimeout
(
(
)
=
>
setCopied
(
false
)
1500
)
;
}
[
inputSelector
transformer
]
)
;
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_0___default
(
)
.
createElement
(
"
button
"
_extends
(
{
className
:
className
onClick
:
(
)
=
>
onClick
(
)
}
props
)
copied
&
&
copiedLabel
|
|
label
)
;
}
;
/
*
*
*
/
}
)
/
*
7
*
/
/
*
*
*
/
(
(
__unused_webpack_module
__webpack_exports__
__webpack_require__
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
*
/
__webpack_require__
.
d
(
__webpack_exports__
{
/
*
harmony
export
*
/
ImpressionsSection
:
(
)
=
>
(
/
*
binding
*
/
ImpressionsSection
)
/
*
harmony
export
*
/
}
)
;
/
*
harmony
import
*
/
var
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
3
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
stringify
=
json
=
>
JSON
.
stringify
(
json
null
2
)
;
const
ImpressionsSection
=
(
{
messageImpressions
groupImpressions
screenImpressions
}
)
=
>
{
const
handleSaveMessageImpressions
=
(
0
react__WEBPACK_IMPORTED_MODULE_1__
.
useCallback
)
(
newImpressions
=
>
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
editState
(
"
messageImpressions
"
newImpressions
)
;
}
[
]
)
;
const
handleSaveGroupImpressions
=
(
0
react__WEBPACK_IMPORTED_MODULE_1__
.
useCallback
)
(
newImpressions
=
>
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
editState
(
"
groupImpressions
"
newImpressions
)
;
}
[
]
)
;
const
handleSaveScreenImpressions
=
(
0
react__WEBPACK_IMPORTED_MODULE_1__
.
useCallback
)
(
newImpressions
=
>
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
editState
(
"
screenImpressions
"
newImpressions
)
;
}
[
]
)
;
const
handleResetMessageImpressions
=
(
0
react__WEBPACK_IMPORTED_MODULE_1__
.
useCallback
)
(
(
)
=
>
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
RESET_MESSAGE_STATE
"
}
)
;
}
[
]
)
;
const
handleResetGroupImpressions
=
(
0
react__WEBPACK_IMPORTED_MODULE_1__
.
useCallback
)
(
(
)
=
>
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
RESET_GROUPS_STATE
"
}
)
;
}
[
]
)
;
const
handleResetScreenImpressions
=
(
0
react__WEBPACK_IMPORTED_MODULE_1__
.
useCallback
)
(
(
)
=
>
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
RESET_SCREEN_IMPRESSIONS
"
}
)
;
}
[
]
)
;
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
div
"
{
className
:
"
impressions
-
section
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
ImpressionsItem
{
impressions
:
messageImpressions
label
:
"
Message
Impressions
"
description
:
"
Message
impressions
are
stored
in
an
object
where
each
key
is
a
message
ID
and
each
value
is
an
array
of
timestamps
.
They
are
cleaned
up
when
a
message
with
that
ID
stops
existing
in
ASRouter
state
(
such
as
at
the
end
of
an
experiment
)
.
"
onSave
:
handleSaveMessageImpressions
onReset
:
handleResetMessageImpressions
}
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
ImpressionsItem
{
impressions
:
groupImpressions
label
:
"
Group
Impressions
"
description
:
"
Group
impressions
are
stored
in
an
object
where
each
key
is
a
group
ID
and
each
value
is
an
array
of
timestamps
.
They
are
never
cleaned
up
.
"
onSave
:
handleSaveGroupImpressions
onReset
:
handleResetGroupImpressions
}
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
ImpressionsItem
{
impressions
:
screenImpressions
label
:
"
Screen
Impressions
"
description
:
"
Screen
impressions
are
stored
in
an
object
where
each
key
is
a
screen
ID
and
each
value
is
the
most
recent
timestamp
that
screen
was
shown
.
They
are
never
cleaned
up
.
"
onSave
:
handleSaveScreenImpressions
onReset
:
handleResetScreenImpressions
}
)
)
;
}
;
const
ImpressionsItem
=
(
{
impressions
label
description
validator
onSave
onReset
}
)
=
>
{
const
[
json
setJson
]
=
(
0
react__WEBPACK_IMPORTED_MODULE_1__
.
useState
)
(
stringify
(
impressions
)
)
;
const
modified
=
(
0
react__WEBPACK_IMPORTED_MODULE_1__
.
useRef
)
(
false
)
;
const
isValidJson
=
(
0
react__WEBPACK_IMPORTED_MODULE_1__
.
useCallback
)
(
text
=
>
{
try
{
JSON
.
parse
(
text
)
;
return
validator
?
validator
(
text
)
:
true
;
}
catch
(
e
)
{
return
false
;
}
}
[
validator
]
)
;
const
jsonIsInvalid
=
(
0
react__WEBPACK_IMPORTED_MODULE_1__
.
useMemo
)
(
(
)
=
>
!
isValidJson
(
json
)
[
json
isValidJson
]
)
;
const
handleChange
=
(
0
react__WEBPACK_IMPORTED_MODULE_1__
.
useCallback
)
(
e
=
>
{
setJson
(
e
.
target
.
value
)
;
modified
.
current
=
true
;
}
[
]
)
;
const
handleSave
=
(
0
react__WEBPACK_IMPORTED_MODULE_1__
.
useCallback
)
(
(
)
=
>
{
if
(
jsonIsInvalid
)
{
return
;
}
const
newImpressions
=
JSON
.
parse
(
json
)
;
modified
.
current
=
false
;
onSave
(
newImpressions
)
;
}
[
json
jsonIsInvalid
onSave
]
)
;
const
handleReset
=
(
0
react__WEBPACK_IMPORTED_MODULE_1__
.
useCallback
)
(
(
)
=
>
{
modified
.
current
=
false
;
onReset
(
)
;
}
[
onReset
]
)
;
(
0
react__WEBPACK_IMPORTED_MODULE_1__
.
useEffect
)
(
(
)
=
>
{
if
(
!
modified
.
current
)
{
setJson
(
stringify
(
impressions
)
)
;
}
}
[
impressions
]
)
;
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
div
"
{
className
:
"
impressions
-
item
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
span
"
{
className
:
"
impressions
-
category
"
}
label
)
description
?
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
p
"
{
className
:
"
impressions
-
description
"
}
description
)
:
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
div
"
{
className
:
"
impressions
-
inner
-
box
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
div
"
{
className
:
"
impressions
-
buttons
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
button
primary
"
disabled
:
jsonIsInvalid
onClick
:
handleSave
}
"
Save
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
button
reset
"
onClick
:
handleReset
}
"
Reset
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
div
"
{
className
:
"
impressions
-
editor
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
textarea
"
{
className
:
"
general
-
textarea
"
value
:
json
onChange
:
handleChange
}
)
)
)
)
;
}
;
/
*
*
*
/
}
)
/
*
*
*
*
*
*
/
]
)
;
/
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
The
module
cache
/
*
*
*
*
*
*
/
var
__webpack_module_cache__
=
{
}
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
The
require
function
/
*
*
*
*
*
*
/
function
__webpack_require__
(
moduleId
)
{
/
*
*
*
*
*
*
/
/
/
Check
if
module
is
in
cache
/
*
*
*
*
*
*
/
var
cachedModule
=
__webpack_module_cache__
[
moduleId
]
;
/
*
*
*
*
*
*
/
if
(
cachedModule
!
=
=
undefined
)
{
/
*
*
*
*
*
*
/
return
cachedModule
.
exports
;
/
*
*
*
*
*
*
/
}
/
*
*
*
*
*
*
/
/
/
Create
a
new
module
(
and
put
it
into
the
cache
)
/
*
*
*
*
*
*
/
var
module
=
__webpack_module_cache__
[
moduleId
]
=
{
/
*
*
*
*
*
*
/
/
/
no
module
.
id
needed
/
*
*
*
*
*
*
/
/
/
no
module
.
loaded
needed
/
*
*
*
*
*
*
/
exports
:
{
}
/
*
*
*
*
*
*
/
}
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
Execute
the
module
function
/
*
*
*
*
*
*
/
__webpack_modules__
[
moduleId
]
(
module
module
.
exports
__webpack_require__
)
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
/
Return
the
exports
of
the
module
/
*
*
*
*
*
*
/
return
module
.
exports
;
/
*
*
*
*
*
*
/
}
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
*
webpack
/
runtime
/
compat
get
default
export
*
/
/
*
*
*
*
*
*
/
(
(
)
=
>
{
/
*
*
*
*
*
*
/
/
/
getDefaultExport
function
for
compatibility
with
non
-
harmony
modules
/
*
*
*
*
*
*
/
__webpack_require__
.
n
=
(
module
)
=
>
{
/
*
*
*
*
*
*
/
var
getter
=
module
&
&
module
.
__esModule
?
/
*
*
*
*
*
*
/
(
)
=
>
(
module
[
'
default
'
]
)
:
/
*
*
*
*
*
*
/
(
)
=
>
(
module
)
;
/
*
*
*
*
*
*
/
__webpack_require__
.
d
(
getter
{
a
:
getter
}
)
;
/
*
*
*
*
*
*
/
return
getter
;
/
*
*
*
*
*
*
/
}
;
/
*
*
*
*
*
*
/
}
)
(
)
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
*
webpack
/
runtime
/
define
property
getters
*
/
/
*
*
*
*
*
*
/
(
(
)
=
>
{
/
*
*
*
*
*
*
/
/
/
define
getter
functions
for
harmony
exports
/
*
*
*
*
*
*
/
__webpack_require__
.
d
=
(
exports
definition
)
=
>
{
/
*
*
*
*
*
*
/
for
(
var
key
in
definition
)
{
/
*
*
*
*
*
*
/
if
(
__webpack_require__
.
o
(
definition
key
)
&
&
!
__webpack_require__
.
o
(
exports
key
)
)
{
/
*
*
*
*
*
*
/
Object
.
defineProperty
(
exports
key
{
enumerable
:
true
get
:
definition
[
key
]
}
)
;
/
*
*
*
*
*
*
/
}
/
*
*
*
*
*
*
/
}
/
*
*
*
*
*
*
/
}
;
/
*
*
*
*
*
*
/
}
)
(
)
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
*
webpack
/
runtime
/
global
*
/
/
*
*
*
*
*
*
/
(
(
)
=
>
{
/
*
*
*
*
*
*
/
__webpack_require__
.
g
=
(
function
(
)
{
/
*
*
*
*
*
*
/
if
(
typeof
globalThis
=
=
=
'
object
'
)
return
globalThis
;
/
*
*
*
*
*
*
/
try
{
/
*
*
*
*
*
*
/
return
this
|
|
new
Function
(
'
return
this
'
)
(
)
;
/
*
*
*
*
*
*
/
}
catch
(
e
)
{
/
*
*
*
*
*
*
/
if
(
typeof
window
=
=
=
'
object
'
)
return
window
;
/
*
*
*
*
*
*
/
}
/
*
*
*
*
*
*
/
}
)
(
)
;
/
*
*
*
*
*
*
/
}
)
(
)
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
*
webpack
/
runtime
/
hasOwnProperty
shorthand
*
/
/
*
*
*
*
*
*
/
(
(
)
=
>
{
/
*
*
*
*
*
*
/
__webpack_require__
.
o
=
(
obj
prop
)
=
>
(
Object
.
prototype
.
hasOwnProperty
.
call
(
obj
prop
)
)
/
*
*
*
*
*
*
/
}
)
(
)
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
/
/
*
webpack
/
runtime
/
make
namespace
object
*
/
/
*
*
*
*
*
*
/
(
(
)
=
>
{
/
*
*
*
*
*
*
/
/
/
define
__esModule
on
exports
/
*
*
*
*
*
*
/
__webpack_require__
.
r
=
(
exports
)
=
>
{
/
*
*
*
*
*
*
/
if
(
typeof
Symbol
!
=
=
'
undefined
'
&
&
Symbol
.
toStringTag
)
{
/
*
*
*
*
*
*
/
Object
.
defineProperty
(
exports
Symbol
.
toStringTag
{
value
:
'
Module
'
}
)
;
/
*
*
*
*
*
*
/
}
/
*
*
*
*
*
*
/
Object
.
defineProperty
(
exports
'
__esModule
'
{
value
:
true
}
)
;
/
*
*
*
*
*
*
/
}
;
/
*
*
*
*
*
*
/
}
)
(
)
;
/
*
*
*
*
*
*
/
/
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
/
var
__webpack_exports__
=
{
}
;
/
/
This
entry
need
to
be
wrapped
in
an
IIFE
because
it
need
to
be
isolated
against
other
modules
in
the
chunk
.
(
(
)
=
>
{
__webpack_require__
.
r
(
__webpack_exports__
)
;
/
*
harmony
export
*
/
__webpack_require__
.
d
(
__webpack_exports__
{
/
*
harmony
export
*
/
ASRouterAdmin
:
(
)
=
>
(
/
*
binding
*
/
ASRouterAdmin
)
/
*
harmony
export
*
/
ASRouterAdminInner
:
(
)
=
>
(
/
*
binding
*
/
ASRouterAdminInner
)
/
*
harmony
export
*
/
ToggleMessageJSON
:
(
)
=
>
(
/
*
binding
*
/
ToggleMessageJSON
)
/
*
harmony
export
*
/
TogglePrefCheckbox
:
(
)
=
>
(
/
*
binding
*
/
TogglePrefCheckbox
)
/
*
harmony
export
*
/
ToggleStoryButton
:
(
)
=
>
(
/
*
binding
*
/
ToggleStoryButton
)
/
*
harmony
export
*
/
renderASRouterAdmin
:
(
)
=
>
(
/
*
binding
*
/
renderASRouterAdmin
)
/
*
harmony
export
*
/
toBinary
:
(
)
=
>
(
/
*
binding
*
/
toBinary
)
/
*
harmony
export
*
/
}
)
;
/
*
harmony
import
*
/
var
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
=
__webpack_require__
(
1
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1__
=
__webpack_require__
(
3
)
;
/
*
harmony
import
*
/
var
react__WEBPACK_IMPORTED_MODULE_1___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react__WEBPACK_IMPORTED_MODULE_1__
)
;
/
*
harmony
import
*
/
var
react_dom__WEBPACK_IMPORTED_MODULE_2__
=
__webpack_require__
(
4
)
;
/
*
harmony
import
*
/
var
react_dom__WEBPACK_IMPORTED_MODULE_2___default
=
/
*
#
__PURE__
*
/
__webpack_require__
.
n
(
react_dom__WEBPACK_IMPORTED_MODULE_2__
)
;
/
*
harmony
import
*
/
var
_SimpleHashRouter__WEBPACK_IMPORTED_MODULE_3__
=
__webpack_require__
(
5
)
;
/
*
harmony
import
*
/
var
_CopyButton__WEBPACK_IMPORTED_MODULE_4__
=
__webpack_require__
(
6
)
;
/
*
harmony
import
*
/
var
_ImpressionsSection__WEBPACK_IMPORTED_MODULE_5__
=
__webpack_require__
(
7
)
;
function
_extends
(
)
{
_extends
=
Object
.
assign
?
Object
.
assign
.
bind
(
)
:
function
(
target
)
{
for
(
var
i
=
1
;
i
<
arguments
.
length
;
i
+
+
)
{
var
source
=
arguments
[
i
]
;
for
(
var
key
in
source
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
source
key
)
)
{
target
[
key
]
=
source
[
key
]
;
}
}
}
return
target
;
}
;
return
_extends
.
apply
(
this
arguments
)
;
}
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
const
Row
=
props
=
>
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
_extends
(
{
className
:
"
message
-
item
"
}
props
)
props
.
children
)
;
/
/
Convert
a
UTF
-
8
string
to
a
string
in
which
only
one
byte
of
each
/
/
16
-
bit
unit
is
occupied
.
This
is
necessary
to
comply
with
btoa
API
constraints
.
function
toBinary
(
string
)
{
const
codeUnits
=
new
Uint16Array
(
string
.
length
)
;
for
(
let
i
=
0
;
i
<
codeUnits
.
length
;
i
+
+
)
{
codeUnits
[
i
]
=
string
.
charCodeAt
(
i
)
;
}
return
btoa
(
String
.
fromCharCode
(
.
.
.
Array
.
from
(
new
Uint8Array
(
codeUnits
.
buffer
)
)
)
)
;
}
function
relativeTime
(
timestamp
)
{
if
(
!
timestamp
)
{
return
"
"
;
}
const
seconds
=
Math
.
floor
(
(
Date
.
now
(
)
-
timestamp
)
/
1000
)
;
const
minutes
=
Math
.
floor
(
(
Date
.
now
(
)
-
timestamp
)
/
60000
)
;
if
(
seconds
<
2
)
{
return
"
just
now
"
;
}
else
if
(
seconds
<
60
)
{
return
{
seconds
}
seconds
ago
;
}
else
if
(
minutes
=
=
=
1
)
{
return
"
1
minute
ago
"
;
}
else
if
(
minutes
<
600
)
{
return
{
minutes
}
minutes
ago
;
}
return
new
Date
(
timestamp
)
.
toLocaleString
(
)
;
}
class
ToggleStoryButton
extends
(
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
PureComponent
)
{
constructor
(
props
)
{
super
(
props
)
;
this
.
handleClick
=
this
.
handleClick
.
bind
(
this
)
;
}
handleClick
(
)
{
this
.
props
.
onClick
(
this
.
props
.
story
)
;
}
render
(
)
{
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
onClick
:
this
.
handleClick
}
"
collapse
/
open
"
)
;
}
}
class
ToggleMessageJSON
extends
(
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
PureComponent
)
{
constructor
(
props
)
{
super
(
props
)
;
this
.
handleClick
=
this
.
handleClick
.
bind
(
this
)
;
}
handleClick
(
)
{
this
.
props
.
toggleJSON
(
this
.
props
.
msgId
)
;
}
render
(
)
{
let
iconName
=
this
.
props
.
isCollapsed
?
"
icon
icon
-
arrowhead
-
forward
-
small
"
:
"
icon
icon
-
arrowhead
-
down
-
small
"
;
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
clearButton
"
onClick
:
this
.
handleClick
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
span
"
{
className
:
iconName
}
)
)
;
}
}
class
TogglePrefCheckbox
extends
(
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
PureComponent
)
{
constructor
(
props
)
{
super
(
props
)
;
this
.
onChange
=
this
.
onChange
.
bind
(
this
)
;
}
onChange
(
event
)
{
this
.
props
.
onChange
(
this
.
props
.
pref
event
.
target
.
checked
)
;
}
render
(
)
{
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
(
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
Fragment
)
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
input
"
{
type
:
"
checkbox
"
checked
:
this
.
props
.
checked
onChange
:
this
.
onChange
disabled
:
this
.
props
.
disabled
}
)
"
"
this
.
props
.
pref
"
"
)
;
}
}
class
ASRouterAdminInner
extends
(
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
PureComponent
)
{
constructor
(
props
)
{
super
(
props
)
;
this
.
handleEnabledToggle
=
this
.
handleEnabledToggle
.
bind
(
this
)
;
this
.
handleUserPrefToggle
=
this
.
handleUserPrefToggle
.
bind
(
this
)
;
this
.
onChangeMessageFilter
=
this
.
onChangeMessageFilter
.
bind
(
this
)
;
this
.
onChangeMessageGroupsFilter
=
this
.
onChangeMessageGroupsFilter
.
bind
(
this
)
;
this
.
unblockAll
=
this
.
unblockAll
.
bind
(
this
)
;
this
.
handleClearAllImpressionsByProvider
=
this
.
handleClearAllImpressionsByProvider
.
bind
(
this
)
;
this
.
handleExpressionEval
=
this
.
handleExpressionEval
.
bind
(
this
)
;
this
.
onChangeTargetingParameters
=
this
.
onChangeTargetingParameters
.
bind
(
this
)
;
this
.
onChangeAttributionParameters
=
this
.
onChangeAttributionParameters
.
bind
(
this
)
;
this
.
setAttribution
=
this
.
setAttribution
.
bind
(
this
)
;
this
.
onCopyTargetingParams
=
this
.
onCopyTargetingParams
.
bind
(
this
)
;
this
.
onNewTargetingParams
=
this
.
onNewTargetingParams
.
bind
(
this
)
;
this
.
handleOpenPB
=
this
.
handleOpenPB
.
bind
(
this
)
;
this
.
selectPBMessage
=
this
.
selectPBMessage
.
bind
(
this
)
;
this
.
resetPBJSON
=
this
.
resetPBJSON
.
bind
(
this
)
;
this
.
resetPBMessageState
=
this
.
resetPBMessageState
.
bind
(
this
)
;
this
.
toggleJSON
=
this
.
toggleJSON
.
bind
(
this
)
;
this
.
toggleAllMessages
=
this
.
toggleAllMessages
.
bind
(
this
)
;
this
.
resetGroups
=
this
.
resetGroups
.
bind
(
this
)
;
this
.
onMessageFromParent
=
this
.
onMessageFromParent
.
bind
(
this
)
;
this
.
setStateFromParent
=
this
.
setStateFromParent
.
bind
(
this
)
;
this
.
setState
=
this
.
setState
.
bind
(
this
)
;
this
.
state
=
{
messageFilter
:
"
all
"
messageGroupsFilter
:
"
all
"
collapsedMessages
:
[
]
modifiedMessages
:
[
]
selectedPBMessage
:
"
"
evaluationStatus
:
{
}
stringTargetingParameters
:
null
newStringTargetingParameters
:
null
copiedToClipboard
:
false
attributionParameters
:
{
source
:
"
addons
.
mozilla
.
org
"
medium
:
"
referral
"
campaign
:
"
non
-
fx
-
button
"
content
:
rta
:
{
btoa
(
"
uBlock0
raymondhill
.
net
"
)
}
experiment
:
"
ua
-
onboarding
"
variation
:
"
chrome
"
ua
:
"
Google
Chrome
123
"
dltoken
:
"
00000000
-
0000
-
0000
-
0000
-
000000000000
"
}
}
;
}
onMessageFromParent
(
{
type
data
}
)
{
/
/
These
only
exists
due
to
onPrefChange
events
in
ASRouter
switch
(
type
)
{
case
"
UpdateAdminState
"
:
{
this
.
setStateFromParent
(
data
)
;
break
;
}
}
}
setStateFromParent
(
data
)
{
this
.
setState
(
data
)
;
if
(
!
this
.
state
.
stringTargetingParameters
)
{
const
stringTargetingParameters
=
{
}
;
for
(
const
param
of
Object
.
keys
(
data
.
targetingParameters
)
)
{
stringTargetingParameters
[
param
]
=
JSON
.
stringify
(
data
.
targetingParameters
[
param
]
null
2
)
;
}
this
.
setState
(
{
stringTargetingParameters
}
)
;
}
}
componentWillMount
(
)
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
addListener
(
this
.
onMessageFromParent
)
;
const
endpoint
=
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
getPreviewEndpoint
(
)
;
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
ADMIN_CONNECT_STATE
"
data
:
{
endpoint
}
}
)
.
then
(
this
.
setStateFromParent
)
;
}
componentWillUnmount
(
)
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
removeListener
(
this
.
onMessageFromParent
)
;
}
handleBlock
(
msg
)
{
return
(
)
=
>
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
blockById
(
msg
.
id
)
;
}
handleUnblock
(
msg
)
{
return
(
)
=
>
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
unblockById
(
msg
.
id
)
;
}
resetJSON
(
msg
)
{
/
/
reset
the
displayed
JSON
for
the
given
message
document
.
getElementById
(
{
msg
.
id
}
-
textarea
)
.
value
=
JSON
.
stringify
(
msg
null
2
)
;
/
/
remove
the
message
from
the
list
of
modified
IDs
let
index
=
this
.
state
.
modifiedMessages
.
indexOf
(
msg
.
id
)
;
this
.
setState
(
prevState
=
>
(
{
modifiedMessages
:
[
.
.
.
prevState
.
modifiedMessages
.
slice
(
0
index
)
.
.
.
prevState
.
modifiedMessages
.
slice
(
index
+
1
)
]
}
)
)
;
}
handleOverride
(
id
)
{
return
(
)
=
>
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
overrideMessage
(
id
)
.
then
(
state
=
>
{
this
.
setStateFromParent
(
state
)
;
}
)
;
}
resetPBMessageState
(
)
{
/
/
Iterate
over
Private
Browsing
messages
and
block
/
unblock
each
one
to
clear
impressions
const
PBMessages
=
this
.
state
.
messages
.
filter
(
message
=
>
message
.
template
=
=
=
"
pb_newtab
"
)
;
/
/
messages
from
state
go
here
PBMessages
.
forEach
(
message
=
>
{
if
(
message
?
.
id
)
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
blockById
(
message
.
id
)
;
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
unblockById
(
message
.
id
)
;
}
}
)
;
/
/
Clear
the
selected
messages
&
radio
buttons
document
.
getElementById
(
"
clear
radio
"
)
.
checked
=
true
;
this
.
selectPBMessage
(
"
clear
"
)
;
}
resetPBJSON
(
msg
)
{
/
/
reset
the
displayed
JSON
for
the
given
message
document
.
getElementById
(
{
msg
.
id
}
-
textarea
)
.
value
=
JSON
.
stringify
(
msg
null
2
)
;
}
handleOpenPB
(
)
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
FORCE_PRIVATE_BROWSING_WINDOW
"
data
:
{
message
:
{
content
:
this
.
state
.
selectedPBMessage
}
}
}
)
;
}
expireCache
(
)
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
EXPIRE_QUERY_CACHE
"
}
)
;
}
resetPref
(
)
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
RESET_PROVIDER_PREF
"
}
)
;
}
resetGroups
(
)
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
RESET_GROUPS_STATE
"
}
)
.
then
(
this
.
setStateFromParent
)
;
}
handleExpressionEval
(
)
{
const
context
=
{
}
;
for
(
const
param
of
Object
.
keys
(
this
.
state
.
stringTargetingParameters
)
)
{
const
value
=
this
.
state
.
stringTargetingParameters
[
param
]
;
context
[
param
]
=
value
?
JSON
.
parse
(
value
)
:
null
;
}
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
EVALUATE_JEXL_EXPRESSION
"
data
:
{
expression
:
this
.
refs
.
expressionInput
.
value
context
}
}
)
.
then
(
this
.
setStateFromParent
)
;
}
onChangeTargetingParameters
(
event
)
{
const
{
name
}
=
event
.
target
;
const
{
value
}
=
event
.
target
;
this
.
setState
(
(
{
stringTargetingParameters
}
)
=
>
{
let
targetingParametersError
=
null
;
const
updatedParameters
=
{
.
.
.
stringTargetingParameters
}
;
updatedParameters
[
name
]
=
value
;
try
{
JSON
.
parse
(
value
)
;
}
catch
(
e
)
{
console
.
error
(
Error
parsing
value
of
parameter
{
name
}
)
;
targetingParametersError
=
{
id
:
name
}
;
}
return
{
copiedToClipboard
:
false
evaluationStatus
:
{
}
stringTargetingParameters
:
updatedParameters
targetingParametersError
}
;
}
)
;
}
unblockAll
(
)
{
return
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
UNBLOCK_ALL
"
}
)
.
then
(
this
.
setStateFromParent
)
;
}
handleClearAllImpressionsByProvider
(
)
{
const
providerId
=
this
.
state
.
messageFilter
;
if
(
!
providerId
)
{
return
;
}
const
userPrefInfo
=
this
.
state
.
userPrefs
;
const
isUserEnabled
=
providerId
in
userPrefInfo
?
userPrefInfo
[
providerId
]
:
true
;
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
DISABLE_PROVIDER
"
data
:
providerId
}
)
;
if
(
!
isUserEnabled
)
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
SET_PROVIDER_USER_PREF
"
data
:
{
id
:
providerId
value
:
true
}
}
)
;
}
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
ENABLE_PROVIDER
"
data
:
providerId
}
)
;
}
handleEnabledToggle
(
event
)
{
const
provider
=
this
.
state
.
providerPrefs
.
find
(
p
=
>
p
.
id
=
=
=
event
.
target
.
dataset
.
provider
)
;
const
userPrefInfo
=
this
.
state
.
userPrefs
;
const
isUserEnabled
=
provider
.
id
in
userPrefInfo
?
userPrefInfo
[
provider
.
id
]
:
true
;
const
isSystemEnabled
=
provider
.
enabled
;
const
isEnabling
=
event
.
target
.
checked
;
if
(
isEnabling
)
{
if
(
!
isUserEnabled
)
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
SET_PROVIDER_USER_PREF
"
data
:
{
id
:
provider
.
id
value
:
true
}
}
)
;
}
if
(
!
isSystemEnabled
)
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
ENABLE_PROVIDER
"
data
:
provider
.
id
}
)
;
}
}
else
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
DISABLE_PROVIDER
"
data
:
provider
.
id
}
)
;
}
this
.
setState
(
{
messageFilter
:
"
all
"
}
)
;
}
handleUserPrefToggle
(
event
)
{
const
action
=
{
type
:
"
SET_PROVIDER_USER_PREF
"
data
:
{
id
:
event
.
target
.
dataset
.
provider
value
:
event
.
target
.
checked
}
}
;
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
action
)
;
this
.
setState
(
{
messageFilter
:
"
all
"
}
)
;
}
onChangeMessageFilter
(
event
)
{
this
.
setState
(
{
messageFilter
:
event
.
target
.
value
}
)
;
}
onChangeMessageGroupsFilter
(
event
)
{
this
.
setState
(
{
messageGroupsFilter
:
event
.
target
.
value
}
)
;
}
/
/
Simulate
a
copy
event
that
sets
to
clipboard
all
targeting
paramters
and
values
onCopyTargetingParams
(
)
{
const
stringTargetingParameters
=
{
.
.
.
this
.
state
.
stringTargetingParameters
}
;
for
(
const
key
of
Object
.
keys
(
stringTargetingParameters
)
)
{
/
/
If
the
value
is
not
set
the
parameter
will
be
lost
when
we
stringify
if
(
stringTargetingParameters
[
key
]
=
=
=
undefined
)
{
stringTargetingParameters
[
key
]
=
null
;
}
}
const
setClipboardData
=
e
=
>
{
e
.
preventDefault
(
)
;
e
.
clipboardData
.
setData
(
"
text
"
JSON
.
stringify
(
stringTargetingParameters
null
2
)
)
;
document
.
removeEventListener
(
"
copy
"
setClipboardData
)
;
this
.
setState
(
{
copiedToClipboard
:
true
}
)
;
}
;
document
.
addEventListener
(
"
copy
"
setClipboardData
)
;
document
.
execCommand
(
"
copy
"
)
;
}
onNewTargetingParams
(
event
)
{
this
.
setState
(
{
newStringTargetingParameters
:
event
.
target
.
value
}
)
;
event
.
target
.
classList
.
remove
(
"
errorState
"
)
;
this
.
refs
.
targetingParamsEval
.
innerText
=
"
"
;
try
{
const
stringTargetingParameters
=
JSON
.
parse
(
event
.
target
.
value
)
;
this
.
setState
(
{
stringTargetingParameters
}
)
;
}
catch
(
e
)
{
event
.
target
.
classList
.
add
(
"
errorState
"
)
;
this
.
refs
.
targetingParamsEval
.
innerText
=
e
.
message
;
}
}
toggleJSON
(
msgId
)
{
if
(
this
.
state
.
collapsedMessages
.
includes
(
msgId
)
)
{
let
index
=
this
.
state
.
collapsedMessages
.
indexOf
(
msgId
)
;
this
.
setState
(
prevState
=
>
(
{
collapsedMessages
:
[
.
.
.
prevState
.
collapsedMessages
.
slice
(
0
index
)
.
.
.
prevState
.
collapsedMessages
.
slice
(
index
+
1
)
]
}
)
)
;
}
else
{
this
.
setState
(
prevState
=
>
(
{
collapsedMessages
:
prevState
.
collapsedMessages
.
concat
(
msgId
)
}
)
)
;
}
}
handleChange
(
msgId
)
{
if
(
!
this
.
state
.
modifiedMessages
.
includes
(
msgId
)
)
{
this
.
setState
(
prevState
=
>
(
{
modifiedMessages
:
prevState
.
modifiedMessages
.
concat
(
msgId
)
}
)
)
;
}
}
renderMessageItem
(
msg
)
{
const
isBlockedByGroup
=
this
.
state
.
groups
.
filter
(
group
=
>
msg
.
groups
.
includes
(
group
.
id
)
)
.
some
(
group
=
>
!
group
.
enabled
)
;
const
msgProvider
=
this
.
state
.
providers
.
find
(
provider
=
>
provider
.
id
=
=
=
msg
.
provider
)
|
|
{
}
;
const
isProviderExcluded
=
msgProvider
.
exclude
&
&
msgProvider
.
exclude
.
includes
(
msg
.
id
)
;
const
isMessageBlocked
=
this
.
state
.
messageBlockList
.
includes
(
msg
.
id
)
|
|
this
.
state
.
messageBlockList
.
includes
(
msg
.
campaign
)
;
const
isBlocked
=
isMessageBlocked
|
|
isBlockedByGroup
|
|
isProviderExcluded
;
const
impressions
=
this
.
state
.
messageImpressions
[
msg
.
id
]
?
this
.
state
.
messageImpressions
[
msg
.
id
]
.
length
:
0
;
const
isCollapsed
=
this
.
state
.
collapsedMessages
.
includes
(
msg
.
id
)
;
const
isModified
=
this
.
state
.
modifiedMessages
.
includes
(
msg
.
id
)
;
const
aboutMessagePreviewSupported
=
[
"
infobar
"
"
spotlight
"
"
cfr_doorhanger
"
]
.
includes
(
msg
.
template
)
;
let
itemClassName
=
"
message
-
item
"
;
if
(
isBlocked
)
{
itemClassName
+
=
"
blocked
"
;
}
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
{
className
:
itemClassName
key
:
{
msg
.
id
}
-
{
msg
.
provider
}
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
{
className
:
"
message
-
id
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
span
"
null
msg
.
id
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
br
"
null
)
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
ToggleMessageJSON
{
msgId
:
{
msg
.
id
}
toggleJSON
:
this
.
toggleJSON
isCollapsed
:
isCollapsed
}
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
{
className
:
"
button
-
column
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
button
{
isBlocked
?
"
"
:
"
primary
"
}
onClick
:
isBlocked
?
this
.
handleUnblock
(
msg
)
:
this
.
handleBlock
(
msg
)
}
isBlocked
?
"
Unblock
"
:
"
Block
"
)
/
/
eslint
-
disable
-
next
-
line
no
-
nested
-
ternary
isBlocked
?
null
:
isModified
?
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
button
restore
"
onClick
:
(
)
=
>
this
.
resetJSON
(
msg
)
}
"
Reset
"
)
:
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
button
show
"
onClick
:
this
.
handleOverride
(
msg
.
id
)
}
"
Show
"
)
isBlocked
?
null
:
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
button
modify
"
onClick
:
(
)
=
>
this
.
modifyJson
(
msg
)
}
"
Modify
"
)
aboutMessagePreviewSupported
?
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
_CopyButton__WEBPACK_IMPORTED_MODULE_4__
.
CopyButton
{
transformer
:
text
=
>
about
:
messagepreview
?
json
=
{
encodeURIComponent
(
toBinary
(
text
)
)
}
label
:
"
Share
"
copiedLabel
:
"
Copied
!
"
inputSelector
:
#
{
msg
.
id
}
-
textarea
className
:
"
button
share
"
}
)
:
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
br
"
null
)
"
(
"
impressions
"
impressions
)
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
{
className
:
"
message
-
summary
"
}
isBlocked
&
&
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
"
Block
reason
:
"
isBlockedByGroup
&
&
"
Blocked
by
group
"
isProviderExcluded
&
&
"
Excluded
by
provider
"
isMessageBlocked
&
&
"
Message
blocked
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
pre
"
{
className
:
isCollapsed
?
"
collapsed
"
:
"
expanded
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
textarea
"
{
id
:
{
msg
.
id
}
-
textarea
name
:
msg
.
id
className
:
"
general
-
textarea
"
disabled
:
isBlocked
onChange
:
(
)
=
>
this
.
handleChange
(
msg
.
id
)
}
JSON
.
stringify
(
msg
null
2
)
)
)
)
)
)
;
}
selectPBMessage
(
msgId
)
{
if
(
msgId
=
=
=
"
clear
"
)
{
this
.
setState
(
{
selectedPBMessage
:
"
"
}
)
;
}
else
{
let
selected
=
document
.
getElementById
(
{
msgId
}
radio
)
;
let
msg
=
JSON
.
parse
(
document
.
getElementById
(
{
msgId
}
-
textarea
)
.
value
)
;
if
(
selected
.
checked
)
{
this
.
setState
(
{
selectedPBMessage
:
msg
?
.
content
}
)
;
}
else
{
this
.
setState
(
{
selectedPBMessage
:
"
"
}
)
;
}
}
}
modifyJson
(
content
)
{
const
message
=
JSON
.
parse
(
document
.
getElementById
(
{
content
.
id
}
-
textarea
)
.
value
)
;
return
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
modifyMessageJson
(
message
)
.
then
(
state
=
>
{
this
.
setStateFromParent
(
state
)
;
}
)
;
}
renderPBMessageItem
(
msg
)
{
const
isBlocked
=
this
.
state
.
messageBlockList
.
includes
(
msg
.
id
)
|
|
this
.
state
.
messageBlockList
.
includes
(
msg
.
campaign
)
;
const
impressions
=
this
.
state
.
messageImpressions
[
msg
.
id
]
?
this
.
state
.
messageImpressions
[
msg
.
id
]
.
length
:
0
;
const
isCollapsed
=
this
.
state
.
collapsedMessages
.
includes
(
msg
.
id
)
;
let
itemClassName
=
"
message
-
item
"
;
if
(
isBlocked
)
{
itemClassName
+
=
"
blocked
"
;
}
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
{
className
:
itemClassName
key
:
{
msg
.
id
}
-
{
msg
.
provider
}
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
{
className
:
"
message
-
id
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
span
"
null
msg
.
id
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
br
"
null
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
br
"
null
)
"
(
"
impressions
"
impressions
)
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
ToggleMessageJSON
{
msgId
:
{
msg
.
id
}
toggleJSON
:
this
.
toggleJSON
isCollapsed
:
isCollapsed
}
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
input
"
{
type
:
"
radio
"
id
:
{
msg
.
id
}
radio
name
:
"
PB_message_radio
"
style
:
{
marginBottom
:
20
}
onClick
:
(
)
=
>
this
.
selectPBMessage
(
msg
.
id
)
disabled
:
isBlocked
}
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
button
{
isBlocked
?
"
"
:
"
primary
"
}
onClick
:
isBlocked
?
this
.
handleUnblock
(
msg
)
:
this
.
handleBlock
(
msg
)
}
isBlocked
?
"
Unblock
"
:
"
Block
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
ASRouterButton
slim
button
"
onClick
:
(
)
=
>
this
.
resetPBJSON
(
msg
)
}
"
Reset
JSON
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
{
className
:
message
-
summary
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
pre
"
{
className
:
isCollapsed
?
"
collapsed
"
:
"
expanded
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
textarea
"
{
id
:
{
msg
.
id
}
-
textarea
className
:
"
wnp
-
textarea
"
name
:
msg
.
id
}
JSON
.
stringify
(
msg
null
2
)
)
)
)
)
;
}
toggleAllMessages
(
messagesToShow
)
{
if
(
this
.
state
.
collapsedMessages
.
length
)
{
this
.
setState
(
{
collapsedMessages
:
[
]
}
)
;
}
else
{
Array
.
prototype
.
forEach
.
call
(
messagesToShow
msg
=
>
{
this
.
setState
(
prevState
=
>
(
{
collapsedMessages
:
prevState
.
collapsedMessages
.
concat
(
msg
.
id
)
}
)
)
;
}
)
;
}
}
renderMessages
(
)
{
if
(
!
this
.
state
.
messages
)
{
return
null
;
}
const
messagesToShow
=
this
.
state
.
messageFilter
=
=
=
"
all
"
?
this
.
state
.
messages
:
this
.
state
.
messages
.
filter
(
message
=
>
message
.
provider
=
=
=
this
.
state
.
messageFilter
&
&
message
.
template
!
=
=
"
pb_newtab
"
)
;
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
div
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
ASRouterButton
slim
"
onClick
:
(
)
=
>
this
.
toggleAllMessages
(
messagesToShow
)
}
"
Collapse
/
Expand
All
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
p
"
{
className
:
"
helpLink
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
span
"
{
className
:
"
icon
icon
-
small
-
spacer
icon
-
info
"
}
)
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
span
"
null
"
To
modify
a
message
change
the
JSON
and
click
'
Modify
'
to
see
your
changes
.
Click
'
Reset
'
to
restore
the
JSON
to
the
original
.
Click
'
Share
'
to
copy
a
link
to
the
clipboard
that
can
be
used
to
preview
the
message
by
opening
the
link
in
Nightly
/
local
builds
.
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
table
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tbody
"
null
messagesToShow
.
map
(
msg
=
>
this
.
renderMessageItem
(
msg
)
)
)
)
)
;
}
renderMessagesByGroup
(
)
{
if
(
!
this
.
state
.
messages
)
{
return
null
;
}
const
messagesToShow
=
this
.
state
.
messageGroupsFilter
=
=
=
"
all
"
?
this
.
state
.
messages
.
filter
(
m
=
>
m
.
groups
.
length
)
:
this
.
state
.
messages
.
filter
(
message
=
>
message
.
groups
.
includes
(
this
.
state
.
messageGroupsFilter
)
)
;
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
table
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tbody
"
null
messagesToShow
.
map
(
msg
=
>
this
.
renderMessageItem
(
msg
)
)
)
)
;
}
renderPBMessages
(
)
{
if
(
!
this
.
state
.
messages
)
{
return
null
;
}
const
messagesToShow
=
this
.
state
.
messages
.
filter
(
message
=
>
message
.
template
=
=
=
"
pb_newtab
"
)
;
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
table
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tbody
"
null
messagesToShow
.
map
(
msg
=
>
this
.
renderPBMessageItem
(
msg
)
)
)
)
;
}
renderMessageFilter
(
)
{
if
(
!
this
.
state
.
providers
)
{
return
null
;
}
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
p
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
unblock
-
all
ASRouterButton
test
-
only
"
onClick
:
this
.
unblockAll
}
"
Unblock
All
Snippets
"
)
"
Show
messages
from
"
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
select
"
{
value
:
this
.
state
.
messageFilter
onChange
:
this
.
onChangeMessageFilter
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
option
"
{
value
:
"
all
"
}
"
all
providers
"
)
this
.
state
.
providers
.
map
(
provider
=
>
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
option
"
{
key
:
provider
.
id
value
:
provider
.
id
}
provider
.
id
)
)
)
this
.
state
.
messageFilter
!
=
=
"
all
"
&
&
!
this
.
state
.
messageFilter
.
includes
(
"
_local_testing
"
)
?
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
button
messages
-
reset
"
onClick
:
this
.
handleClearAllImpressionsByProvider
}
"
Reset
All
"
)
:
null
)
;
}
renderMessageGroupsFilter
(
)
{
if
(
!
this
.
state
.
groups
)
{
return
null
;
}
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
p
"
null
"
Show
messages
from
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
select
"
{
value
:
this
.
state
.
messageGroupsFilter
onChange
:
this
.
onChangeMessageGroupsFilter
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
option
"
{
value
:
"
all
"
}
"
all
groups
"
)
this
.
state
.
groups
.
map
(
group
=
>
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
option
"
{
key
:
group
.
id
value
:
group
.
id
}
group
.
id
)
)
)
)
;
}
renderTableHead
(
)
{
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
thead
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
{
className
:
"
message
-
item
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
{
className
:
"
min
"
}
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
{
className
:
"
min
"
}
"
Provider
ID
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
"
Source
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
{
className
:
"
min
"
}
"
Cohort
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
{
className
:
"
min
"
}
"
Last
Updated
"
)
)
)
;
}
renderProviders
(
)
{
const
providersConfig
=
this
.
state
.
providerPrefs
;
const
providerInfo
=
this
.
state
.
providers
;
const
userPrefInfo
=
this
.
state
.
userPrefs
;
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
table
"
null
this
.
renderTableHead
(
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tbody
"
null
providersConfig
.
map
(
(
provider
i
)
=
>
{
const
isTestProvider
=
provider
.
id
.
includes
(
"
_local_testing
"
)
;
const
info
=
providerInfo
.
find
(
p
=
>
p
.
id
=
=
=
provider
.
id
)
|
|
{
}
;
const
isUserEnabled
=
provider
.
id
in
userPrefInfo
?
userPrefInfo
[
provider
.
id
]
:
true
;
const
isSystemEnabled
=
isTestProvider
|
|
provider
.
enabled
;
let
label
=
"
local
"
;
if
(
provider
.
type
=
=
=
"
remote
"
)
{
label
=
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
span
"
null
"
endpoint
(
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
a
"
{
className
:
"
providerUrl
"
target
:
"
_blank
"
href
:
info
.
url
rel
:
"
noopener
noreferrer
"
}
info
.
url
)
"
)
"
)
;
}
else
if
(
provider
.
type
=
=
=
"
remote
-
settings
"
)
{
label
=
remote
settings
(
{
provider
.
collection
}
)
;
}
else
if
(
provider
.
type
=
=
=
"
remote
-
experiments
"
)
{
label
=
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
span
"
null
"
remote
settings
(
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
a
"
{
className
:
"
providerUrl
"
target
:
"
_blank
"
href
:
"
https
:
/
/
firefox
.
settings
.
services
.
mozilla
.
com
/
v1
/
buckets
/
main
/
collections
/
nimbus
-
desktop
-
experiments
/
records
"
rel
:
"
noopener
noreferrer
"
}
"
nimbus
-
desktop
-
experiments
"
)
"
)
"
)
;
}
let
reasonsDisabled
=
[
]
;
if
(
!
isSystemEnabled
)
{
reasonsDisabled
.
push
(
"
system
pref
"
)
;
}
if
(
!
isUserEnabled
)
{
reasonsDisabled
.
push
(
"
user
pref
"
)
;
}
if
(
reasonsDisabled
.
length
)
{
label
=
disabled
via
{
reasonsDisabled
.
join
(
"
"
)
}
;
}
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
{
className
:
"
message
-
item
"
key
:
i
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
isTestProvider
?
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
input
"
{
type
:
"
checkbox
"
disabled
:
true
readOnly
:
true
checked
:
true
}
)
:
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
input
"
{
type
:
"
checkbox
"
"
data
-
provider
"
:
provider
.
id
checked
:
isUserEnabled
&
&
isSystemEnabled
onChange
:
this
.
handleEnabledToggle
}
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
provider
.
id
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
span
"
{
className
:
sourceLabel
{
isUserEnabled
&
&
isSystemEnabled
?
"
"
:
"
isDisabled
"
}
}
label
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
provider
.
cohort
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
{
style
:
{
whiteSpace
:
"
nowrap
"
}
}
info
.
lastUpdated
?
new
Date
(
info
.
lastUpdated
)
.
toLocaleString
(
)
:
"
"
)
)
;
}
)
)
)
;
}
renderTargetingParameters
(
)
{
/
/
There
was
no
error
and
the
result
is
truthy
const
success
=
this
.
state
.
evaluationStatus
.
success
&
&
!
!
this
.
state
.
evaluationStatus
.
result
;
const
result
=
JSON
.
stringify
(
this
.
state
.
evaluationStatus
.
result
null
2
)
|
|
"
(
Empty
result
)
"
;
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
table
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tbody
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
h2
"
null
"
Evaluate
JEXL
expression
"
)
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
p
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
textarea
"
{
ref
:
"
expressionInput
"
rows
:
"
10
"
cols
:
"
60
"
placeholder
:
"
Evaluate
JEXL
expressions
and
mock
parameters
by
changing
their
values
below
"
}
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
p
"
null
"
Status
:
"
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
span
"
{
ref
:
"
evaluationStatus
"
}
success
?
"
"
:
"
"
"
Result
:
"
result
)
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
ASRouterButton
secondary
"
onClick
:
this
.
handleExpressionEval
}
"
Evaluate
"
)
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
h2
"
null
"
Modify
targeting
parameters
"
)
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
ASRouterButton
secondary
"
onClick
:
this
.
onCopyTargetingParams
disabled
:
this
.
state
.
copiedToClipboard
}
this
.
state
.
copiedToClipboard
?
"
Parameters
copied
!
"
:
"
Copy
parameters
"
)
)
)
this
.
state
.
stringTargetingParameters
&
&
Object
.
keys
(
this
.
state
.
stringTargetingParameters
)
.
map
(
(
param
i
)
=
>
{
const
value
=
this
.
state
.
stringTargetingParameters
[
param
]
;
const
errorState
=
this
.
state
.
targetingParametersError
&
&
this
.
state
.
targetingParametersError
.
id
=
=
=
param
;
const
className
=
errorState
?
"
errorState
"
:
"
"
;
const
inputComp
=
(
value
&
&
value
.
length
)
>
30
?
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
textarea
"
{
name
:
param
className
:
className
value
:
value
rows
:
"
10
"
cols
:
"
60
"
onChange
:
this
.
onChangeTargetingParameters
}
)
:
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
input
"
{
name
:
param
className
:
className
value
:
value
onChange
:
this
.
onChangeTargetingParameters
}
)
;
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
{
key
:
i
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
param
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
inputComp
)
)
;
}
)
)
)
;
}
onChangeAttributionParameters
(
event
)
{
const
{
name
value
}
=
event
.
target
;
this
.
setState
(
(
{
attributionParameters
}
)
=
>
{
const
updatedParameters
=
{
.
.
.
attributionParameters
}
;
updatedParameters
[
name
]
=
value
;
return
{
attributionParameters
:
updatedParameters
}
;
}
)
;
}
setAttribution
(
)
{
_asrouter_utils__WEBPACK_IMPORTED_MODULE_0__
.
ASRouterUtils
.
sendMessage
(
{
type
:
"
FORCE_ATTRIBUTION
"
data
:
this
.
state
.
attributionParameters
}
)
.
then
(
this
.
setStateFromParent
)
;
}
_getGroupImpressionsCount
(
id
frequency
)
{
if
(
frequency
)
{
return
this
.
state
.
groupImpressions
[
id
]
?
this
.
state
.
groupImpressions
[
id
]
.
length
:
0
;
}
return
"
n
/
a
"
;
}
renderAttributionParamers
(
)
{
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
div
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
h2
"
null
"
Attribution
Parameters
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
p
"
null
"
"
"
This
forces
the
browser
to
set
some
attribution
parameters
useful
for
testing
the
Return
To
AMO
feature
.
Clicking
on
'
Force
Attribution
'
with
the
default
values
in
each
field
will
demo
the
Return
To
AMO
flow
with
the
addon
called
'
uBlock
Origin
'
.
If
you
wish
to
try
different
attribution
parameters
enter
them
in
the
text
boxes
.
If
you
wish
to
try
a
different
addon
with
the
Return
To
AMO
flow
make
sure
the
'
content
'
text
box
has
a
string
that
is
'
rta
:
base64
(
addonID
)
'
the
base64
string
of
the
addonID
prefixed
with
'
rta
:
'
.
The
addon
must
currently
be
a
recommended
addon
on
AMO
.
Then
click
'
Force
Attribution
'
.
Clicking
on
'
Force
Attribution
'
with
blank
text
boxes
reset
attribution
data
.
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
table
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
b
"
null
"
Source
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
input
"
{
type
:
"
text
"
name
:
"
source
"
placeholder
:
"
addons
.
mozilla
.
org
"
value
:
this
.
state
.
attributionParameters
.
source
onChange
:
this
.
onChangeAttributionParameters
}
)
"
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
b
"
null
"
Medium
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
input
"
{
type
:
"
text
"
name
:
"
medium
"
placeholder
:
"
referral
"
value
:
this
.
state
.
attributionParameters
.
medium
onChange
:
this
.
onChangeAttributionParameters
}
)
"
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
b
"
null
"
Campaign
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
input
"
{
type
:
"
text
"
name
:
"
campaign
"
placeholder
:
"
non
-
fx
-
button
"
value
:
this
.
state
.
attributionParameters
.
campaign
onChange
:
this
.
onChangeAttributionParameters
}
)
"
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
b
"
null
"
Content
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
input
"
{
type
:
"
text
"
name
:
"
content
"
placeholder
:
rta
:
{
btoa
(
"
uBlock0
raymondhill
.
net
"
)
}
value
:
this
.
state
.
attributionParameters
.
content
onChange
:
this
.
onChangeAttributionParameters
}
)
"
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
b
"
null
"
Experiment
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
input
"
{
type
:
"
text
"
name
:
"
experiment
"
placeholder
:
"
ua
-
onboarding
"
value
:
this
.
state
.
attributionParameters
.
experiment
onChange
:
this
.
onChangeAttributionParameters
}
)
"
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
b
"
null
"
Variation
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
input
"
{
type
:
"
text
"
name
:
"
variation
"
placeholder
:
"
chrome
"
value
:
this
.
state
.
attributionParameters
.
variation
onChange
:
this
.
onChangeAttributionParameters
}
)
"
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
b
"
null
"
User
Agent
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
input
"
{
type
:
"
text
"
name
:
"
ua
"
placeholder
:
"
Google
Chrome
123
"
value
:
this
.
state
.
attributionParameters
.
ua
onChange
:
this
.
onChangeAttributionParameters
}
)
"
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
b
"
null
"
Download
Token
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
input
"
{
type
:
"
text
"
name
:
"
dltoken
"
placeholder
:
"
00000000
-
0000
-
0000
-
0000
-
000000000000
"
value
:
this
.
state
.
attributionParameters
.
dltoken
onChange
:
this
.
onChangeAttributionParameters
}
)
"
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
ASRouterButton
primary
button
"
onClick
:
this
.
setAttribution
}
"
"
"
Force
Attribution
"
"
"
)
"
"
)
)
)
)
;
}
renderErrorMessage
(
{
id
errors
}
)
{
const
providerId
=
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
{
rowSpan
:
errors
.
length
}
id
)
;
/
/
.
reverse
(
)
so
that
the
last
error
(
most
recent
)
is
first
return
errors
.
map
(
(
{
error
timestamp
}
cellKey
)
=
>
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
{
key
:
cellKey
}
cellKey
=
=
=
errors
.
length
-
1
?
providerId
:
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
error
.
message
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
relativeTime
(
timestamp
)
)
)
)
.
reverse
(
)
;
}
renderErrors
(
)
{
const
providersWithErrors
=
this
.
state
.
providers
&
&
this
.
state
.
providers
.
filter
(
p
=
>
p
.
errors
&
&
p
.
errors
.
length
)
;
if
(
providersWithErrors
&
&
providersWithErrors
.
length
)
{
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
table
"
{
className
:
"
errorReporting
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
thead
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
th
"
null
"
Provider
ID
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
th
"
null
"
Message
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
th
"
null
"
Timestamp
"
)
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tbody
"
null
providersWithErrors
.
map
(
this
.
renderErrorMessage
)
)
)
;
}
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
p
"
null
"
No
errors
"
)
;
}
renderPBTab
(
)
{
if
(
!
this
.
state
.
messages
)
{
return
null
;
}
let
messagesToShow
=
this
.
state
.
messages
.
filter
(
message
=
>
message
.
template
=
=
=
"
pb_newtab
"
)
;
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
div
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
p
"
{
className
:
"
helpLink
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
span
"
{
className
:
"
icon
icon
-
small
-
spacer
icon
-
info
"
}
)
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
span
"
null
"
To
view
an
available
message
select
its
radio
button
and
click
\
"
Open
a
Private
Browsing
Window
\
"
.
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
br
"
null
)
"
To
modify
a
message
make
changes
to
the
JSON
first
then
select
the
radio
button
.
(
To
make
new
changes
click
\
"
Reset
Message
State
\
"
make
your
changes
and
reselect
the
radio
button
.
)
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
br
"
null
)
"
Click
\
"
Reset
Message
State
\
"
to
clear
all
message
impressions
and
view
messages
in
a
clean
state
.
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
br
"
null
)
"
Note
that
ContentSearch
functions
do
not
work
in
debug
mode
.
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
div
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
ASRouterButton
primary
button
"
onClick
:
this
.
handleOpenPB
}
"
Open
a
Private
Browsing
Window
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
ASRouterButton
primary
button
"
style
:
{
marginInlineStart
:
12
}
onClick
:
this
.
resetPBMessageState
}
"
Reset
Message
State
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
br
"
null
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
input
"
{
type
:
"
radio
"
id
:
clear
radio
name
:
"
PB_message_radio
"
value
:
"
clearPBMessage
"
style
:
{
display
:
"
none
"
}
}
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
h2
"
null
"
Messages
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
ASRouterButton
slim
button
"
onClick
:
(
)
=
>
this
.
toggleAllMessages
(
messagesToShow
)
}
"
Collapse
/
Expand
All
"
)
this
.
renderPBMessages
(
)
)
)
;
}
getSection
(
)
{
const
[
section
]
=
this
.
props
.
location
.
routes
;
switch
(
section
)
{
case
"
private
"
:
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
(
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
Fragment
)
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
h2
"
null
"
Private
Browsing
Messages
"
)
this
.
renderPBTab
(
)
)
;
case
"
targeting
"
:
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
(
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
Fragment
)
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
h2
"
null
"
Targeting
Utilities
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
button
"
onClick
:
this
.
expireCache
}
"
Expire
Cache
"
)
"
"
"
(
This
expires
the
cache
in
ASR
Targeting
for
bookmarks
and
top
sites
)
"
this
.
renderTargetingParameters
(
)
this
.
renderAttributionParamers
(
)
)
;
case
"
groups
"
:
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
(
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
Fragment
)
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
h2
"
null
"
Message
Groups
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
className
:
"
button
"
onClick
:
this
.
resetGroups
}
"
Reset
group
impressions
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
table
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
thead
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tr
"
{
className
:
"
message
-
item
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
"
Enabled
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
"
Impressions
count
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
"
Custom
frequency
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
"
User
preferences
"
)
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
tbody
"
null
this
.
state
.
groups
&
&
this
.
state
.
groups
.
map
(
(
{
id
enabled
frequency
userPreferences
=
[
]
}
)
=
>
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
Row
{
key
:
id
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
TogglePrefCheckbox
{
checked
:
enabled
pref
:
id
disabled
:
true
}
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
this
.
_getGroupImpressionsCount
(
id
frequency
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
JSON
.
stringify
(
frequency
null
2
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
td
"
null
userPreferences
.
join
(
"
"
)
)
)
)
)
)
this
.
renderMessageGroupsFilter
(
)
this
.
renderMessagesByGroup
(
)
)
;
case
"
impressions
"
:
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
(
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
Fragment
)
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
h2
"
null
"
Impressions
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
_ImpressionsSection__WEBPACK_IMPORTED_MODULE_5__
.
ImpressionsSection
{
messageImpressions
:
this
.
state
.
messageImpressions
groupImpressions
:
this
.
state
.
groupImpressions
screenImpressions
:
this
.
state
.
screenImpressions
}
)
)
;
case
"
errors
"
:
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
(
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
Fragment
)
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
h2
"
null
"
ASRouter
Errors
"
)
this
.
renderErrors
(
)
)
;
default
:
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
(
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
Fragment
)
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
h2
"
null
"
Message
Providers
"
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
button
"
{
title
:
"
Restore
all
provider
settings
that
ship
with
Firefox
"
className
:
"
button
"
onClick
:
this
.
resetPref
}
"
Restore
default
prefs
"
)
)
this
.
state
.
providers
?
this
.
renderProviders
(
)
:
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
h2
"
null
"
Messages
"
)
this
.
renderMessageFilter
(
)
this
.
renderMessages
(
)
)
;
}
}
render
(
)
{
if
(
!
this
.
state
.
devtoolsEnabled
)
{
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
div
"
{
className
:
"
asrouter
-
admin
"
}
"
You
must
enable
the
ASRouter
Admin
page
by
setting
"
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
code
"
null
"
browser
.
newtabpage
.
activity
-
stream
.
asrouter
.
devtoolsEnabled
"
)
"
"
"
to
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
code
"
null
"
true
"
)
"
and
then
reloading
this
page
.
"
)
;
}
return
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
div
"
{
className
:
asrouter
-
admin
{
this
.
props
.
collapsed
?
"
collapsed
"
:
"
expanded
"
}
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
aside
"
{
className
:
"
sidebar
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
ul
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
li
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
a
"
{
href
:
"
#
devtools
"
}
"
General
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
li
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
a
"
{
href
:
"
#
devtools
-
private
"
}
"
Private
Browsing
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
li
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
a
"
{
href
:
"
#
devtools
-
targeting
"
}
"
Targeting
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
li
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
a
"
{
href
:
"
#
devtools
-
groups
"
}
"
Message
Groups
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
li
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
a
"
{
href
:
"
#
devtools
-
impressions
"
}
"
Impressions
"
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
li
"
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
a
"
{
href
:
"
#
devtools
-
errors
"
}
"
Errors
"
)
)
)
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
main
"
{
className
:
"
main
-
panel
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
h1
"
null
"
AS
Router
Admin
"
)
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
p
"
{
className
:
"
helpLink
"
}
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
span
"
{
className
:
"
icon
icon
-
small
-
spacer
icon
-
info
"
}
)
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
span
"
null
"
Need
help
using
these
tools
?
Check
out
our
"
"
"
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
"
a
"
{
target
:
"
blank
"
href
:
"
https
:
/
/
firefox
-
source
-
docs
.
mozilla
.
org
/
browser
/
components
/
asrouter
/
docs
/
debugging
-
docs
.
html
"
}
"
documentation
"
)
)
)
this
.
getSection
(
)
)
)
;
}
}
const
ASRouterAdmin
=
props
=
>
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
_SimpleHashRouter__WEBPACK_IMPORTED_MODULE_3__
.
SimpleHashRouter
null
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
ASRouterAdminInner
props
)
)
;
function
renderASRouterAdmin
(
)
{
react_dom__WEBPACK_IMPORTED_MODULE_2___default
(
)
.
render
(
/
*
#
__PURE__
*
/
react__WEBPACK_IMPORTED_MODULE_1___default
(
)
.
createElement
(
ASRouterAdmin
null
)
document
.
getElementById
(
"
root
"
)
)
;
}
}
)
(
)
;
ASRouterAdminRenderUtils
=
__webpack_exports__
;
/
*
*
*
*
*
*
/
}
)
(
)
;
