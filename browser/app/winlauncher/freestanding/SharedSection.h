/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
https
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
mozilla_freestanding_SharedSection_h
#
define
mozilla_freestanding_SharedSection_h
#
include
"
mozilla
/
NativeNt
.
h
"
#
include
"
mozilla
/
interceptor
/
MMPolicies
.
h
"
/
/
clang
-
format
off
#
define
MOZ_LITERAL_UNICODE_STRING
(
s
)
\
{
\
/
*
Length
of
the
string
in
bytes
less
the
null
terminator
*
/
\
sizeof
(
s
)
-
sizeof
(
wchar_t
)
\
/
*
Length
of
the
string
in
bytes
including
the
null
terminator
*
/
\
sizeof
(
s
)
\
/
*
Pointer
to
the
buffer
*
/
\
const_cast
<
wchar_t
*
>
(
s
)
\
}
/
/
clang
-
format
on
namespace
mozilla
{
namespace
freestanding
{
class
SharedSectionTestHelper
;
/
/
This
class
calculates
RVAs
of
kernel32
'
s
functions
and
transfers
them
/
/
to
a
target
process
where
the
transferred
RVAs
are
resolved
into
/
/
function
addresses
so
that
the
target
process
can
use
them
after
/
/
kernel32
.
dll
is
loaded
and
before
IAT
is
resolved
.
struct
MOZ_TRIVIAL_CTOR_DTOR
Kernel32ExportsSolver
final
:
interceptor
:
:
MMPolicyInProcessEarlyStage
:
:
Kernel32Exports
{
void
Init
(
)
;
bool
Resolve
(
)
;
}
;
/
/
This
class
manages
a
section
which
is
created
in
the
launcher
process
and
/
/
mapped
in
the
browser
process
and
the
sandboxed
processes
.
The
section
'
s
/
/
layout
is
represented
as
SharedSection
:
:
Layout
.
/
/
/
/
(
1
)
Kernel32
'
s
functions
required
for
MMPolicyInProcessEarlyStage
/
/
Formatted
as
Kernel32ExportsSolver
.
/
/
/
/
(
2
)
Array
of
NT
paths
of
the
executable
'
s
dependent
modules
/
/
Formatted
as
a
null
-
delimited
wide
-
character
string
set
ending
with
/
/
an
empty
string
.
/
/
/
/
+
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
+
/
/
|
(
1
)
|
FlushInstructionCache
|
/
/
|
|
GetModuleHandleW
|
/
/
|
|
GetSystemInfo
|
/
/
|
|
VirtualProtect
|
/
/
|
|
State
[
kUninitialized
|
kInitialized
|
kResolved
]
|
/
/
+
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
+
/
/
|
(
2
)
|
L
"
NT
path
1
"
|
/
/
|
|
L
"
NT
path
2
"
|
/
/
|
|
.
.
.
|
/
/
|
|
L
"
"
|
/
/
+
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
+
class
MOZ_TRIVIAL_CTOR_DTOR
SharedSection
final
{
struct
Layout
final
{
enum
class
State
{
kUninitialized
kInitialized
kResolved
}
mState
;
Kernel32ExportsSolver
mK32Exports
;
wchar_t
mModulePathArray
[
1
]
;
Span
<
wchar_t
>
GetModulePathArray
(
)
{
return
Span
<
wchar_t
>
(
mModulePathArray
(
kSharedViewSize
-
(
reinterpret_cast
<
uintptr_t
>
(
mModulePathArray
)
-
reinterpret_cast
<
uintptr_t
>
(
this
)
)
)
/
sizeof
(
wchar_t
)
)
;
}
Layout
(
)
=
delete
;
/
/
disallow
instantiation
bool
Resolve
(
)
;
}
;
/
/
As
we
define
a
global
variable
of
this
class
and
use
it
in
our
blocklist
/
/
which
is
excuted
in
a
process
'
s
early
stage
.
If
we
have
a
complex
dtor
/
/
the
static
initializer
tries
to
register
that
dtor
with
onexit
(
)
of
/
/
ucrtbase
.
dll
which
is
not
loaded
yet
resulting
in
crash
.
Thus
we
have
/
/
a
raw
handle
and
a
pointer
as
a
static
variable
and
manually
release
them
/
/
by
calling
Reset
(
)
where
possible
.
static
HANDLE
sSectionHandle
;
static
Layout
*
sWriteCopyView
;
static
RTL_RUN_ONCE
sEnsureOnce
;
static
ULONG
NTAPI
EnsureWriteCopyViewOnce
(
PRTL_RUN_ONCE
PVOID
PVOID
*
)
;
static
Layout
*
EnsureWriteCopyView
(
)
;
static
constexpr
size_t
kSharedViewSize
=
0x1000
;
/
/
For
test
use
only
friend
class
SharedSectionTestHelper
;
public
:
/
/
Replace
|
sSectionHandle
|
with
a
given
handle
.
static
void
Reset
(
HANDLE
aNewSectionObject
=
sSectionHandle
)
;
/
/
Replace
|
sSectionHandle
|
with
a
new
readonly
handle
.
static
void
ConvertToReadOnly
(
)
;
/
/
Create
a
new
writable
section
and
initialize
the
Kernel32ExportsSolver
/
/
part
.
static
LauncherVoidResult
Init
(
)
;
/
/
Append
a
new
string
to
the
|
sSectionHandle
|
static
LauncherVoidResult
AddDependentModule
(
PCUNICODE_STRING
aNtPath
)
;
/
/
Map
|
sSectionHandle
|
to
a
copy
-
on
-
write
page
and
return
a
writable
pointer
/
/
to
each
structure
or
null
if
Layout
failed
to
resolve
exports
.
Kernel32ExportsSolver
*
GetKernel32Exports
(
)
;
Span
<
const
wchar_t
>
GetDependentModules
(
)
;
/
/
Transfer
|
sSectionHandle
|
to
a
process
associated
with
|
aTransferMgr
|
.
static
LauncherVoidResult
TransferHandle
(
nt
:
:
CrossExecTransferManager
&
aTransferMgr
DWORD
aDesiredAccess
HANDLE
*
aDestinationAddress
=
&
sSectionHandle
)
;
}
;
extern
SharedSection
gSharedSection
;
}
/
/
namespace
freestanding
}
/
/
namespace
mozilla
#
endif
/
/
mozilla_freestanding_SharedSection_h
