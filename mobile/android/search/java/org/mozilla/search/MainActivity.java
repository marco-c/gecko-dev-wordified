/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
package
org
.
mozilla
.
search
;
import
android
.
content
.
AsyncQueryHandler
;
import
android
.
content
.
ContentValues
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Bundle
;
import
android
.
support
.
v4
.
app
.
FragmentActivity
;
import
android
.
view
.
View
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
.
SearchHistory
;
import
org
.
mozilla
.
search
.
autocomplete
.
AcceptsSearchQuery
;
/
*
*
*
The
main
entrance
for
the
Android
search
intent
.
*
<
p
/
>
*
State
management
is
delegated
to
child
fragments
.
Fragments
communicate
*
with
each
other
by
passing
messages
through
this
activity
.
The
only
message
passing
right
*
now
the
only
message
passing
occurs
when
a
user
wants
to
submit
a
search
query
.
That
*
passes
through
the
onSearch
method
here
.
*
/
public
class
MainActivity
extends
FragmentActivity
implements
AcceptsSearchQuery
{
enum
State
{
START
PRESEARCH
POSTSEARCH
}
private
State
state
=
State
.
START
;
private
AsyncQueryHandler
queryHandler
;
Override
protected
void
onCreate
(
Bundle
stateBundle
)
{
super
.
onCreate
(
stateBundle
)
;
setContentView
(
R
.
layout
.
search_activity_main
)
;
queryHandler
=
new
AsyncQueryHandler
(
getContentResolver
(
)
)
{
}
;
}
Override
protected
void
onDestroy
(
)
{
super
.
onDestroy
(
)
;
queryHandler
=
null
;
}
Override
protected
void
onResume
(
)
{
super
.
onResume
(
)
;
/
/
When
the
app
launches
make
sure
we
'
re
in
presearch
*
always
*
startPresearch
(
)
;
}
Override
public
void
onSearch
(
String
query
)
{
startPostsearch
(
)
;
storeQuery
(
query
)
;
(
(
PostSearchFragment
)
getSupportFragmentManager
(
)
.
findFragmentById
(
R
.
id
.
postsearch
)
)
.
setUrl
(
"
https
:
/
/
search
.
yahoo
.
com
/
search
?
p
=
"
+
Uri
.
encode
(
query
)
)
;
}
private
void
startPresearch
(
)
{
if
(
state
!
=
State
.
PRESEARCH
)
{
state
=
State
.
PRESEARCH
;
findViewById
(
R
.
id
.
postsearch
)
.
setVisibility
(
View
.
INVISIBLE
)
;
findViewById
(
R
.
id
.
presearch
)
.
setVisibility
(
View
.
VISIBLE
)
;
}
}
private
void
startPostsearch
(
)
{
if
(
state
!
=
State
.
POSTSEARCH
)
{
state
=
State
.
POSTSEARCH
;
findViewById
(
R
.
id
.
presearch
)
.
setVisibility
(
View
.
INVISIBLE
)
;
findViewById
(
R
.
id
.
postsearch
)
.
setVisibility
(
View
.
VISIBLE
)
;
}
}
Override
public
void
onBackPressed
(
)
{
if
(
state
=
=
State
.
POSTSEARCH
)
{
startPresearch
(
)
;
}
else
{
super
.
onBackPressed
(
)
;
}
}
/
*
*
*
Store
the
search
query
in
Fennec
'
s
search
history
database
.
*
/
private
void
storeQuery
(
String
query
)
{
final
ContentValues
cv
=
new
ContentValues
(
)
;
cv
.
put
(
SearchHistory
.
QUERY
query
)
;
/
/
Setting
0
for
the
token
since
we
only
have
one
type
of
insert
.
/
/
Setting
null
for
the
cookie
since
we
don
'
t
handle
the
result
of
the
insert
.
queryHandler
.
startInsert
(
0
null
SearchHistory
.
CONTENT_URI
cv
)
;
}
}
