/
*
-
*
-
Mode
:
Java
;
c
-
basic
-
offset
:
4
;
tab
-
width
:
4
;
indent
-
tabs
-
mode
:
nil
;
-
*
-
*
Any
copyright
is
dedicated
to
the
Public
Domain
.
http
:
/
/
creativecommons
.
org
/
publicdomain
/
zero
/
1
.
0
/
*
/
package
org
.
mozilla
.
geckoview
.
test
import
org
.
mozilla
.
geckoview
.
GeckoResponse
import
org
.
mozilla
.
geckoview
.
GeckoSession
import
org
.
mozilla
.
geckoview
.
test
.
rule
.
GeckoSessionTestRule
.
AssertCalled
import
org
.
mozilla
.
geckoview
.
test
.
rule
.
GeckoSessionTestRule
.
IgnoreCrash
import
org
.
mozilla
.
geckoview
.
test
.
rule
.
GeckoSessionTestRule
.
ReuseSession
import
org
.
mozilla
.
geckoview
.
test
.
util
.
Callbacks
import
android
.
support
.
test
.
filters
.
MediumTest
import
android
.
support
.
test
.
runner
.
AndroidJUnit4
import
org
.
hamcrest
.
Matchers
.
*
import
org
.
junit
.
Assume
.
assumeThat
import
org
.
junit
.
Test
import
org
.
junit
.
runner
.
RunWith
RunWith
(
AndroidJUnit4
:
:
class
)
MediumTest
class
ContentDelegateTest
:
BaseSessionTest
(
)
{
Test
fun
titleChange
(
)
{
sessionRule
.
session
.
loadTestPath
(
TITLE_CHANGE_HTML_PATH
)
sessionRule
.
waitUntilCalled
(
object
:
Callbacks
.
ContentDelegate
{
AssertCalled
(
count
=
2
)
override
fun
onTitleChange
(
session
:
GeckoSession
title
:
String
)
{
assertThat
(
"
Title
should
match
"
title
equalTo
(
forEachCall
(
"
Title1
"
"
Title2
"
)
)
)
}
}
)
}
Test
fun
download
(
)
{
sessionRule
.
session
.
loadTestPath
(
DOWNLOAD_HTML_PATH
)
sessionRule
.
waitUntilCalled
(
object
:
Callbacks
.
NavigationDelegate
Callbacks
.
ContentDelegate
{
AssertCalled
(
count
=
2
)
override
fun
onLoadRequest
(
session
:
GeckoSession
uri
:
String
where
:
Int
flags
:
Int
response
:
GeckoResponse
<
Boolean
>
)
{
response
.
respond
(
false
)
}
AssertCalled
(
false
)
override
fun
onNewSession
(
session
:
GeckoSession
uri
:
String
response
:
GeckoResponse
<
GeckoSession
>
)
{
}
AssertCalled
(
count
=
1
)
override
fun
onExternalResponse
(
session
:
GeckoSession
response
:
GeckoSession
.
WebResponseInfo
)
{
assertThat
(
"
Uri
should
start
with
data
:
"
response
.
uri
startsWith
(
"
data
:
"
)
)
assertThat
(
"
Content
type
should
match
"
response
.
contentType
equalTo
(
"
text
/
plain
"
)
)
assertThat
(
"
Content
length
should
be
non
-
zero
"
response
.
contentLength
greaterThan
(
0L
)
)
assertThat
(
"
Filename
should
match
"
response
.
filename
equalTo
(
"
download
.
txt
"
)
)
}
}
)
}
IgnoreCrash
ReuseSession
(
false
)
Test
fun
crashContent
(
)
{
/
/
This
test
doesn
'
t
make
sense
without
multiprocess
assumeThat
(
sessionRule
.
env
.
isMultiprocess
equalTo
(
true
)
)
sessionRule
.
session
.
loadUri
(
CONTENT_CRASH_URL
)
sessionRule
.
waitUntilCalled
(
object
:
Callbacks
.
ContentDelegate
{
AssertCalled
(
count
=
1
)
override
fun
onCrash
(
session
:
GeckoSession
)
{
assertThat
(
"
Session
should
be
closed
after
a
crash
"
session
.
isOpen
equalTo
(
false
)
)
/
/
Recover
immediately
session
.
open
(
)
session
.
loadTestPath
(
HELLO_HTML_PATH
)
}
}
)
;
sessionRule
.
waitForPageStop
(
)
sessionRule
.
forCallbacksDuringWait
(
object
:
Callbacks
.
ProgressDelegate
{
AssertCalled
(
count
=
1
)
override
fun
onPageStop
(
session
:
GeckoSession
success
:
Boolean
)
{
assertThat
(
"
Page
should
load
successfully
"
success
equalTo
(
true
)
)
}
}
)
}
IgnoreCrash
ReuseSession
(
false
)
Test
fun
crashContentMultipleSessions
(
)
{
/
/
This
test
doesn
'
t
make
sense
without
multiprocess
assumeThat
(
sessionRule
.
env
.
isMultiprocess
equalTo
(
true
)
)
/
/
We
need
to
make
sure
all
sessions
in
a
given
content
process
/
/
receive
onCrash
(
)
.
If
we
add
multiple
content
processes
this
/
/
test
will
need
fixed
to
ensure
the
test
sessions
go
into
the
/
/
same
one
.
sessionRule
.
createOpenSession
(
)
sessionRule
.
session
.
loadUri
(
CONTENT_CRASH_URL
)
sessionRule
.
waitUntilCalled
(
object
:
Callbacks
.
ContentDelegate
{
AssertCalled
(
count
=
2
)
override
fun
onCrash
(
session
:
GeckoSession
)
{
assertThat
(
"
Session
should
be
closed
after
a
crash
"
session
.
isOpen
equalTo
(
false
)
)
}
}
)
;
}
}
