/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
package
org
.
mozilla
.
focus
.
locale
.
screen
import
android
.
app
.
Activity
import
android
.
content
.
Context
import
android
.
content
.
res
.
Configuration
import
android
.
content
.
res
.
Resources
import
kotlinx
.
coroutines
.
test
.
runTest
import
mozilla
.
components
.
lib
.
state
.
MiddlewareContext
import
mozilla
.
components
.
support
.
locale
.
LocaleUseCases
import
mozilla
.
components
.
support
.
test
.
any
import
mozilla
.
components
.
support
.
test
.
argumentCaptor
import
org
.
junit
.
Assert
.
assertEquals
import
org
.
junit
.
Assert
.
assertTrue
import
org
.
junit
.
Before
import
org
.
junit
.
Test
import
org
.
junit
.
runner
.
RunWith
import
org
.
mockito
.
Mock
import
org
.
mockito
.
Mockito
.
doNothing
import
org
.
mockito
.
Mockito
.
spy
import
org
.
mockito
.
Mockito
.
verify
import
org
.
mockito
.
Mockito
.
when
import
org
.
mockito
.
MockitoAnnotations
.
openMocks
import
org
.
mozilla
.
focus
.
settings
.
InstalledSearchEnginesSettingsFragment
import
org
.
robolectric
.
RobolectricTestRunner
import
org
.
robolectric
.
RuntimeEnvironment
import
java
.
util
.
Locale
RunWith
(
RobolectricTestRunner
:
:
class
)
class
LanguageMiddlewareTest
{
Mock
private
lateinit
var
mockActivity
:
Activity
Mock
private
lateinit
var
resources
:
Resources
Mock
private
lateinit
var
configuration
:
Configuration
Mock
private
lateinit
var
mockLocaleUseCases
:
LocaleUseCases
Mock
private
lateinit
var
mockMiddlewareContext
:
MiddlewareContext
<
LanguageScreenState
LanguageScreenAction
>
Mock
private
lateinit
var
mockNext
:
(
LanguageScreenAction
)
-
>
Unit
Mock
private
lateinit
var
mockStorage
:
LanguageStorage
private
lateinit
var
middleware
:
LanguageMiddleware
private
val
context
:
Context
=
spy
(
RuntimeEnvironment
.
getApplication
(
)
.
applicationContext
)
Before
fun
setup
(
)
{
openMocks
(
this
)
middleware
=
spy
(
LanguageMiddleware
(
mockActivity
mockLocaleUseCases
mockStorage
)
)
when
(
mockActivity
.
applicationContext
)
.
thenReturn
(
context
)
when
(
context
.
resources
)
.
thenReturn
(
resources
)
when
(
resources
.
configuration
)
.
thenReturn
(
configuration
)
InstalledSearchEnginesSettingsFragment
.
languageChanged
=
false
doNothing
(
)
.
when
(
middleware
)
.
setNewLocale
(
any
(
)
)
doNothing
(
)
.
when
(
middleware
)
.
resetToSystemDefault
(
)
}
Test
fun
GIVEN
Select
action
WHEN
invoke
THEN
saves
language
sets
current
language
and
calls
next
(
)
=
runTest
{
val
selectedLanguage
=
Language
(
"
es
-
ES
"
"
Espa
ol
(
Espa
a
)
"
0
)
val
action
=
LanguageScreenAction
.
Select
(
selectedLanguage
)
middleware
.
invoke
(
mockMiddlewareContext
mockNext
action
)
verify
(
mockStorage
)
.
saveCurrentLanguageInSharePref
(
selectedLanguage
.
tag
)
Suppress
(
"
DEPRECATION
"
)
verify
(
resources
)
.
updateConfiguration
(
any
(
)
any
(
)
)
verify
(
mockNext
)
.
invoke
(
action
)
assertTrue
(
InstalledSearchEnginesSettingsFragment
.
languageChanged
)
}
Test
fun
GIVEN
Select
action
with
system
default
WHEN
invoke
THEN
resets
to
system
default
(
)
=
runTest
{
val
selectedLanguage
=
Language
(
"
System
Default
"
LanguageStorage
.
LOCALE_SYSTEM_DEFAULT
0
)
val
action
=
LanguageScreenAction
.
Select
(
selectedLanguage
)
middleware
.
invoke
(
mockMiddlewareContext
mockNext
action
)
verify
(
mockStorage
)
.
saveCurrentLanguageInSharePref
(
LanguageStorage
.
LOCALE_SYSTEM_DEFAULT
)
Suppress
(
"
DEPRECATION
"
)
verify
(
resources
)
.
updateConfiguration
(
any
(
)
any
(
)
)
verify
(
mockNext
)
.
invoke
(
action
)
assertTrue
(
InstalledSearchEnginesSettingsFragment
.
languageChanged
)
}
Test
fun
GIVEN
InitLanguages
action
WHEN
invoke
THEN
dispatches
UpdateLanguages
(
)
=
runTest
{
val
languages
=
listOf
(
Language
(
"
en
-
US
"
"
English
(
US
)
"
1
)
Language
(
"
es
-
ES
"
"
Espa
ol
(
Espa
a
)
"
0
)
)
val
selectedLanguage
=
Language
(
"
en
-
US
"
"
English
(
US
)
"
1
)
val
action
=
LanguageScreenAction
.
InitLanguages
when
(
mockStorage
.
languages
)
.
thenReturn
(
languages
)
when
(
mockStorage
.
selectedLanguage
)
.
thenReturn
(
selectedLanguage
)
middleware
.
invoke
(
mockMiddlewareContext
mockNext
action
)
val
dispatchedActionCaptor
=
argumentCaptor
<
LanguageScreenAction
>
(
)
verify
(
mockMiddlewareContext
)
.
dispatch
(
dispatchedActionCaptor
.
capture
(
)
)
val
dispatchedAction
=
dispatchedActionCaptor
.
value
assertTrue
(
dispatchedAction
is
LanguageScreenAction
.
UpdateLanguages
)
dispatchedAction
as
LanguageScreenAction
.
UpdateLanguages
assertEquals
(
languages
dispatchedAction
.
languageList
)
assertEquals
(
selectedLanguage
dispatchedAction
.
selectedLanguage
)
}
Test
fun
GIVEN
other
action
WHEN
invoke
THEN
calls
next
(
)
=
runTest
{
val
action
=
LanguageScreenAction
.
UpdateLanguages
(
emptyList
(
)
Language
(
"
en
-
US
"
"
English
(
US
)
"
0
)
)
middleware
.
invoke
(
mockMiddlewareContext
mockNext
action
)
verify
(
mockNext
)
.
invoke
(
action
)
}
Test
fun
GIVEN
non
-
system
default
language
tag
WHEN
setCurrentLanguage
THEN
sets
new
locale
and
recreates
activity
(
)
=
runTest
{
val
languageTag
=
"
es
-
ES
"
val
locale
=
Locale
.
forLanguageTag
(
languageTag
)
middleware
.
setCurrentLanguage
(
languageTag
)
verify
(
middleware
)
.
setNewLocale
(
locale
)
Suppress
(
"
DEPRECATION
"
)
verify
(
resources
)
.
updateConfiguration
(
any
(
)
any
(
)
)
verify
(
mockActivity
)
.
recreate
(
)
}
Test
fun
GIVEN
system
default
language
tag
WHEN
setCurrentLanguage
THEN
resets
to
system
default
and
recreates
activity
(
)
=
runTest
{
val
languageTag
=
LanguageStorage
.
LOCALE_SYSTEM_DEFAULT
middleware
.
setCurrentLanguage
(
languageTag
)
verify
(
middleware
)
.
resetToSystemDefault
(
)
Suppress
(
"
DEPRECATION
"
)
verify
(
resources
)
.
updateConfiguration
(
any
(
)
any
(
)
)
verify
(
mockActivity
)
.
recreate
(
)
}
}
