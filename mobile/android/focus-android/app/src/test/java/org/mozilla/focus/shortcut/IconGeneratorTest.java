/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
package
org
.
mozilla
.
focus
.
shortcut
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
robolectric
.
RobolectricTestRunner
;
import
static
org
.
junit
.
Assert
.
assertEquals
;
RunWith
(
RobolectricTestRunner
.
class
)
public
class
IconGeneratorTest
{
Test
public
void
testRepresentativeCharacter
(
)
{
assertEquals
(
"
M
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
https
:
/
/
mozilla
.
org
"
)
)
;
assertEquals
(
"
W
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
http
:
/
/
wikipedia
.
org
"
)
)
;
assertEquals
(
"
P
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
http
:
/
/
plus
.
google
.
com
"
)
)
;
assertEquals
(
"
E
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
https
:
/
/
en
.
m
.
wikipedia
.
org
/
wiki
/
Main_Page
"
)
)
;
/
/
Stripping
common
prefixes
assertEquals
(
"
T
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
http
:
/
/
www
.
theverge
.
com
"
)
)
;
assertEquals
(
"
F
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
https
:
/
/
m
.
facebook
.
com
"
)
)
;
assertEquals
(
"
T
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
https
:
/
/
mobile
.
twitter
.
com
"
)
)
;
/
/
Special
urls
assertEquals
(
"
?
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
file
:
/
/
/
"
)
)
;
assertEquals
(
"
S
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
file
:
/
/
/
system
/
"
)
)
;
assertEquals
(
"
P
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
ftp
:
/
/
people
.
mozilla
.
org
/
test
"
)
)
;
/
/
No
values
assertEquals
(
"
?
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
"
)
)
;
assertEquals
(
"
?
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
null
)
)
;
/
/
Rubbish
assertEquals
(
"
Z
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
zZz
"
)
)
;
assertEquals
(
"
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
lkfdpou3rkjaslfdk
asdfo8
"
)
)
;
assertEquals
(
"
?
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
_
*
+
*
'
#
#
"
)
)
;
assertEquals
(
"
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
\
\
_
(
)
_
/
"
)
)
;
assertEquals
(
"
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
_
Look
of
Disapproval
"
)
)
;
/
/
Non
-
ASCII
assertEquals
(
"
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
http
:
/
/
www
.
tzend
.
de
"
)
)
;
assertEquals
(
"
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
http
:
/
/
.
com
"
)
)
;
assertEquals
(
"
C
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
http
:
/
/
.
com
"
)
)
;
assertEquals
(
"
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
http
:
/
/
.
de
"
)
)
;
assertEquals
(
"
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
http
:
/
/
.
com
/
"
)
)
;
/
/
cyrillic
/
/
Punycode
assertEquals
(
"
X
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
http
:
/
/
xn
-
-
tzend
-
fra
.
de
"
)
)
;
/
/
tzend
.
de
assertEquals
(
"
X
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
http
:
/
/
xn
-
-
V8jxj3d1dzdz08w
.
com
"
)
)
;
/
/
.
com
/
/
Numbers
assertEquals
(
"
1
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
https
:
/
/
www
.
1and1
.
com
/
"
)
)
;
/
/
IP
assertEquals
(
"
1
"
IconGenerator
.
Companion
.
getRepresentativeCharacter
(
"
https
:
/
/
192
.
168
.
0
.
1
"
)
)
;
}
}
