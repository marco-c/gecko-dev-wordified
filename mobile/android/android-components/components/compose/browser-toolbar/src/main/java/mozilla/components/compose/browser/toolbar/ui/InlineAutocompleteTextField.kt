/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
package
mozilla
.
components
.
compose
.
browser
.
toolbar
.
ui
import
android
.
view
.
inputmethod
.
EditorInfo
import
androidx
.
annotation
.
DoNotInline
import
androidx
.
annotation
.
VisibleForTesting
import
androidx
.
compose
.
foundation
.
background
import
androidx
.
compose
.
foundation
.
gestures
.
awaitEachGesture
import
androidx
.
compose
.
foundation
.
gestures
.
awaitFirstDown
import
androidx
.
compose
.
foundation
.
layout
.
Box
import
androidx
.
compose
.
foundation
.
layout
.
fillMaxWidth
import
androidx
.
compose
.
foundation
.
text
.
BasicTextField
import
androidx
.
compose
.
foundation
.
text
.
KeyboardOptions
import
androidx
.
compose
.
material3
.
Text
import
androidx
.
compose
.
runtime
.
Composable
import
androidx
.
compose
.
runtime
.
CompositionLocalProvider
import
androidx
.
compose
.
runtime
.
LaunchedEffect
import
androidx
.
compose
.
runtime
.
getValue
import
androidx
.
compose
.
runtime
.
mutableStateOf
import
androidx
.
compose
.
runtime
.
remember
import
androidx
.
compose
.
runtime
.
setValue
import
androidx
.
compose
.
ui
.
Alignment
import
androidx
.
compose
.
ui
.
ExperimentalComposeUiApi
import
androidx
.
compose
.
ui
.
Modifier
import
androidx
.
compose
.
ui
.
focus
.
FocusRequester
import
androidx
.
compose
.
ui
.
focus
.
focusRequester
import
androidx
.
compose
.
ui
.
focus
.
onFocusChanged
import
androidx
.
compose
.
ui
.
geometry
.
Rect
import
androidx
.
compose
.
ui
.
graphics
.
Color
import
androidx
.
compose
.
ui
.
graphics
.
SolidColor
import
androidx
.
compose
.
ui
.
input
.
pointer
.
pointerInput
import
androidx
.
compose
.
ui
.
platform
.
InterceptPlatformTextInput
import
androidx
.
compose
.
ui
.
platform
.
LocalLayoutDirection
import
androidx
.
compose
.
ui
.
platform
.
LocalSoftwareKeyboardController
import
androidx
.
compose
.
ui
.
platform
.
LocalView
import
androidx
.
compose
.
ui
.
platform
.
PlatformTextInputMethodRequest
import
androidx
.
compose
.
ui
.
platform
.
testTag
import
androidx
.
compose
.
ui
.
text
.
AnnotatedString
import
androidx
.
compose
.
ui
.
text
.
SpanStyle
import
androidx
.
compose
.
ui
.
text
.
TextRange
import
androidx
.
compose
.
ui
.
text
.
TextStyle
import
androidx
.
compose
.
ui
.
text
.
buildAnnotatedString
import
androidx
.
compose
.
ui
.
text
.
input
.
ImeAction
import
androidx
.
compose
.
ui
.
text
.
input
.
KeyboardType
import
androidx
.
compose
.
ui
.
text
.
input
.
OffsetMapping
import
androidx
.
compose
.
ui
.
text
.
input
.
TextFieldValue
import
androidx
.
compose
.
ui
.
text
.
input
.
TransformedText
import
androidx
.
compose
.
ui
.
text
.
input
.
VisualTransformation
import
androidx
.
compose
.
ui
.
text
.
style
.
TextAlign
import
androidx
.
compose
.
ui
.
tooling
.
preview
.
PreviewLightDark
import
androidx
.
compose
.
ui
.
unit
.
LayoutDirection
import
androidx
.
compose
.
ui
.
unit
.
sp
import
androidx
.
core
.
graphics
.
toColorInt
import
mozilla
.
components
.
compose
.
base
.
theme
.
AcornTheme
import
mozilla
.
components
.
compose
.
browser
.
toolbar
.
concept
.
BrowserToolbarTestTags
.
ADDRESSBAR_SEARCH_BOX
import
mozilla
.
components
.
concept
.
toolbar
.
AutocompleteResult
private
const
val
TEXT_SIZE
=
15f
private
const
val
TEXT_HIGHLIGHT_COLOR
=
"
#
5C592ACB
"
/
*
*
*
A
text
field
composable
that
displays
a
suggestion
inline
with
the
user
'
s
input
*
styled
differently
to
distinguish
it
from
the
typed
text
.
*
*
param
query
The
query
to
show
.
*
param
hint
Placeholder
text
tpo
show
if
[
query
]
is
empty
.
*
param
suggestion
The
autocomplete
suggestion
to
display
.
null
if
no
suggestion
is
active
.
*
param
showQueryAsPreselected
If
true
the
initial
query
text
will
be
fully
selected
.
*
param
usePrivateModeQueries
If
true
instructs
the
keyboard
to
disable
personalized
learning
*
suitable
for
private
/
incognito
modes
.
*
param
modifier
The
[
Modifier
]
to
be
applied
to
this
text
field
.
*
param
onUrlEdit
Callback
invoked
when
the
user
types
or
deletes
text
providing
[
BrowserToolbarQuery
]
*
with
information
about
the
previous
and
the
new
query
.
*
param
onUrlEditAborted
A
callback
for
when
an
edit
is
aborted
.
*
param
onUrlCommitted
A
callback
for
when
the
user
commits
the
text
via
an
IME
action
like
"
Go
"
.
*
/
OptIn
(
ExperimentalComposeUiApi
:
:
class
)
/
/
for
InterceptPlatformTextInput
Suppress
(
"
LongMethod
"
"
CyclomaticComplexMethod
"
)
Composable
internal
fun
InlineAutocompleteTextField
(
query
:
String
hint
:
String
suggestion
:
AutocompleteResult
?
showQueryAsPreselected
:
Boolean
usePrivateModeQueries
:
Boolean
modifier
:
Modifier
=
Modifier
onUrlEdit
:
(
BrowserToolbarQuery
)
-
>
Unit
=
{
}
onUrlEditAborted
:
(
)
-
>
Unit
=
{
}
onUrlCommitted
:
(
String
)
-
>
Unit
=
{
}
)
{
var
textFieldValue
by
remember
{
mutableStateOf
(
TextFieldValue
(
"
"
)
)
}
LaunchedEffect
(
query
)
{
if
(
query
!
=
textFieldValue
.
text
)
{
textFieldValue
=
TextFieldValue
(
text
=
query
selection
=
when
(
showQueryAsPreselected
)
{
true
-
>
TextRange
(
0
query
.
length
)
false
-
>
TextRange
(
query
.
length
)
}
)
}
}
val
focusRequester
=
remember
{
FocusRequester
(
)
}
val
keyboardController
=
LocalSoftwareKeyboardController
.
current
LaunchedEffect
(
Unit
)
{
focusRequester
.
requestFocus
(
)
}
var
currentSuggestion
:
AutocompleteResult
?
by
remember
(
suggestion
)
{
mutableStateOf
(
suggestion
)
}
val
suggestionTextColor
=
AcornTheme
.
colors
.
textPrimary
val
highlightBackgroundColor
=
Color
(
TEXT_HIGHLIGHT_COLOR
.
toColorInt
(
)
)
val
suggestionVisualTransformation
=
remember
(
currentSuggestion
textFieldValue
)
{
when
(
textFieldValue
.
text
.
isEmpty
(
)
)
{
true
-
>
VisualTransformation
.
None
false
-
>
AutocompleteVisualTransformation
(
userInput
=
textFieldValue
suggestion
=
currentSuggestion
textColor
=
suggestionTextColor
textBackground
=
highlightBackgroundColor
)
}
}
val
localView
=
LocalView
.
current
LaunchedEffect
(
currentSuggestion
)
{
currentSuggestion
?
.
text
?
.
let
{
Suppress
(
"
DEPRECATION
"
)
localView
.
announceForAccessibility
(
it
)
}
}
var
suggestionBounds
by
remember
{
mutableStateOf
<
Rect
?
>
(
null
)
}
val
deviceLayoutDirection
=
LocalLayoutDirection
.
current
/
/
Always
want
the
text
to
be
entered
left
to
right
.
CompositionLocalProvider
(
LocalLayoutDirection
provides
LayoutDirection
.
Ltr
)
{
/
/
Set
incognito
mode
for
the
keyboard
when
needed
.
InterceptPlatformTextInput
(
interceptor
=
{
request
nextHandler
-
>
val
modifiedRequest
=
PlatformTextInputMethodRequest
{
outAttributes
-
>
request
.
createInputConnection
(
outAttributes
)
.
also
{
if
(
usePrivateModeQueries
)
{
NoPersonalizedLearningHelper
.
addNoPersonalizedLearning
(
outAttributes
)
}
}
}
nextHandler
.
startInputMethod
(
modifiedRequest
)
}
)
{
BasicTextField
(
value
=
textFieldValue
onValueChange
=
{
newValue
-
>
/
/
Remove
suggestion
if
cursor
placement
changed
val
onlySelectionChanged
=
textFieldValue
.
text
=
=
newValue
.
text
&
&
textFieldValue
.
composition
=
=
newValue
.
composition
&
&
textFieldValue
.
annotatedString
=
=
newValue
.
annotatedString
if
(
onlySelectionChanged
)
{
currentSuggestion
=
null
textFieldValue
=
newValue
return
BasicTextField
}
/
/
Remove
suggestion
if
user
pressed
backspace
and
/
/
only
delete
query
characters
for
the
next
backspace
after
the
suggestion
was
removed
.
val
originalText
=
textFieldValue
.
text
val
newText
=
newValue
.
text
val
isBackspaceHidingSuggestion
=
originalText
.
length
=
=
newText
.
length
+
1
&
&
originalText
.
startsWith
(
newText
)
&
&
currentSuggestion
?
.
text
?
.
startsWith
(
originalText
)
=
=
true
if
(
isBackspaceHidingSuggestion
)
{
currentSuggestion
=
null
}
else
{
onUrlEdit
(
BrowserToolbarQuery
(
previous
=
originalText
current
=
newText
)
)
textFieldValue
=
newValue
}
}
modifier
=
modifier
.
testTag
(
ADDRESSBAR_SEARCH_BOX
)
.
fillMaxWidth
(
)
.
onFocusChanged
{
focusState
-
>
if
(
focusState
.
isFocused
)
{
keyboardController
?
.
show
(
)
}
}
.
focusRequester
(
focusRequester
)
textStyle
=
TextStyle
(
fontSize
=
TEXT_SIZE
.
sp
color
=
AcornTheme
.
colors
.
textPrimary
textAlign
=
when
(
deviceLayoutDirection
)
{
LayoutDirection
.
Ltr
-
>
TextAlign
.
Start
LayoutDirection
.
Rtl
-
>
TextAlign
.
End
}
)
keyboardOptions
=
KeyboardOptions
(
showKeyboardOnFocus
=
true
keyboardType
=
KeyboardType
.
Uri
imeAction
=
ImeAction
.
Go
autoCorrectEnabled
=
!
usePrivateModeQueries
)
singleLine
=
true
visualTransformation
=
suggestionVisualTransformation
onTextLayout
=
{
layoutResult
-
>
val
currentInput
=
textFieldValue
.
text
suggestionBounds
=
when
(
currentInput
.
isEmpty
(
)
)
{
true
-
>
null
false
-
>
try
{
layoutResult
.
getBoundingBox
(
currentInput
.
length
-
1
)
}
catch
(
_
:
IllegalArgumentException
)
{
null
}
}
}
cursorBrush
=
SolidColor
(
AcornTheme
.
colors
.
textPrimary
)
decorationBox
=
{
innerTextField
-
>
Box
(
modifier
=
Modifier
.
fillMaxWidth
(
)
/
/
Commit
the
suggestion
when
users
tap
on
the
outside
of
the
typed
in
text
.
.
pointerInput
(
currentSuggestion
suggestionBounds
)
{
awaitEachGesture
{
val
downEvent
=
awaitFirstDown
(
requireUnconsumed
=
false
)
val
bounds
=
suggestionBounds
val
suggestion
=
currentSuggestion
?
.
text
if
(
bounds
!
=
null
&
&
suggestion
!
=
null
&
&
bounds
.
right
<
downEvent
.
position
.
x
)
{
onUrlEdit
(
BrowserToolbarQuery
(
previous
=
textFieldValue
.
text
current
=
suggestion
)
)
textFieldValue
=
TextFieldValue
(
text
=
suggestion
selection
=
TextRange
(
suggestion
.
length
)
)
}
}
}
contentAlignment
=
when
(
deviceLayoutDirection
)
{
LayoutDirection
.
Ltr
-
>
Alignment
.
CenterStart
LayoutDirection
.
Rtl
-
>
Alignment
.
CenterEnd
}
)
{
if
(
textFieldValue
.
text
.
isEmpty
(
)
)
{
Text
(
text
=
hint
style
=
TextStyle
(
fontSize
=
TEXT_SIZE
.
sp
color
=
AcornTheme
.
colors
.
textSecondary
)
)
}
innerTextField
(
)
}
}
)
}
}
}
/
*
*
*
Information
about
the
current
browser
toolbar
query
.
*
*
property
current
The
current
query
.
*
property
previous
The
previous
query
if
any
.
*
/
data
class
BrowserToolbarQuery
(
val
current
:
String
val
previous
:
String
?
=
null
)
/
*
*
*
Helper
for
showing
the
autocomplete
suggestion
inline
with
user
'
s
input
.
*
/
private
class
AutocompleteVisualTransformation
(
private
val
userInput
:
TextFieldValue
private
val
suggestion
:
AutocompleteResult
?
private
val
textColor
:
Color
private
val
textBackground
:
Color
)
:
VisualTransformation
{
override
fun
filter
(
text
:
AnnotatedString
)
:
TransformedText
{
if
(
suggestion
?
.
text
.
isNullOrEmpty
(
)
|
|
!
suggestion
.
text
.
startsWith
(
userInput
.
text
)
)
{
return
TransformedText
(
AnnotatedString
(
userInput
.
text
)
OffsetMapping
.
Identity
)
}
val
transformed
=
buildAnnotatedString
{
append
(
userInput
.
text
)
append
(
AnnotatedString
(
suggestion
.
text
.
removePrefix
(
userInput
.
text
)
spanStyle
=
SpanStyle
(
color
=
textColor
background
=
textBackground
)
)
)
}
val
offsetMapping
=
object
:
OffsetMapping
{
override
fun
originalToTransformed
(
offset
:
Int
)
:
Int
{
return
offset
}
override
fun
transformedToOriginal
(
offset
:
Int
)
:
Int
{
return
offset
.
coerceIn
(
0
userInput
.
text
.
length
)
}
}
return
TransformedText
(
transformed
offsetMapping
)
}
}
/
*
*
*
Temporary
helper
for
putting
the
toolbar
in
incognito
mode
.
*
See
https
:
/
/
issuetracker
.
google
.
com
/
issues
/
359257538
.
*
/
VisibleForTesting
internal
object
NoPersonalizedLearningHelper
{
DoNotInline
fun
addNoPersonalizedLearning
(
info
:
EditorInfo
)
{
info
.
imeOptions
=
info
.
imeOptions
or
EditorInfo
.
IME_FLAG_NO_PERSONALIZED_LEARNING
}
}
PreviewLightDark
Composable
private
fun
InlineAutocompleteTextFieldWithSuggestion
(
)
{
AcornTheme
{
Box
(
Modifier
.
background
(
AcornTheme
.
colors
.
layer1
)
)
{
InlineAutocompleteTextField
(
query
=
"
wiki
"
hint
=
"
hint
"
showQueryAsPreselected
=
false
usePrivateModeQueries
=
false
suggestion
=
AutocompleteResult
(
"
wiki
"
"
wikipedia
.
org
"
"
https
:
/
/
wikipedia
.
org
"
"
test
"
1
)
)
}
}
}
PreviewLightDark
Composable
private
fun
InlineAutocompleteTextFieldWithNoQuery
(
)
{
AcornTheme
{
Box
(
Modifier
.
background
(
AcornTheme
.
colors
.
layer1
)
)
{
InlineAutocompleteTextField
(
query
=
"
"
hint
=
"
hint
"
showQueryAsPreselected
=
false
usePrivateModeQueries
=
false
suggestion
=
null
)
}
}
}
