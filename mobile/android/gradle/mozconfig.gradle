/
*
-
*
-
Mode
:
Groovy
;
c
-
basic
-
offset
:
4
;
tab
-
width
:
20
;
indent
-
tabs
-
mode
:
nil
;
-
*
-
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
import
groovy
.
json
.
JsonSlurper
/
/
Loads
the
mach
environment
configurations
into
a
gradle
extension
property
.
apply
from
:
file
(
'
.
/
mach_env
.
gradle
'
)
logger
.
lifecycle
(
"
mozconfig
.
gradle
>
Loading
mach
environment
into
a
gradle
extension
property
"
)
if
(
!
ext
.
hasProperty
(
"
topsrcdir
"
)
)
{
ext
.
topsrcdir
=
file
(
buildscript
.
getSourceFile
(
)
)
.
getParentFile
(
)
.
getParentFile
(
)
.
getParentFile
(
)
.
getParentFile
(
)
.
absolutePath
}
def
command
=
[
"
{
topsrcdir
}
/
mach
"
"
environment
"
"
-
-
format
"
"
json
"
"
-
-
verbose
"
]
if
(
System
.
env
.
GRADLE_MACH_PYTHON
)
{
command
.
addAll
(
0
[
System
.
env
.
GRADLE_MACH_PYTHON
]
)
}
else
if
(
System
.
properties
[
"
os
.
name
"
]
.
contains
(
"
Windows
"
)
)
{
command
.
addAll
(
0
[
"
python
"
]
)
}
def
proc
=
providers
.
exec
{
workingDir
=
new
File
(
topsrcdir
)
environment
=
machEnv
(
topsrcdir
)
commandLine
=
command
ignoreExitValue
=
true
}
def
result
=
proc
.
result
.
get
(
)
.
exitValue
def
standardOutput
=
proc
.
standardOutput
.
asText
.
get
(
)
/
/
Only
show
the
output
if
something
went
wrong
.
if
(
result
!
=
0
)
{
logger
.
info
(
"
mozconfig
.
gradle
>
Error
running
.
/
mach
environment
:
\
n
\
n
"
+
"
Process
'
{
command
}
'
finished
with
non
-
zero
exit
value
{
result
}
:
\
n
\
n
"
+
"
stdout
:
\
n
"
+
"
{
standardOutput
}
\
n
\
n
"
+
"
stderr
:
\
n
"
+
"
{
proc
.
standardError
.
asText
.
get
(
)
}
"
)
throw
new
StopExecutionException
(
"
Could
not
run
.
/
mach
environment
.
Try
running
.
/
mach
build
first
.
"
)
}
def
outputString
=
standardOutput
.
toString
(
)
.
normalize
(
)
/
/
Ignore
possible
lines
of
output
from
pip
installing
packages
/
/
so
only
start
at
what
looks
like
the
beginning
of
a
JSON
object
if
(
outputString
.
lastIndexOf
(
"
\
n
"
)
!
=
-
1
)
{
outputString
=
outputString
.
substring
(
outputString
.
lastIndexOf
(
"
\
n
"
)
+
1
)
}
def
slurper
=
new
JsonSlurper
(
)
def
json
;
try
{
json
=
slurper
.
parseText
(
outputString
)
}
catch
(
ignored
)
{
logger
.
info
(
"
mozconfig
.
gradle
>
Failed
to
parse
JSON
output
from
.
/
mach
environment
:
\
n
\
n
"
+
outputString
)
;
throw
new
StopExecutionException
(
"
Failed
to
parse
JSON
output
from
.
/
mach
environment
.
\
n
\
n
"
+
outputString
)
;
}
if
(
json
.
substs
.
MOZ_BUILD_APP
!
=
'
mobile
/
android
'
)
{
throw
new
GradleException
(
"
Building
with
Gradle
is
only
supported
for
Firefox
for
Android
i
.
e
.
MOZ_BUILD_APP
=
=
'
mobile
/
android
'
.
"
)
}
/
/
The
Gradle
instance
is
shared
between
settings
.
gradle
and
all
the
/
/
other
build
.
gradle
files
(
see
/
/
http
:
/
/
forums
.
gradle
.
org
/
gradle
/
topics
/
define_extension_properties_from_settings_xml
)
.
/
/
We
use
this
ext
property
to
pass
the
per
-
object
-
directory
mozconfig
/
/
between
scripts
.
This
lets
us
execute
set
-
up
code
before
we
gradle
/
/
tries
to
configure
the
project
even
once
and
as
a
side
benefit
/
/
saves
invoking
|
mach
environment
|
multiple
times
.
gradle
.
ext
.
mozconfig
=
json
/
/
Produced
by
mach
build
.
Bug
1543982
:
the
mozconfig
determined
by
mach
/
/
environment
above
can
be
different
because
mach
build
itself
sets
certain
/
/
critical
environment
variables
including
MOZ_OBJDIR
CC
and
CXX
.
We
use
/
/
this
record
to
patch
up
the
environment
when
we
recursively
invoke
mach
/
/
build
.
.
.
commands
from
within
Gradle
.
This
avoids
invalidating
configure
/
/
based
on
the
changed
environment
variables
.
def
orig
=
slurper
.
parse
(
new
File
(
json
.
topobjdir
'
.
mozconfig
.
json
'
)
)
gradle
.
ext
.
mozconfig
.
orig_mozconfig
=
orig
.
mozconfig
/
/
While
we
'
re
here
read
our
VCS
configuration
when
available
.
This
is
usually
/
/
present
in
the
mozconfig
but
the
source
of
truth
is
source
-
repo
.
h
which
/
/
incorporates
environment
variables
after
configure
-
time
.
gradle
.
ext
.
mozconfig
.
source_repo
=
[
:
]
def
sourceRepoFile
=
file
(
"
{
gradle
.
mozconfig
.
topobjdir
}
/
source
-
repo
.
h
"
)
if
(
sourceRepoFile
.
canRead
(
)
)
{
def
defines
=
[
"
MOZ_SOURCE_STAMP
"
"
MOZ_SOURCE_REPO
"
"
MOZ_SOURCE_URL
"
]
sourceRepoFile
.
eachLine
{
line
-
>
defines
.
forEach
{
define
-
>
def
matcher
=
line
=
~
~
/
^
#
define
{
define
}
\
s
(
.
*
)
/
if
(
matcher
.
find
(
)
)
{
gradle
.
ext
.
mozconfig
.
source_repo
[
define
]
=
matcher
.
group
(
1
)
.
trim
(
)
}
}
}
if
(
gradle
.
ext
.
mozconfig
.
substs
.
MOZILLA_OFFICIAL
)
{
logger
.
info
(
"
mozconfig
.
gradle
>
Parsed
source
-
repo
.
h
:
{
gradle
.
ext
.
mozconfig
.
source_repo
}
"
)
;
}
}
