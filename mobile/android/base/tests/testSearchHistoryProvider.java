/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
package
org
.
mozilla
.
gecko
.
tests
;
import
java
.
util
.
concurrent
.
Callable
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
.
SearchHistory
;
import
org
.
mozilla
.
gecko
.
db
.
SearchHistoryProvider
;
import
android
.
content
.
ContentProvider
;
import
android
.
content
.
ContentValues
;
import
android
.
database
.
Cursor
;
public
class
testSearchHistoryProvider
extends
ContentProviderTest
{
/
/
Translations
of
"
United
Kingdom
"
in
several
different
languages
private
static
final
String
[
]
testStrings
=
{
"
An
R
ocht
Aontaithe
"
/
/
Irish
"
Angli
"
/
/
Albanian
"
Britanniarum
Regnum
"
/
/
Latin
"
Britio
"
/
/
Esperanto
"
B
y
k
Britanya
"
/
/
Turkish
"
Egyes
lt
Kir
lys
g
"
/
/
Hungarian
"
Erresuma
Batua
"
/
/
Basque
"
Inggris
Raya
"
/
/
Indonesian
"
Ir
-
Renju
Unit
"
/
/
Maltese
"
Iso
-
Britannia
"
/
/
Finnish
"
Jungtin
Karalyst
"
/
/
Lithuanian
"
Lielbrit
nija
"
/
/
Latvian
"
Regatul
Unit
"
/
/
Romanian
"
Regne
Unit
"
/
/
Catalan
Valencian
"
Regno
Unito
"
/
/
Italian
"
Royaume
-
Uni
"
/
/
French
"
Spojen
kr
lovstv
"
/
/
Czech
"
Spojen
kr
ovstvo
"
/
/
Slovak
"
Storbritannia
"
/
/
Norwegian
"
Storbritannien
"
/
/
Danish
"
Suurbritannia
"
/
/
Estonian
"
Ujedinjeno
Kraljevstvo
"
/
/
Bosnian
"
United
Alaeze
"
/
/
Igbo
"
United
Kingdom
"
/
/
English
"
Vereinigtes
K
nigreich
"
/
/
German
"
Verenigd
Koninkrijk
"
/
/
Dutch
"
Verenigde
Koninkryk
"
/
/
Afrikaans
"
V
ng
qu
c
Anh
"
/
/
Vietnamese
"
Way
m
Ini
"
/
/
Haitian
Haitian
Creole
"
Y
Deyrnas
Unedig
"
/
/
Welsh
"
Zdru
eno
kraljestvo
"
/
/
Slovene
"
Zjednoczone
Kr
lestwo
"
/
/
Polish
"
"
/
/
Greek
(
modern
)
"
"
/
/
Russian
"
"
/
/
Mongolian
"
"
/
/
Macedonian
"
"
/
/
Serbian
"
"
/
/
Armenian
"
"
/
/
Hebrew
(
modern
)
"
"
/
/
Yiddish
"
"
/
/
Arabic
"
"
/
/
Urdu
"
"
/
/
Persian
(
Farsi
)
"
"
/
/
Hindi
"
"
/
/
Nepali
"
"
/
/
Bengali
Bangla
"
"
/
/
Gujarati
"
"
/
/
Tamil
"
"
/
/
Thai
"
"
/
/
Lao
"
"
/
/
Georgian
"
"
/
/
Japanese
"
"
/
/
Chinese
}
;
private
static
final
String
DB_NAME
=
"
searchhistory
.
db
"
;
/
*
*
*
Boilerplate
alert
.
*
<
p
/
>
*
Make
sure
this
method
is
present
and
that
it
returns
a
new
*
instance
of
your
class
.
*
/
private
static
Callable
<
ContentProvider
>
sProviderFactory
=
new
Callable
<
ContentProvider
>
(
)
{
Override
public
ContentProvider
call
(
)
{
return
new
SearchHistoryProvider
(
)
;
}
}
;
Override
public
void
setUp
(
)
throws
Exception
{
super
.
setUp
(
sProviderFactory
BrowserContract
.
SEARCH_HISTORY_AUTHORITY
DB_NAME
)
;
mTests
.
add
(
new
TestInsert
(
)
)
;
mTests
.
add
(
new
TestUnicodeQuery
(
)
)
;
mTests
.
add
(
new
TestTimestamp
(
)
)
;
mTests
.
add
(
new
TestDelete
(
)
)
;
mTests
.
add
(
new
TestIncrement
(
)
)
;
}
public
void
testSearchHistory
(
)
throws
Exception
{
for
(
Runnable
test
:
mTests
)
{
String
testName
=
test
.
getClass
(
)
.
getSimpleName
(
)
;
setTestName
(
testName
)
;
mAsserter
.
dumpLog
(
"
testBrowserProvider
:
Database
empty
-
Starting
"
+
testName
+
"
.
"
)
;
/
/
Clear
the
db
mProvider
.
delete
(
SearchHistory
.
CONTENT_URI
null
null
)
;
test
.
run
(
)
;
}
}
/
*
*
*
Verify
that
we
can
insert
values
into
the
DB
including
unicode
.
*
/
private
class
TestInsert
extends
TestCase
{
Override
public
void
test
(
)
throws
Exception
{
ContentValues
cv
;
for
(
int
i
=
0
;
i
<
testStrings
.
length
;
i
+
+
)
{
cv
=
new
ContentValues
(
)
;
cv
.
put
(
SearchHistory
.
QUERY
testStrings
[
i
]
)
;
mProvider
.
insert
(
SearchHistory
.
CONTENT_URI
cv
)
;
}
Cursor
c
=
mProvider
.
query
(
SearchHistory
.
CONTENT_URI
null
null
null
null
)
;
mAsserter
.
is
(
c
.
getCount
(
)
testStrings
.
length
"
Should
have
one
row
for
each
insert
"
)
;
c
.
close
(
)
;
}
}
/
*
*
*
Verify
that
we
can
insert
values
into
the
DB
including
unicode
.
*
/
private
class
TestUnicodeQuery
extends
TestCase
{
Override
public
void
test
(
)
throws
Exception
{
ContentValues
cv
;
Cursor
c
=
null
;
String
selection
=
SearchHistory
.
QUERY
+
"
=
?
"
;
for
(
int
i
=
0
;
i
<
testStrings
.
length
;
i
+
+
)
{
cv
=
new
ContentValues
(
)
;
cv
.
put
(
SearchHistory
.
QUERY
testStrings
[
i
]
)
;
mProvider
.
insert
(
SearchHistory
.
CONTENT_URI
cv
)
;
c
=
mProvider
.
query
(
SearchHistory
.
CONTENT_URI
null
selection
new
String
[
]
{
testStrings
[
i
]
}
null
)
;
mAsserter
.
is
(
c
.
getCount
(
)
1
"
Should
have
one
row
for
insert
of
"
+
testStrings
[
i
]
)
;
}
if
(
c
!
=
null
)
{
c
.
close
(
)
;
}
}
}
/
*
*
*
Verify
that
timestamps
are
updated
on
insert
.
*
/
private
class
TestTimestamp
extends
TestCase
{
Override
public
void
test
(
)
throws
Exception
{
String
insertedTerm
=
"
Courtside
Seats
"
;
long
insertStart
;
long
insertFinish
;
long
t1Db
;
long
t2Db
;
ContentValues
cv
=
new
ContentValues
(
)
;
cv
.
put
(
SearchHistory
.
QUERY
insertedTerm
)
;
/
/
First
check
that
the
DB
has
a
value
that
is
close
to
the
/
/
system
time
.
insertStart
=
System
.
currentTimeMillis
(
)
;
mProvider
.
insert
(
SearchHistory
.
CONTENT_URI
cv
)
;
Cursor
c
=
mProvider
.
query
(
SearchHistory
.
CONTENT_URI
null
null
null
null
)
;
c
.
moveToFirst
(
)
;
t1Db
=
c
.
getLong
(
c
.
getColumnIndex
(
SearchHistory
.
DATE_LAST_VISITED
)
)
;
c
.
close
(
)
;
insertFinish
=
System
.
currentTimeMillis
(
)
;
mAsserter
.
ok
(
t1Db
>
=
insertStart
"
DATE_LAST_VISITED
"
"
Date
last
visited
should
be
set
on
insert
.
"
)
;
mAsserter
.
ok
(
t1Db
<
=
insertFinish
"
DATE_LAST_VISITED
"
"
Date
last
visited
should
be
set
on
insert
.
"
)
;
cv
=
new
ContentValues
(
)
;
cv
.
put
(
SearchHistory
.
QUERY
insertedTerm
)
;
insertStart
=
System
.
currentTimeMillis
(
)
;
mProvider
.
insert
(
SearchHistory
.
CONTENT_URI
cv
)
;
c
=
mProvider
.
query
(
SearchHistory
.
CONTENT_URI
null
null
null
null
)
;
c
.
moveToFirst
(
)
;
t2Db
=
c
.
getLong
(
c
.
getColumnIndex
(
SearchHistory
.
DATE_LAST_VISITED
)
)
;
c
.
close
(
)
;
insertFinish
=
System
.
currentTimeMillis
(
)
;
mAsserter
.
ok
(
t2Db
>
=
insertStart
"
DATE_LAST_VISITED
"
"
Date
last
visited
should
be
set
on
insert
.
"
)
;
mAsserter
.
ok
(
t2Db
<
=
insertFinish
"
DATE_LAST_VISITED
"
"
Date
last
visited
should
be
set
on
insert
.
"
)
;
mAsserter
.
ok
(
t2Db
>
t1Db
"
DATE_LAST_VISITED
"
"
Date
last
visited
should
be
updated
on
key
increment
.
"
)
;
}
}
/
*
*
*
Verify
that
sending
a
delete
command
empties
the
database
.
*
/
private
class
TestDelete
extends
TestCase
{
Override
public
void
test
(
)
throws
Exception
{
String
insertedTerm
=
"
Courtside
Seats
"
;
ContentValues
cv
=
new
ContentValues
(
)
;
cv
.
put
(
SearchHistory
.
QUERY
insertedTerm
)
;
mProvider
.
insert
(
SearchHistory
.
CONTENT_URI
cv
)
;
Cursor
c
=
mProvider
.
query
(
SearchHistory
.
CONTENT_URI
null
null
null
null
)
;
mAsserter
.
is
(
c
.
getCount
(
)
1
"
Should
have
one
value
"
)
;
mProvider
.
delete
(
SearchHistory
.
CONTENT_URI
null
null
)
;
c
.
close
(
)
;
c
=
mProvider
.
query
(
SearchHistory
.
CONTENT_URI
null
null
null
null
)
;
mAsserter
.
is
(
c
.
getCount
(
)
0
"
Should
be
empty
"
)
;
mProvider
.
insert
(
SearchHistory
.
CONTENT_URI
cv
)
;
c
.
close
(
)
;
c
=
mProvider
.
query
(
SearchHistory
.
CONTENT_URI
null
null
null
null
)
;
mAsserter
.
is
(
c
.
getCount
(
)
1
"
Should
have
one
value
"
)
;
c
.
close
(
)
;
}
}
/
*
*
*
Ensure
that
we
only
increment
when
the
case
matches
.
*
/
private
class
TestIncrement
extends
TestCase
{
Override
public
void
test
(
)
throws
Exception
{
ContentValues
cv
=
new
ContentValues
(
)
;
cv
.
put
(
SearchHistory
.
QUERY
"
omaha
"
)
;
mProvider
.
insert
(
SearchHistory
.
CONTENT_URI
cv
)
;
cv
=
new
ContentValues
(
)
;
cv
.
put
(
SearchHistory
.
QUERY
"
omaha
"
)
;
mProvider
.
insert
(
SearchHistory
.
CONTENT_URI
cv
)
;
Cursor
c
=
mProvider
.
query
(
SearchHistory
.
CONTENT_URI
null
null
null
null
)
;
c
.
moveToFirst
(
)
;
mAsserter
.
is
(
c
.
getCount
(
)
1
"
Should
have
one
result
"
)
;
mAsserter
.
is
(
c
.
getInt
(
c
.
getColumnIndex
(
SearchHistory
.
VISITS
)
)
2
"
Counter
should
be
2
"
)
;
c
.
close
(
)
;
cv
=
new
ContentValues
(
)
;
cv
.
put
(
SearchHistory
.
QUERY
"
Omaha
"
)
;
mProvider
.
insert
(
SearchHistory
.
CONTENT_URI
cv
)
;
c
=
mProvider
.
query
(
SearchHistory
.
CONTENT_URI
null
null
null
null
)
;
mAsserter
.
is
(
c
.
getCount
(
)
2
"
Should
have
two
results
"
)
;
c
.
close
(
)
;
}
}
}
