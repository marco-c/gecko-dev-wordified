/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
2
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
mozilla_a11y_TextLeafRange_h__
#
define
mozilla_a11y_TextLeafRange_h__
#
include
<
stdint
.
h
>
namespace
mozilla
:
:
a11y
{
class
Accessible
;
/
*
*
*
Represents
a
point
within
accessible
text
.
*
This
is
stored
as
a
leaf
Accessible
and
an
offset
into
that
Accessible
.
*
For
an
empty
Accessible
the
offset
will
always
be
0
.
*
This
will
eventually
replace
TextPoint
.
Unlike
TextPoint
this
does
not
*
use
HyperTextAccessible
offsets
.
*
/
class
TextLeafPoint
final
{
public
:
TextLeafPoint
(
Accessible
*
aAcc
int32_t
aOffset
)
;
/
*
*
*
Constructs
an
invalid
TextPoint
(
mAcc
is
null
)
.
*
A
TextLeafPoint
in
this
state
will
evaluate
to
false
.
*
mAcc
can
be
set
later
.
Alternatively
this
can
be
used
to
indicate
an
error
*
(
e
.
g
.
if
a
requested
point
couldn
'
t
be
found
)
.
*
/
TextLeafPoint
(
)
:
mAcc
(
nullptr
)
mOffset
(
0
)
{
}
Accessible
*
mAcc
;
int32_t
mOffset
;
bool
operator
=
=
(
const
TextLeafPoint
&
aPoint
)
const
{
return
mAcc
=
=
aPoint
.
mAcc
&
&
mOffset
=
=
aPoint
.
mOffset
;
}
bool
operator
!
=
(
const
TextLeafPoint
&
aPoint
)
const
{
return
!
(
*
this
=
=
aPoint
)
;
}
bool
operator
<
(
const
TextLeafPoint
&
aPoint
)
const
;
/
*
*
*
A
valid
TextLeafPoint
evaluates
to
true
.
An
invalid
TextLeafPoint
*
evaluates
to
false
.
*
/
explicit
operator
bool
(
)
const
{
return
!
!
mAcc
;
}
}
;
/
*
*
*
Represents
a
range
of
accessible
text
.
*
This
will
eventually
replace
TextRange
.
*
/
class
TextLeafRange
final
{
public
:
TextLeafRange
(
const
TextLeafPoint
&
aStart
const
TextLeafPoint
&
aEnd
)
:
mStart
(
aStart
)
mEnd
(
aEnd
)
{
}
explicit
TextLeafRange
(
const
TextLeafPoint
&
aStart
)
:
mStart
(
aStart
)
mEnd
(
aStart
)
{
}
TextLeafPoint
Start
(
)
{
return
mStart
;
}
void
SetStart
(
const
TextLeafPoint
&
aStart
)
{
mStart
=
aStart
;
}
TextLeafPoint
End
(
)
{
return
mEnd
;
}
void
SetEnd
(
const
TextLeafPoint
&
aEnd
)
{
mEnd
=
aEnd
;
}
private
:
TextLeafPoint
mStart
;
TextLeafPoint
mEnd
;
}
;
}
/
/
namespace
mozilla
:
:
a11y
#
endif
