/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
2
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
MsaaAccessible
.
h
"
#
include
"
sdnAccessible
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
a11y
;
MsaaIdGenerator
MsaaAccessible
:
:
sIDGen
;
MsaaAccessible
:
:
MsaaAccessible
(
)
:
mID
(
kNoID
)
{
}
MsaaAccessible
:
:
~
MsaaAccessible
(
)
{
if
(
mID
!
=
kNoID
)
{
sIDGen
.
ReleaseID
(
WrapNotNull
(
this
)
)
;
}
}
void
MsaaAccessible
:
:
SetID
(
uint32_t
aID
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
&
&
static_cast
<
AccessibleWrap
*
>
(
this
)
-
>
IsProxy
(
)
)
;
mID
=
aID
;
}
int32_t
MsaaAccessible
:
:
GetChildIDFor
(
LocalAccessible
*
aAccessible
)
{
/
/
A
child
ID
of
the
window
is
required
when
we
use
NotifyWinEvent
/
/
so
that
the
3rd
party
application
can
call
back
and
get
the
IAccessible
/
/
the
event
occurred
on
.
if
(
!
aAccessible
)
{
return
0
;
}
/
/
Chrome
should
use
mID
which
has
been
generated
by
the
content
process
.
if
(
aAccessible
-
>
IsProxy
(
)
)
{
const
uint32_t
id
=
static_cast
<
AccessibleWrap
*
>
(
aAccessible
)
-
>
mID
;
MOZ_ASSERT
(
id
!
=
kNoID
)
;
return
id
;
}
if
(
!
aAccessible
-
>
Document
(
)
)
return
0
;
uint32_t
*
id
=
&
static_cast
<
AccessibleWrap
*
>
(
aAccessible
)
-
>
mID
;
if
(
*
id
!
=
kNoID
)
return
*
id
;
*
id
=
sIDGen
.
GetID
(
)
;
MOZ_ASSERT
(
!
aAccessible
-
>
IsProxy
(
)
)
;
DocAccessibleWrap
*
doc
=
static_cast
<
DocAccessibleWrap
*
>
(
aAccessible
-
>
Document
(
)
)
;
doc
-
>
AddID
(
*
id
static_cast
<
AccessibleWrap
*
>
(
aAccessible
)
)
;
return
*
id
;
}
/
*
static
*
/
uint32_t
MsaaAccessible
:
:
GetContentProcessIdFor
(
dom
:
:
ContentParentId
aIPCContentId
)
{
return
sIDGen
.
GetContentProcessIDFor
(
aIPCContentId
)
;
}
/
*
static
*
/
void
MsaaAccessible
:
:
ReleaseContentProcessIdFor
(
dom
:
:
ContentParentId
aIPCContentId
)
{
sIDGen
.
ReleaseContentProcessIDFor
(
aIPCContentId
)
;
}
/
*
static
*
/
void
MsaaAccessible
:
:
AssignChildIDTo
(
NotNull
<
sdnAccessible
*
>
aSdnAcc
)
{
aSdnAcc
-
>
SetUniqueID
(
sIDGen
.
GetID
(
)
)
;
}
/
*
static
*
/
void
MsaaAccessible
:
:
ReleaseChildID
(
NotNull
<
sdnAccessible
*
>
aSdnAcc
)
{
sIDGen
.
ReleaseID
(
aSdnAcc
)
;
}
