/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
2
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
mozilla_a11y_BaseAccessibles_h__
#
define
mozilla_a11y_BaseAccessibles_h__
#
include
"
AccessibleWrap
.
h
"
#
include
"
HyperTextAccessibleWrap
.
h
"
class
nsIContent
;
/
*
*
*
This
file
contains
a
number
of
classes
that
are
used
as
base
*
classes
for
the
different
accessibility
implementations
of
*
the
HTML
and
XUL
widget
sets
.
-
-
jgaunt
*
/
namespace
mozilla
{
namespace
a11y
{
/
*
*
*
Leaf
version
of
DOM
Accessible
-
-
has
no
children
*
/
class
LeafAccessible
:
public
AccessibleWrap
{
public
:
LeafAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
/
/
nsISupports
NS_DECL_ISUPPORTS_INHERITED
/
/
Accessible
virtual
Accessible
*
ChildAtPoint
(
int32_t
aX
int32_t
aY
EWhichChildAtPoint
aWhichChild
)
MOZ_OVERRIDE
;
virtual
bool
InsertChildAt
(
uint32_t
aIndex
Accessible
*
aChild
)
MOZ_OVERRIDE
MOZ_FINAL
;
virtual
bool
RemoveChild
(
Accessible
*
aChild
)
MOZ_OVERRIDE
MOZ_FINAL
;
protected
:
virtual
~
LeafAccessible
(
)
{
}
/
/
Accessible
virtual
void
CacheChildren
(
)
MOZ_OVERRIDE
;
}
;
/
*
*
*
Used
for
text
or
image
accessible
nodes
contained
by
link
accessibles
or
*
accessibles
for
nodes
with
registered
click
event
handler
.
It
knows
how
to
*
report
the
state
of
the
host
link
(
traveled
or
not
)
and
can
activate
(
click
)
*
the
host
accessible
programmatically
.
*
/
class
LinkableAccessible
:
public
AccessibleWrap
{
public
:
enum
{
eAction_Jump
=
0
}
;
LinkableAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
;
NS_DECL_ISUPPORTS_INHERITED
/
/
Accessible
virtual
void
Shutdown
(
)
MOZ_OVERRIDE
;
virtual
void
Value
(
nsString
&
aValue
)
MOZ_OVERRIDE
;
virtual
uint64_t
NativeLinkState
(
)
const
MOZ_OVERRIDE
;
virtual
void
TakeFocus
(
)
MOZ_OVERRIDE
;
/
/
ActionAccessible
virtual
uint8_t
ActionCount
(
)
MOZ_OVERRIDE
;
virtual
void
ActionNameAt
(
uint8_t
aIndex
nsAString
&
aName
)
MOZ_OVERRIDE
;
virtual
bool
DoAction
(
uint8_t
index
)
MOZ_OVERRIDE
;
virtual
KeyBinding
AccessKey
(
)
const
MOZ_OVERRIDE
;
/
/
HyperLinkAccessible
virtual
already_AddRefed
<
nsIURI
>
AnchorURIAt
(
uint32_t
aAnchorIndex
)
MOZ_OVERRIDE
;
protected
:
virtual
~
LinkableAccessible
(
)
{
}
/
/
Accessible
virtual
void
BindToParent
(
Accessible
*
aParent
uint32_t
aIndexInParent
)
MOZ_OVERRIDE
;
virtual
void
UnbindFromParent
(
)
MOZ_OVERRIDE
;
/
*
*
*
Parent
accessible
that
provides
an
action
for
this
linkable
accessible
.
*
/
Accessible
*
mActionAcc
;
bool
mIsLink
;
bool
mIsOnclick
;
}
;
/
*
*
*
A
simple
accessible
that
gets
its
enumerated
role
.
*
/
template
<
a11y
:
:
role
R
>
class
EnumRoleAccessible
:
public
AccessibleWrap
{
public
:
EnumRoleAccessible
(
nsIContent
*
aContent
DocAccessible
*
aDoc
)
:
AccessibleWrap
(
aContent
aDoc
)
{
}
NS_IMETHOD
QueryInterface
(
REFNSIID
aIID
void
*
*
aPtr
)
MOZ_OVERRIDE
{
return
Accessible
:
:
QueryInterface
(
aIID
aPtr
)
;
}
/
/
Accessible
virtual
a11y
:
:
role
NativeRole
(
)
MOZ_OVERRIDE
{
return
R
;
}
protected
:
virtual
~
EnumRoleAccessible
(
)
{
}
}
;
/
*
*
*
A
wrapper
accessible
around
native
accessible
to
connect
it
with
*
crossplatform
accessible
tree
.
*
/
class
DummyAccessible
:
public
AccessibleWrap
{
public
:
explicit
DummyAccessible
(
DocAccessible
*
aDocument
=
nullptr
)
:
AccessibleWrap
(
nullptr
aDocument
)
{
}
virtual
uint64_t
NativeState
(
)
MOZ_OVERRIDE
MOZ_FINAL
;
virtual
uint64_t
NativeInteractiveState
(
)
const
MOZ_OVERRIDE
MOZ_FINAL
;
virtual
uint64_t
NativeLinkState
(
)
const
MOZ_OVERRIDE
MOZ_FINAL
;
virtual
bool
NativelyUnavailable
(
)
const
MOZ_OVERRIDE
MOZ_FINAL
;
virtual
void
ApplyARIAState
(
uint64_t
*
aState
)
const
MOZ_OVERRIDE
MOZ_FINAL
;
protected
:
virtual
~
DummyAccessible
(
)
{
}
}
;
}
/
/
namespace
a11y
}
/
/
namespace
mozilla
#
endif
