/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
vim
:
sw
=
2
ts
=
8
et
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
mozilla_ContentCache_h
#
define
mozilla_ContentCache_h
#
include
<
stdint
.
h
>
#
include
"
nsString
.
h
"
namespace
mozilla
{
/
*
*
*
ContentCache
stores
various
information
of
the
child
content
.
This
hides
*
raw
information
but
you
can
access
more
useful
information
with
a
lot
of
*
methods
.
*
/
class
ContentCache
final
{
public
:
void
Clear
(
)
;
void
SetText
(
const
nsAString
&
aText
)
;
const
nsString
&
Text
(
)
const
{
return
mText
;
}
uint32_t
TextLength
(
)
const
{
return
mText
.
Length
(
)
;
}
void
SetSelection
(
uint32_t
aCaretOffset
)
{
SetSelection
(
aCaretOffset
aCaretOffset
)
;
}
void
SetSelection
(
uint32_t
aAnchorOffset
uint32_t
aFocusOffset
)
;
bool
SelectionCollapsed
(
)
const
{
return
mSelection
.
Collapsed
(
)
;
}
bool
SelectionReversed
(
)
const
{
return
mSelection
.
Reversed
(
)
;
}
bool
SelectionEndIsGraterThanTextLength
(
)
const
{
return
SelectionEnd
(
)
>
TextLength
(
)
;
}
uint32_t
SelectionAnchor
(
)
const
{
return
mSelection
.
mAnchor
;
}
uint32_t
SelectionFocus
(
)
const
{
return
mSelection
.
mFocus
;
}
uint32_t
SelectionStart
(
)
const
{
return
mSelection
.
StartOffset
(
)
;
}
uint32_t
SelectionEnd
(
)
const
{
return
mSelection
.
EndOffset
(
)
;
}
uint32_t
SelectionLength
(
)
const
{
return
mSelection
.
Length
(
)
;
}
private
:
/
/
Whole
text
in
the
target
nsString
mText
;
struct
Selection
final
{
/
/
Following
values
are
offset
in
"
flat
text
"
.
uint32_t
mAnchor
;
uint32_t
mFocus
;
Selection
(
)
:
mAnchor
(
0
)
mFocus
(
0
)
{
}
bool
Collapsed
(
)
const
{
return
mFocus
=
=
mAnchor
;
}
bool
Reversed
(
)
const
{
return
mFocus
<
mAnchor
;
}
uint32_t
StartOffset
(
)
const
{
return
Reversed
(
)
?
mFocus
:
mAnchor
;
}
uint32_t
EndOffset
(
)
const
{
return
Reversed
(
)
?
mAnchor
:
mFocus
;
}
uint32_t
Length
(
)
const
{
return
Reversed
(
)
?
mAnchor
-
mFocus
:
mFocus
-
mAnchor
;
}
}
mSelection
;
}
;
}
/
/
namespace
mozilla
#
endif
/
/
mozilla_ContentCache_h
