#
!
/
bin
/
bash
set
-
e
vercheck
=
python
-
c
'
import
sys
;
print
(
sys
.
version_info
[
0
:
3
]
>
=
(
2
7
9
)
)
'
if
[
"
x
{
vercheck
}
"
!
=
"
xTrue
"
]
;
then
echo
"
Python
version
too
old
.
Test
environment
requires
2
.
7
.
9
+
"
exit
1
fi
ROOT
=
pwd
VENV
=
{
ROOT
}
/
venv
if
[
!
-
d
{
VENV
}
]
;
then
#
There
is
a
bug
in
pycrypto
where
it
tries
to
invoke
configure
instead
#
of
a
path
qualified
configure
.
So
if
there
is
a
"
configure
"
on
PATH
#
it
will
invoke
the
wrong
one
.
configure
=
which
configure
&
>
/
dev
/
null
|
|
true
if
[
"
x
"
!
=
"
x
{
configure
}
"
]
;
then
echo
"
configure
in
PATH
;
pycrypto
install
will
fail
!
"
echo
"
Remove
the
path
containing
{
configure
}
from
PATH
"
exit
1
fi
mkdir
{
VENV
}
#
Securely
download
virtualenv
setuptools
and
pip
.
{
ROOT
}
/
scripts
/
download
-
verify
https
:
/
/
s3
-
us
-
west
-
2
.
amazonaws
.
com
/
moz
-
packages
/
virtualenv
-
14
.
0
.
6
.
tar
.
gz
\
{
VENV
}
/
virtualenv
-
14
.
0
.
6
.
tar
.
gz
\
1ffb6a02d8999e9c97ad8f04b1d2ba44421dfb8f8a98b54aea5c6fdfb53bc526
&
&
\
cd
{
VENV
}
&
&
tar
-
xzf
virtualenv
-
14
.
0
.
6
.
tar
.
gz
&
&
\
rm
-
f
{
VENV
}
/
virtualenv
-
14
.
0
.
6
/
virtualenv_support
/
setuptools
-
20
.
0
-
py2
.
py3
-
none
-
any
.
whl
\
{
VENV
}
/
virtualenv
-
14
.
0
.
6
/
virtualenv_support
/
pip
-
8
.
0
.
2
-
py2
.
py3
-
none
-
any
.
whl
{
ROOT
}
/
scripts
/
download
-
verify
https
:
/
/
s3
-
us
-
west
-
2
.
amazonaws
.
com
/
moz
-
packages
/
pip
-
8
.
0
.
3
-
py2
.
py3
-
none
-
any
.
whl
\
{
VENV
}
/
virtualenv
-
14
.
0
.
6
/
virtualenv_support
/
pip
-
8
.
0
.
3
-
py2
.
py3
-
none
-
any
.
whl
\
b0335bc837f9edb5aad03bd43d0973b084a1cbe616f8188dc23ba13234dbd552
{
ROOT
}
/
scripts
/
download
-
verify
https
:
/
/
s3
-
us
-
west
-
2
.
amazonaws
.
com
/
moz
-
packages
/
setuptools
-
20
.
1
.
1
-
py2
.
py3
-
none
-
any
.
whl
\
{
VENV
}
/
virtualenv
-
14
.
0
.
6
/
virtualenv_support
/
setuptools
-
20
.
1
.
1
-
py2
.
py3
-
none
-
any
.
whl
\
dfdbc643f8900d9e617e48a42ae389aa18fd6fbd2846f24f2a4678b8d9412acb
{
VENV
}
/
virtualenv
-
14
.
0
.
6
/
virtualenv
.
py
-
-
no
-
download
{
VENV
}
cd
{
ROOT
}
fi
source
{
VENV
}
/
bin
/
activate
cd
pylib
/
requests
python
setup
.
py
develop
cd
.
.
/
.
.
pip
install
-
-
upgrade
-
-
require
-
hashes
-
r
test
-
requirements
.
txt
cd
pylib
/
Bugsy
python
setup
.
py
develop
cd
.
.
/
.
.
cd
pylib
/
mozansible
python
setup
.
py
develop
cd
.
.
/
.
.
cd
pylib
/
mozhginfo
python
setup
.
py
develop
cd
.
.
/
.
.
cd
pylib
/
mozautomation
python
setup
.
py
develop
cd
.
.
/
.
.
cd
pylib
/
mozreview
python
setup
.
py
develop
cd
.
.
/
.
.
cd
pylib
/
mozreviewbots
python
setup
.
py
develop
cd
.
.
/
.
.
cd
pylib
/
rbbz
python
setup
.
py
develop
cd
.
.
/
.
.
cd
pylib
/
vcsreplicator
python
setup
.
py
develop
cd
.
.
/
.
.
cd
hghooks
python
setup
.
py
develop
cd
.
.
cd
testing
python
setup
.
py
develop
cd
.
.
#
Collect
code
coverage
from
all
Python
processes
if
environment
variable
#
is
set
.
cat
>
venv
/
bin
/
sitecustomize
.
py
<
<
EOF
import
os
if
os
.
environ
.
get
(
'
CODE_COVERAGE
'
False
)
:
import
uuid
import
coverage
covpath
=
os
.
path
.
join
(
os
.
environ
[
'
COVERAGE_DIR
'
]
'
coverage
.
%
s
'
%
uuid
.
uuid1
(
)
)
cov
=
coverage
.
coverage
(
data_file
=
covpath
auto_data
=
True
)
cov
.
_warn_no_data
=
False
cov
.
_warn_unimported_source
=
False
cov
.
start
(
)
EOF
#
Ensure
system
settings
don
'
t
sneak
in
and
change
behavior
.
export
HGRCPATH
=
/
dev
/
null
#
Install
various
Mercurial
versions
for
multi
-
version
testing
.
if
[
!
-
d
venv
/
hg
]
;
then
echo
"
Cloning
Mercurial
repository
"
hg
clone
https
:
/
/
selenic
.
com
/
repo
/
hg
venv
/
hg
fi
hg
-
R
venv
/
hg
pull
mercurials
=
pwd
/
venv
/
mercurials
for
old
in
3
.
0
3
.
0
.
1
3
.
0
.
2
3
.
1
3
.
1
.
1
3
.
1
.
2
3
.
2
3
.
2
.
1
3
.
2
.
2
3
.
2
.
3
3
.
2
.
4
3
.
3
3
.
3
.
2
3
.
3
.
3
3
.
4
3
.
4
.
1
3
.
5
3
.
5
.
1
3
.
6
3
.
7
.
1
;
do
rm
-
rf
mercurials
/
old
done
for
v
in
3
.
4
.
2
3
.
5
.
2
3
.
6
.
2
3
.
7
.
2
3
.
8
.
1
;
do
destdir
=
mercurials
/
v
if
[
!
-
d
destdir
]
;
then
cd
venv
/
hg
hg
up
v
#
We
don
'
t
care
about
support
files
which
only
slow
us
down
so
#
install
-
bin
is
the
only
target
we
need
.
make
install
-
bin
PREFIX
=
destdir
hg
-
-
config
extensions
.
purge
=
purge
-
-
all
cd
.
.
/
.
.
fi
done
#
Install
the
bleeding
edge
of
Mercurial
so
we
find
regressions
early
.
rm
-
rf
mercurials
/
cd
venv
/
hg
hg
up
make
install
-
bin
PREFIX
=
mercurials
/
hg
-
-
config
extensions
.
purge
=
purge
-
-
all
cd
.
.
/
.
.
unset
HGRCPATH
echo
finished
installing
Mercurials
if
[
!
-
d
venv
/
git
-
cinnabar
]
;
then
echo
"
Cloning
git
-
cinnabar
"
git
clone
-
-
branch
release
https
:
/
/
github
.
com
/
glandium
/
git
-
cinnabar
.
git
venv
/
git
-
cinnabar
fi
git
-
C
venv
/
git
-
cinnabar
pull
echo
"
"
echo
"
Building
Docker
images
.
"
echo
"
This
could
take
a
while
and
may
consume
a
lot
of
internet
bandwidth
.
"
echo
"
If
you
don
'
t
want
Docker
images
it
is
safe
to
hit
CTRL
+
c
to
abort
this
.
"
.
/
d0cker
build
-
all
|
|
{
echo
"
You
will
not
be
able
to
run
tests
that
require
Docker
.
"
;
echo
"
Please
see
https
:
/
/
docs
.
docker
.
com
/
installation
/
for
how
to
install
Docker
.
"
;
echo
"
When
Docker
is
installed
re
-
run
this
script
"
;
exit
1
}
echo
finished
creating
test
environment
