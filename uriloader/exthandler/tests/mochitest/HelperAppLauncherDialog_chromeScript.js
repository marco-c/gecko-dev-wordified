const
{
ComponentUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ComponentUtils
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
let
gMIMEService
=
Cc
[
"
mozilla
.
org
/
mime
;
1
"
]
.
getService
(
Ci
.
nsIMIMEService
)
;
let
gHandlerService
=
Cc
[
"
mozilla
.
org
/
uriloader
/
handler
-
service
;
1
"
]
.
getService
(
Ci
.
nsIHandlerService
)
;
const
HELPERAPP_DIALOG_CONTRACT
=
"
mozilla
.
org
/
helperapplauncherdialog
;
1
"
;
const
HELPERAPP_DIALOG_CID
=
Components
.
ID
(
Cc
[
HELPERAPP_DIALOG_CONTRACT
]
.
number
)
;
let
tmpDir
=
Services
.
dirsvc
.
get
(
"
TmpD
"
Ci
.
nsIFile
)
;
tmpDir
.
append
(
"
testsavedir
"
+
Math
.
floor
(
Math
.
random
(
)
*
2
*
*
32
)
)
;
/
/
Create
this
dir
if
it
doesn
'
t
exist
(
ignores
existing
dirs
)
try
{
tmpDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o777
true
)
;
}
catch
(
ex
)
{
if
(
ex
.
result
!
=
Cr
.
NS_ERROR_FILE_ALREADY_EXISTS
)
{
throw
ex
;
}
}
Services
.
prefs
.
setIntPref
(
"
browser
.
download
.
folderList
"
2
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
download
.
dir
"
tmpDir
.
path
)
;
const
FAKE_CID
=
Services
.
uuid
.
generateUUID
(
)
;
/
*
eslint
-
env
mozilla
/
frame
-
script
*
/
function
HelperAppLauncherDialog
(
)
{
}
HelperAppLauncherDialog
.
prototype
=
{
show
(
aLauncher
aWindowContext
aReason
)
{
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
download
.
improvements_to_download_panel
"
)
)
{
sendAsyncMessage
(
"
wrongAPICall
"
"
show
"
)
;
}
else
{
sendAsyncMessage
(
"
suggestedFileName
"
aLauncher
.
suggestedFileName
)
;
}
}
promptForSaveToFileAsync
(
appLauncher
parent
filename
extension
forceSave
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
download
.
improvements_to_download_panel
"
)
)
{
sendAsyncMessage
(
"
wrongAPICall
"
"
promptForSaveToFileAsync
"
)
;
}
else
{
sendAsyncMessage
(
"
suggestedFileName
"
filename
)
;
}
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIHelperAppLauncherDialog
"
]
)
}
;
var
registrar
=
Components
.
manager
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
registerFactory
(
FAKE_CID
"
"
HELPERAPP_DIALOG_CONTRACT
ComponentUtils
.
_getFactory
(
HelperAppLauncherDialog
)
)
;
addMessageListener
(
"
unregister
"
function
(
)
{
registrar
.
registerFactory
(
HELPERAPP_DIALOG_CID
"
"
HELPERAPP_DIALOG_CONTRACT
null
)
;
tmpDir
.
remove
(
true
)
;
sendAsyncMessage
(
"
unregistered
"
)
;
}
)
;
