#
2016
and
later
:
Unicode
Inc
.
and
others
.
#
License
&
terms
of
use
:
http
:
/
/
www
.
unicode
.
org
/
copyright
.
html
#
Generated
using
tools
/
cldr
/
cldr
-
to
-
icu
/
#
#
File
:
Latn_Kana
.
txt
#
Generated
from
CLDR
#
#
note
:
a
global
filter
is
more
efficient
but
MUST
include
all
source
chars
#
:
:
[
\
u0000
-
\
u007E
\
u3099
-
-
-
[
:
Latin
:
]
[
:
Katakana
:
]
[
:
Nonspacing_Mark
:
]
]
;
#
MINIMAL
FILTER
GENERATED
FOR
:
Latin
-
Katakana
#
#
#
WARNING
-
-
must
add
width
filter
both
here
and
below
!
!
!
#
#
#
:
:
[
[
-
\
u1160
-
-
-
-
\
u3000
-
-
\
u3099
-
\
u309A
-
-
-
-
-
]
[
'
.
A
-
Za
-
z
~
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
u0304
-
-
-
-
-
]
]
;
:
:
[
:
Latin
:
]
fullwidth
-
halfwidth
(
)
;
:
:
NFD
(
NFC
)
;
:
:
Lower
(
)
;
#
whenever
transliterating
from
cased
to
uncased
script
include
this
#
:
:
NFD
(
)
;
#
this
would
catch
the
odd
cases
where
a
lowercase
is
not
in
NFD
but
none
are
important
for
Japanese
#
Uses
modified
Hepburn
.
Small
changes
to
make
unambiguous
.
#
|
Kunrei
-
shiki
:
Hepburn
/
MHepburn
#
|
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
#
|
si
:
shi
#
|
si
~
ya
:
sha
#
|
si
~
yu
:
shu
#
|
si
~
yo
:
sho
#
|
zi
:
ji
#
|
zi
~
ya
:
ja
#
|
zi
~
yu
:
ju
#
|
zi
~
yo
:
jo
#
|
ti
:
chi
#
|
ti
~
ya
:
cha
#
|
ti
~
yu
:
chu
#
|
ti
~
yu
:
cho
#
|
tu
:
tsu
#
|
di
:
ji
/
dji
#
|
du
:
zu
/
dzu
#
|
hu
:
fu
#
|
For
foreign
words
:
#
|
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
#
|
se
~
i
si
#
|
si
~
e
she
#
|
#
|
ze
~
i
zi
#
|
zi
~
e
je
#
|
#
|
te
~
i
ti
#
|
ti
~
e
che
#
|
te
~
u
tu
#
|
#
|
de
~
i
di
#
|
de
~
u
du
#
|
de
~
i
di
#
|
#
|
he
~
u
:
hu
#
|
hu
~
a
fa
#
|
hu
~
i
fi
#
|
hu
~
e
he
#
|
hu
~
o
ho
#
Most
small
forms
are
generated
but
if
necessary
#
explicit
small
forms
are
given
with
~
a
~
ya
etc
.
#
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
#
Variables
vowel
=
[
aeiou
]
;
consonant
=
[
bcdfghjklmnpqrstvwxyz
]
;
macron
=
\
u0304
;
#
Variables
used
for
doubled
-
consonants
with
tsu
kana
=
[
-
]
;
voice
=
[
\
u3099
]
;
semivoice
=
[
\
u309A
]
;
k_start
=
[
]
;
s_start
=
[
]
;
j_start
=
[
]
voice
;
t_start
=
[
]
;
n_start
=
[
]
;
h_start
=
[
]
;
f_start
=
[
]
;
m_start
=
[
]
;
y_start
=
[
]
;
r_start
=
[
]
;
w_start
=
[
]
;
v_start
=
[
]
\
u3099
;
voweled_basekana
=
[
-
-
-
]
;
#
if
is
followed
by
n_quoter
then
it
needs
an
#
apostrophe
after
its
romaji
form
to
disambiguate
it
.
#
e
.
g
.
!
=
so
represent
as
"
n
'
a
"
not
"
na
"
.
n_quoter
=
[
]
;
small_y
=
[
]
;
iteration
=
;
#
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
#
katakana
rules
#
Punctuation
'
.
'
;
'
'
;
#
'
'
}
[
a
-
z
]
;
#
delete
spaces
before
latin
#
'
'
[
^
'
'
-
]
{
}
[
'
-
]
;
#
insert
spaces
before
hiragana
#
Iteration
Mark
#
Copy
previous
letter
marks
#
TODO
#
|
1
1
(
kana
[
[
:
M
:
]
voice
semivoice
]
?
)
iteration
#
Specials
for
katakana
-
-
not
shared
with
hiragana
va
\
u3099
;
vi
\
u3099
;
ve
\
u3099
;
vo
\
u3099
;
'
~
ka
'
;
'
~
ke
'
;
#
~
~
~
begin
shared
rules
~
~
~
#
special
ya
'
~
'
;
yi
'
~
'
;
yu
'
~
'
;
ye
'
~
'
;
yo
'
~
'
;
#
normal
a
;
b
|
'
~
'
\
u3099
}
small_y
;
by
}
vowel
\
u3099
|
'
~
y
'
;
ba
\
u3099
;
bi
\
u3099
;
bu
\
u3099
;
be
\
u3099
;
bo
\
u3099
;
c
}
i
|
s
;
c
}
e
|
s
;
da
\
u3099
;
di
\
u3099
;
du
\
u3099
;
de
\
u3099
;
do
\
u3099
;
dzu
\
u3099
;
dja
\
u3099
;
dji
'
~
i
'
\
u3099
;
#
liu
dju
\
u3099
;
dje
\
u3099
;
djo
\
u3099
;
dji
\
u3099
;
dj
}
vowel
\
u3099
|
'
~
y
'
;
#
TODO
:
QUESTION
:
use
instead
of
dj
dz
cha
;
chi
'
~
i
'
;
#
liu
chu
;
che
;
cho
;
chi
;
ch
}
vowel
|
'
~
y
'
;
e
;
g
|
'
~
'
\
u3099
}
small_y
;
gy
}
vowel
\
u3099
|
'
~
y
'
;
ga
\
u3099
;
gi
\
u3099
;
gu
\
u3099
;
ge
\
u3099
;
go
\
u3099
;
i
;
#
j
}
vowel
\
u3099
|
'
~
y
'
;
ja
\
u3099
;
ji
'
~
i
'
\
u3099
;
#
liu
ju
\
u3099
;
je
\
u3099
;
jo
\
u3099
;
ji
\
u3099
;
k
|
'
~
'
}
small_y
;
ky
}
vowel
|
'
~
y
'
;
ka
;
ki
;
ku
;
ke
;
ko
;
m
|
'
~
'
}
small_y
;
my
}
vowel
|
'
~
y
'
;
ma
;
mi
;
mu
;
me
;
mo
;
m
}
[
pbfv
]
;
n
|
'
~
'
}
small_y
;
ny
}
vowel
|
'
~
y
'
;
na
;
ni
;
nu
;
ne
;
no
;
o
;
p
|
'
~
'
\
u309A
}
small_y
;
py
}
vowel
\
u309A
|
'
~
y
'
;
pa
\
u309A
;
pi
\
u309A
;
pu
\
u309A
;
pe
\
u309A
;
po
\
u309A
;
h
|
'
~
'
}
small_y
;
hy
}
vowel
|
'
~
y
'
;
ha
;
hi
;
hu
;
he
;
ho
;
#
f
|
'
~
'
}
small_y
;
#
f
}
vowel
|
'
~
'
;
fa
;
fi
;
fe
;
fo
;
fu
;
r
|
'
~
'
}
small_y
;
ry
}
vowel
|
'
~
y
'
;
ra
;
ri
;
ru
;
re
;
ro
;
za
\
u3099
;
zi
\
u3099
;
zu
\
u3099
;
ze
\
u3099
;
zo
\
u3099
;
sa
;
si
;
su
;
se
;
so
;
sha
;
shi
'
~
i
'
;
#
liu
shu
;
she
;
sho
;
shi
;
sh
}
vowel
|
'
~
y
'
;
ta
;
ti
;
tu
;
te
;
to
;
tsu
;
#
v
}
vowel
\
u3099
|
'
~
'
;
#
'
v
~
a
'
\
u3099
;
#
liu
#
'
v
~
i
'
\
u3099
;
#
liu
#
'
v
~
e
'
\
u3099
;
#
liu
#
'
v
~
o
'
\
u3099
;
#
liu
vu
\
u3099
;
u
;
#
w
}
vowel
|
'
~
'
;
wa
;
wi
;
wu
;
we
;
wo
;
ya
;
yi
;
yu
;
ye
;
yo
;
#
double
consonants
#
specials
s
}
sh
;
t
}
ch
;
#
voiced
j
}
j
}
j_start
;
b
}
b
}
[
h_start
f_start
]
voice
;
d
}
d
}
t_start
voice
;
g
}
g
}
k_start
voice
;
p
}
p
}
[
h_start
f_start
]
semivoice
;
#
v
}
v
}
[
]
voice
;
z
}
z
}
s_start
voice
;
v
}
v
}
v_start
;
#
normal
k
}
k
}
k_start
;
m
}
m
}
m_start
;
n
}
n
}
n_start
;
h
}
h
}
h_start
;
f
}
f
}
f_start
;
r
}
r
}
r_start
;
t
}
t
}
t_start
;
s
}
s
}
s_start
;
w
}
w
}
w_start
;
y
}
y
}
y_start
;
#
completeness
x
}
x
;
c
}
k
;
c
}
c
;
c
}
q
;
l
}
l
;
q
}
q
;
#
y
}
y
;
#
w
}
w
;
#
prolonged
vowel
mark
.
this
indicates
a
doubling
of
#
the
preceding
vowel
sound
#
a
a
{
;
#
liu
#
e
e
{
;
#
liu
#
i
i
{
;
#
liu
#
o
o
{
;
#
liu
#
u
u
{
;
#
liu
macron
;
#
small
forms
'
~
a
'
;
'
~
i
'
;
'
~
u
'
;
'
~
e
'
;
'
~
o
'
;
'
~
tsu
'
;
'
~
wa
'
;
'
~
ya
'
;
'
~
yi
'
;
'
~
yu
'
;
'
~
ye
'
;
'
~
yo
'
;
#
iteration
marks
#
TODO
:
make
more
accurate
j
1
sh
(
y
*
vowel
)
{
voice
;
dj
1
ch
(
y
*
vowel
)
{
voice
;
dz
1
ts
(
y
*
vowel
)
{
voice
;
g
1
k
(
y
*
vowel
)
{
voice
;
z
1
s
(
y
*
vowel
)
{
voice
;
d
1
t
(
y
*
vowel
)
{
voice
;
h
1
b
(
y
*
vowel
)
{
voice
;
v
1
w
(
y
*
vowel
)
{
voice
;
sh
1
sh
(
y
*
vowel
)
{
voice
;
j
1
j
(
y
*
vowel
)
{
voice
;
ch
1
ch
(
y
*
vowel
)
{
voice
;
dj
1
dj
(
y
*
vowel
)
{
voice
;
ts
1
ts
(
y
*
vowel
)
{
voice
;
dz
1
dz
(
y
*
vowel
)
{
voice
;
1
(
consonant
y
*
vowel
)
{
voice
?
;
1
(
.
)
{
voice
?
;
#
otherwise
repeat
last
character
voice
?
;
#
delete
if
no
characters
found
#
h
-
rule
:
lengthens
vowel
if
not
followed
by
a
vowel
.
#
At
the
point
this
is
applied
latin
[
cons
]
?
vowel
sequences
#
have
been
converted
to
katakana
in
NFD
form
.
voweled_basekana
[
\
u3099
\
u309A
]
?
{
h
;
#
one
-
way
latin
-
kana
rules
.
these
do
not
occur
in
#
well
-
formed
romaji
representing
actual
japanese
text
.
#
their
purpose
is
to
make
all
romaji
map
to
kana
of
#
some
sort
.
#
the
following
are
not
really
necessary
but
produce
#
slightly
more
natural
results
.
cy
;
dy
\
u3099
;
hy
;
sy
;
ty
;
zy
\
u3099
;
h
;
#
isolated
consonants
listed
here
so
as
not
to
mask
#
longer
rules
above
.
ch
;
sh
;
dz
\
u3099
;
dj
\
u3099
;
b
\
u3099
;
d
\
u3099
;
g
\
u3099
;
k
;
m
;
n
'
'
}
n_quoter
;
n
;
p
\
u309A
;
r
;
s
;
t
;
y
;
z
\
u3099
;
v
\
u3099
;
f
;
j
\
u3099
;
w
;
|
ss
;
|
e
;
|
d
;
|
u
;
|
th
;
#
simple
substitutions
using
backup
c
|
k
;
l
|
r
;
q
|
k
;
x
|
ks
;
#
~
~
~
END
shared
rules
~
~
~
#
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
#
Final
cleanup
'
~
'
;
#
delete
stray
tildes
between
letters
[
:
Katakana
:
]
{
'
'
}
[
:
Latin
:
]
;
#
delete
stray
quotes
between
letters
#
[
[
:
Nonspacing_Mark
:
]
-
[
\
u3099
-
]
]
;
#
delete
any
non
-
spacing
marks
that
we
didn
'
t
use
:
:
NFC
(
NFD
)
;
:
:
(
[
[
:
Katakana
:
]
[
\
u309B
\
u309C
\
u30A0
\
u30FC
\
uFF70
\
uFF9E
\
uFF9F
]
]
halfwidth
-
fullwidth
)
;
#
note
:
a
global
filter
is
more
efficient
but
MUST
include
all
source
chars
!
!
#
:
:
(
[
\
u0000
-
\
u007E
\
u3099
-
-
-
[
:
Latin
:
]
[
:
Katakana
:
]
[
:
Nonspacing_Mark
:
]
]
)
;
#
MINIMAL
FILTER
GENERATED
FOR
:
Latin
-
Katakana
BACKWARD
:
:
(
[
[
\
-
~
-
-
\
u0304
-
-
-
-
-
-
]
[
~
-
-
-
-
-
-
\
u3099
-
-
-
]
[
\
u309B
\
u309C
\
u30A0
\
u30FC
\
uFF70
\
uFF9E
\
uFF9F
]
]
)
;
#
eof
