/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
systemlibs
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
)
;
const
NETWORKMANAGER_CONTRACTID
=
"
mozilla
.
org
/
network
/
manager
;
1
"
;
const
NETWORKMANAGER_CID
=
Components
.
ID
(
"
{
33901e46
-
33b8
-
11e1
-
9869
-
f46d04d25bcc
}
"
)
;
const
DEFAULT_PREFERRED_NETWORK_TYPE
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_WIFI
;
XPCOMUtils
.
defineLazyGetter
(
this
"
ppmm
"
function
(
)
{
return
Cc
[
"
mozilla
.
org
/
parentprocessmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageBroadcaster
)
;
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gDNSService
"
"
mozilla
.
org
/
network
/
dns
-
service
;
1
"
"
nsIDNSService
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gNetworkService
"
"
mozilla
.
org
/
network
/
service
;
1
"
"
nsINetworkService
"
)
;
const
TOPIC_INTERFACE_REGISTERED
=
"
network
-
interface
-
registered
"
;
const
TOPIC_INTERFACE_UNREGISTERED
=
"
network
-
interface
-
unregistered
"
;
const
TOPIC_ACTIVE_CHANGED
=
"
network
-
active
-
changed
"
;
const
TOPIC_PREF_CHANGED
=
"
nsPref
:
changed
"
;
const
TOPIC_XPCOM_SHUTDOWN
=
"
xpcom
-
shutdown
"
;
const
TOPIC_CONNECTION_STATE_CHANGED
=
"
network
-
connection
-
state
-
changed
"
;
const
PREF_MANAGE_OFFLINE_STATUS
=
"
network
.
gonk
.
manage
-
offline
-
status
"
;
const
IPV4_ADDRESS_ANY
=
"
0
.
0
.
0
.
0
"
;
const
IPV6_ADDRESS_ANY
=
"
:
:
0
"
;
const
IPV4_MAX_PREFIX_LENGTH
=
32
;
const
IPV6_MAX_PREFIX_LENGTH
=
128
;
/
/
Connection
Type
for
Network
Information
API
const
CONNECTION_TYPE_CELLULAR
=
0
;
const
CONNECTION_TYPE_BLUETOOTH
=
1
;
const
CONNECTION_TYPE_ETHERNET
=
2
;
const
CONNECTION_TYPE_WIFI
=
3
;
const
CONNECTION_TYPE_OTHER
=
4
;
const
CONNECTION_TYPE_NONE
=
5
;
let
DEBUG
=
false
;
/
/
Read
debug
setting
from
pref
.
try
{
let
debugPref
=
Services
.
prefs
.
getBoolPref
(
"
network
.
debugging
.
enabled
"
)
;
DEBUG
=
DEBUG
|
|
debugPref
;
}
catch
(
e
)
{
}
function
defineLazyRegExp
(
obj
name
pattern
)
{
obj
.
__defineGetter__
(
name
function
(
)
{
delete
obj
[
name
]
;
return
obj
[
name
]
=
new
RegExp
(
pattern
)
;
}
)
;
}
function
NetworkInterfaceLinks
(
)
{
this
.
resetLinks
(
)
;
}
NetworkInterfaceLinks
.
prototype
=
{
linkRoutes
:
null
gateways
:
null
interfaceName
:
null
extraRoutes
:
null
setLinks
:
function
(
linkRoutes
gateways
interfaceName
)
{
this
.
linkRoutes
=
linkRoutes
;
this
.
gateways
=
gateways
;
this
.
interfaceName
=
interfaceName
;
}
resetLinks
:
function
(
)
{
this
.
linkRoutes
=
[
]
;
this
.
gateways
=
[
]
;
this
.
interfaceName
=
"
"
;
this
.
extraRoutes
=
[
]
;
}
compareGateways
:
function
(
gateways
)
{
if
(
this
.
gateways
.
length
!
=
gateways
.
length
)
{
return
false
;
}
for
(
let
i
=
0
;
i
<
this
.
gateways
.
length
;
i
+
+
)
{
if
(
this
.
gateways
[
i
]
!
=
gateways
[
i
]
)
{
return
false
;
}
}
return
true
;
}
}
;
/
*
*
*
This
component
watches
for
network
interfaces
changing
state
and
then
*
adjusts
routes
etc
.
accordingly
.
*
/
function
NetworkManager
(
)
{
this
.
networkInterfaces
=
{
}
;
this
.
networkInterfaceLinks
=
{
}
;
try
{
this
.
_manageOfflineStatus
=
Services
.
prefs
.
getBoolPref
(
PREF_MANAGE_OFFLINE_STATUS
)
;
}
catch
(
ex
)
{
/
/
Ignore
.
}
Services
.
prefs
.
addObserver
(
PREF_MANAGE_OFFLINE_STATUS
this
false
)
;
Services
.
obs
.
addObserver
(
this
TOPIC_XPCOM_SHUTDOWN
false
)
;
this
.
setAndConfigureActive
(
)
;
ppmm
.
addMessageListener
(
'
NetworkInterfaceList
:
ListInterface
'
this
)
;
/
/
Used
in
resolveHostname
(
)
.
defineLazyRegExp
(
this
"
REGEXP_IPV4
"
"
^
\
\
d
{
1
3
}
(
?
:
\
\
.
\
\
d
{
1
3
}
)
{
3
}
"
)
;
defineLazyRegExp
(
this
"
REGEXP_IPV6
"
"
^
[
\
\
da
-
fA
-
F
]
{
4
}
(
?
:
:
[
\
\
da
-
fA
-
F
]
{
4
}
)
{
7
}
"
)
;
}
NetworkManager
.
prototype
=
{
classID
:
NETWORKMANAGER_CID
classInfo
:
XPCOMUtils
.
generateCI
(
{
classID
:
NETWORKMANAGER_CID
contractID
:
NETWORKMANAGER_CONTRACTID
classDescription
:
"
Network
Manager
"
interfaces
:
[
Ci
.
nsINetworkManager
]
}
)
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsINetworkManager
Ci
.
nsISupportsWeakReference
Ci
.
nsIObserver
Ci
.
nsISettingsServiceCallback
]
)
/
/
nsIObserver
observe
:
function
(
subject
topic
data
)
{
switch
(
topic
)
{
case
TOPIC_PREF_CHANGED
:
this
.
_manageOfflineStatus
=
Services
.
prefs
.
getBoolPref
(
PREF_MANAGE_OFFLINE_STATUS
)
;
debug
(
PREF_MANAGE_OFFLINE_STATUS
+
"
has
changed
to
"
+
this
.
_manageOfflineStatus
)
;
break
;
case
TOPIC_XPCOM_SHUTDOWN
:
Services
.
obs
.
removeObserver
(
this
TOPIC_XPCOM_SHUTDOWN
)
;
Services
.
prefs
.
removeObserver
(
PREF_MANAGE_OFFLINE_STATUS
this
)
;
break
;
}
}
receiveMessage
:
function
(
aMsg
)
{
switch
(
aMsg
.
name
)
{
case
"
NetworkInterfaceList
:
ListInterface
"
:
{
let
excludeMms
=
aMsg
.
json
.
excludeMms
;
let
excludeSupl
=
aMsg
.
json
.
excludeSupl
;
let
excludeIms
=
aMsg
.
json
.
excludeIms
;
let
excludeDun
=
aMsg
.
json
.
excludeDun
;
let
interfaces
=
[
]
;
for
each
(
let
i
in
this
.
networkInterfaces
)
{
if
(
(
i
.
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE_MMS
&
&
excludeMms
)
|
|
(
i
.
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE_SUPL
&
&
excludeSupl
)
|
|
(
i
.
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE_IMS
&
&
excludeIms
)
|
|
(
i
.
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE_DUN
&
&
excludeDun
)
)
{
continue
;
}
let
ips
=
{
}
;
let
prefixLengths
=
{
}
;
i
.
getAddresses
(
ips
prefixLengths
)
;
interfaces
.
push
(
{
state
:
i
.
state
type
:
i
.
type
name
:
i
.
name
ips
:
ips
.
value
prefixLengths
:
prefixLengths
.
value
gateways
:
i
.
getGateways
(
)
dnses
:
i
.
getDnses
(
)
httpProxyHost
:
i
.
httpProxyHost
httpProxyPort
:
i
.
httpProxyPort
}
)
;
}
return
interfaces
;
}
}
}
getNetworkId
:
function
(
network
)
{
let
id
=
"
device
"
;
try
{
if
(
network
instanceof
Ci
.
nsIRilNetworkInterface
)
{
let
rilNetwork
=
network
.
QueryInterface
(
Ci
.
nsIRilNetworkInterface
)
;
id
=
"
ril
"
+
rilNetwork
.
serviceId
;
}
}
catch
(
e
)
{
}
return
id
+
"
-
"
+
network
.
type
;
}
/
/
nsINetworkManager
registerNetworkInterface
:
function
(
network
)
{
if
(
!
(
network
instanceof
Ci
.
nsINetworkInterface
)
)
{
throw
Components
.
Exception
(
"
Argument
must
be
nsINetworkInterface
.
"
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
let
networkId
=
this
.
getNetworkId
(
network
)
;
if
(
networkId
in
this
.
networkInterfaces
)
{
throw
Components
.
Exception
(
"
Network
with
that
type
already
registered
!
"
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
this
.
networkInterfaces
[
networkId
]
=
network
;
this
.
networkInterfaceLinks
[
networkId
]
=
new
NetworkInterfaceLinks
(
)
;
Services
.
obs
.
notifyObservers
(
network
TOPIC_INTERFACE_REGISTERED
null
)
;
debug
(
"
Network
'
"
+
networkId
+
"
'
registered
.
"
)
;
}
_addSubnetRoutes
:
function
(
network
)
{
let
ips
=
{
}
;
let
prefixLengths
=
{
}
;
let
length
=
network
.
getAddresses
(
ips
prefixLengths
)
;
for
(
let
i
=
0
;
i
<
length
;
i
+
+
)
{
debug
(
'
Adding
subnet
routes
:
'
+
ips
.
value
[
i
]
+
'
/
'
+
prefixLengths
.
value
[
i
]
)
;
gNetworkService
.
modifyRoute
(
Ci
.
nsINetworkService
.
MODIFY_ROUTE_ADD
network
.
name
ips
.
value
[
i
]
prefixLengths
.
value
[
i
]
)
.
catch
(
(
aError
)
=
>
{
debug
(
"
_addSubnetRoutes
error
:
"
+
aError
)
;
}
)
;
}
}
updateNetworkInterface
:
function
(
network
)
{
if
(
!
(
network
instanceof
Ci
.
nsINetworkInterface
)
)
{
throw
Components
.
Exception
(
"
Argument
must
be
nsINetworkInterface
.
"
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
let
networkId
=
this
.
getNetworkId
(
network
)
;
if
(
!
(
networkId
in
this
.
networkInterfaces
)
)
{
throw
Components
.
Exception
(
"
No
network
with
that
type
registered
.
"
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
debug
(
"
Network
"
+
network
.
type
+
"
/
"
+
network
.
name
+
"
changed
state
to
"
+
network
.
state
)
;
/
/
Note
that
since
Lollipop
we
need
to
allocate
and
initialize
/
/
something
through
netd
so
we
add
createNetwork
/
destroyNetwork
/
/
to
deal
with
that
explicitly
.
switch
(
network
.
state
)
{
case
Ci
.
nsINetworkInterface
.
NETWORK_STATE_CONNECTED
:
gNetworkService
.
createNetwork
(
network
.
name
(
)
=
>
{
/
/
Add
host
route
for
data
calls
if
(
this
.
isNetworkTypeMobile
(
network
.
type
)
)
{
let
currentInterfaceLinks
=
this
.
networkInterfaceLinks
[
networkId
]
;
let
newLinkRoutes
=
network
.
getDnses
(
)
.
concat
(
network
.
httpProxyHost
)
;
/
/
If
gateways
have
changed
remove
all
old
routes
first
.
this
.
_handleGateways
(
networkId
network
.
getGateways
(
)
)
.
then
(
(
)
=
>
this
.
_updateRoutes
(
currentInterfaceLinks
.
linkRoutes
newLinkRoutes
network
.
getGateways
(
)
network
.
name
)
)
.
then
(
(
)
=
>
currentInterfaceLinks
.
setLinks
(
newLinkRoutes
network
.
getGateways
(
)
network
.
name
)
)
;
}
/
/
Remove
pre
-
created
default
route
and
let
setAndConfigureActive
(
)
/
/
to
set
default
route
only
on
preferred
network
gNetworkService
.
removeDefaultRoute
(
network
)
;
/
/
Dun
type
is
a
special
case
where
we
add
the
default
route
to
a
/
/
secondary
table
.
if
(
network
.
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE_DUN
)
{
this
.
setSecondaryDefaultRoute
(
network
)
;
}
this
.
_addSubnetRoutes
(
network
)
;
this
.
setAndConfigureActive
(
)
;
/
/
Update
data
connection
when
Wifi
connected
/
disconnected
if
(
network
.
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_WIFI
&
&
this
.
mRil
)
{
for
(
let
i
=
0
;
i
<
this
.
mRil
.
numRadioInterfaces
;
i
+
+
)
{
this
.
mRil
.
getRadioInterface
(
i
)
.
updateRILNetworkInterface
(
)
;
}
}
/
/
Probing
the
public
network
accessibility
after
routing
table
is
ready
CaptivePortalDetectionHelper
.
notify
(
CaptivePortalDetectionHelper
.
EVENT_CONNECT
this
.
active
)
;
/
/
Notify
outer
modules
like
MmsService
to
start
the
transaction
after
/
/
the
configuration
of
the
network
interface
is
done
.
Services
.
obs
.
notifyObservers
(
network
TOPIC_CONNECTION_STATE_CHANGED
this
.
convertConnectionType
(
network
)
)
;
}
)
;
break
;
case
Ci
.
nsINetworkInterface
.
NETWORK_STATE_DISCONNECTED
:
/
/
Remove
host
route
for
data
calls
if
(
this
.
isNetworkTypeMobile
(
network
.
type
)
)
{
this
.
_cleanupAllHostRoutes
(
networkId
)
;
}
/
/
Remove
secondary
default
route
for
dun
.
if
(
network
.
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE_DUN
)
{
this
.
removeSecondaryDefaultRoute
(
network
)
;
}
/
/
Remove
routing
table
in
/
proc
/
net
/
route
if
(
network
.
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_WIFI
)
{
gNetworkService
.
resetRoutingTable
(
network
)
;
}
else
if
(
network
.
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE
)
{
gNetworkService
.
removeDefaultRoute
(
network
)
;
}
/
/
Clear
http
proxy
on
active
network
.
if
(
this
.
active
&
&
network
.
type
=
=
this
.
active
.
type
)
{
gNetworkService
.
clearNetworkProxy
(
)
;
}
/
/
Abort
ongoing
captive
portal
detection
on
the
wifi
interface
CaptivePortalDetectionHelper
.
notify
(
CaptivePortalDetectionHelper
.
EVENT_DISCONNECT
network
)
;
this
.
setAndConfigureActive
(
)
;
/
/
Update
data
connection
when
Wifi
connected
/
disconnected
if
(
network
.
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_WIFI
&
&
this
.
mRil
)
{
for
(
let
i
=
0
;
i
<
this
.
mRil
.
numRadioInterfaces
;
i
+
+
)
{
this
.
mRil
.
getRadioInterface
(
i
)
.
updateRILNetworkInterface
(
)
;
}
}
gNetworkService
.
destroyNetwork
(
network
.
name
(
)
=
>
{
/
/
Notify
outer
modules
like
MmsService
to
start
the
transaction
after
/
/
the
configuration
of
the
network
interface
is
done
.
Services
.
obs
.
notifyObservers
(
network
TOPIC_CONNECTION_STATE_CHANGED
this
.
convertConnectionType
(
network
)
)
;
}
)
;
break
;
}
}
unregisterNetworkInterface
:
function
(
network
)
{
if
(
!
(
network
instanceof
Ci
.
nsINetworkInterface
)
)
{
throw
Components
.
Exception
(
"
Argument
must
be
nsINetworkInterface
.
"
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
let
networkId
=
this
.
getNetworkId
(
network
)
;
if
(
!
(
networkId
in
this
.
networkInterfaces
)
)
{
throw
Components
.
Exception
(
"
No
network
with
that
type
registered
.
"
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
/
/
This
is
for
in
case
a
network
gets
unregistered
without
being
/
/
DISCONNECTED
.
if
(
this
.
isNetworkTypeMobile
(
network
.
type
)
)
{
this
.
_cleanupAllHostRoutes
(
networkId
)
;
}
delete
this
.
networkInterfaces
[
networkId
]
;
Services
.
obs
.
notifyObservers
(
network
TOPIC_INTERFACE_UNREGISTERED
null
)
;
debug
(
"
Network
'
"
+
networkId
+
"
'
unregistered
.
"
)
;
}
_manageOfflineStatus
:
true
networkInterfaces
:
null
networkInterfaceLinks
:
null
_preferredNetworkType
:
DEFAULT_PREFERRED_NETWORK_TYPE
get
preferredNetworkType
(
)
{
return
this
.
_preferredNetworkType
;
}
set
preferredNetworkType
(
val
)
{
if
(
[
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_WIFI
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE
]
.
indexOf
(
val
)
=
=
-
1
)
{
throw
"
Invalid
network
type
"
;
}
this
.
_preferredNetworkType
=
val
;
}
active
:
null
_overriddenActive
:
null
overrideActive
:
function
(
network
)
{
if
(
[
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_WIFI
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE
]
.
indexOf
(
val
)
=
=
-
1
)
{
throw
"
Invalid
network
type
"
;
}
this
.
_overriddenActive
=
network
;
this
.
setAndConfigureActive
(
)
;
}
_updateRoutes
:
function
(
oldLinks
newLinks
gateways
interfaceName
)
{
/
/
Returns
items
that
are
in
base
but
not
in
target
.
function
getDifference
(
base
target
)
{
return
base
.
filter
(
function
(
i
)
{
return
target
.
indexOf
(
i
)
<
0
;
}
)
;
}
let
addedLinks
=
getDifference
(
newLinks
oldLinks
)
;
let
removedLinks
=
getDifference
(
oldLinks
newLinks
)
;
if
(
addedLinks
.
length
=
=
=
0
&
&
removedLinks
.
length
=
=
=
0
)
{
return
Promise
.
resolve
(
)
;
}
return
this
.
_setHostRoutes
(
false
removedLinks
interfaceName
gateways
)
.
then
(
this
.
_setHostRoutes
(
true
addedLinks
interfaceName
gateways
)
)
;
}
_setHostRoutes
:
function
(
doAdd
ipAddresses
networkName
gateways
)
{
let
getMaxPrefixLength
=
(
aIp
)
=
>
{
return
aIp
.
match
(
this
.
REGEXP_IPV4
)
?
IPV4_MAX_PREFIX_LENGTH
:
IPV6_MAX_PREFIX_LENGTH
;
}
let
promises
=
[
]
;
ipAddresses
.
forEach
(
(
aIpAddress
)
=
>
{
let
gateway
=
this
.
selectGateway
(
gateways
aIpAddress
)
;
if
(
gateway
)
{
promises
.
push
(
(
doAdd
)
?
gNetworkService
.
modifyRoute
(
Ci
.
nsINetworkService
.
MODIFY_ROUTE_ADD
networkName
aIpAddress
getMaxPrefixLength
(
aIpAddress
)
gateway
)
:
gNetworkService
.
modifyRoute
(
Ci
.
nsINetworkService
.
MODIFY_ROUTE_REMOVE
networkName
aIpAddress
getMaxPrefixLength
(
aIpAddress
)
gateway
)
)
;
}
}
)
;
return
Promise
.
all
(
promises
)
;
}
isValidatedNetwork
:
function
(
network
)
{
let
isValid
=
false
;
try
{
isValid
=
(
this
.
getNetworkId
(
network
)
in
this
.
networkInterfaces
)
;
}
catch
(
e
)
{
debug
(
"
Invalid
network
interface
:
"
+
e
)
;
}
return
isValid
;
}
addHostRoute
:
function
(
network
host
)
{
if
(
!
this
.
isValidatedNetwork
(
network
)
)
{
return
Promise
.
reject
(
"
Invalid
network
interface
.
"
)
;
}
return
this
.
resolveHostname
(
network
host
)
.
then
(
(
ipAddresses
)
=
>
{
let
promises
=
[
]
;
let
networkId
=
this
.
getNetworkId
(
network
)
;
ipAddresses
.
forEach
(
(
aIpAddress
)
=
>
{
let
promise
=
this
.
_setHostRoutes
(
true
[
aIpAddress
]
network
.
name
network
.
getGateways
(
)
)
.
then
(
(
)
=
>
this
.
networkInterfaceLinks
[
networkId
]
.
extraRoutes
.
push
(
aIpAddress
)
)
;
promises
.
push
(
promise
)
;
}
)
;
return
Promise
.
all
(
promises
)
;
}
)
;
}
removeHostRoute
:
function
(
network
host
)
{
if
(
!
this
.
isValidatedNetwork
(
network
)
)
{
return
Promise
.
reject
(
"
Invalid
network
interface
.
"
)
;
}
return
this
.
resolveHostname
(
network
host
)
.
then
(
(
ipAddresses
)
=
>
{
let
promises
=
[
]
;
let
networkId
=
this
.
getNetworkId
(
network
)
;
ipAddresses
.
forEach
(
(
aIpAddress
)
=
>
{
let
found
=
this
.
networkInterfaceLinks
[
networkId
]
.
extraRoutes
.
indexOf
(
aIpAddress
)
;
if
(
found
<
0
)
{
return
;
/
/
continue
}
let
promise
=
this
.
_setHostRoutes
(
false
[
aIpAddress
]
network
.
name
network
.
getGateways
(
)
)
.
then
(
(
)
=
>
{
this
.
networkInterfaceLinks
[
networkId
]
.
extraRoutes
.
splice
(
found
1
)
;
}
(
)
=
>
{
/
/
We
should
remove
it
even
if
the
operation
failed
.
this
.
networkInterfaceLinks
[
networkId
]
.
extraRoutes
.
splice
(
found
1
)
;
}
)
;
promises
.
push
(
promise
)
;
}
)
;
return
Promise
.
all
(
promises
)
;
}
)
;
}
isNetworkTypeSecondaryMobile
:
function
(
type
)
{
return
(
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE_MMS
|
|
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE_SUPL
|
|
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE_IMS
|
|
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE_DUN
)
;
}
isNetworkTypeMobile
:
function
(
type
)
{
return
(
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE
|
|
this
.
isNetworkTypeSecondaryMobile
(
type
)
)
;
}
_handleGateways
:
function
(
networkId
gateways
)
{
let
currentNetworkLinks
=
this
.
networkInterfaceLinks
[
networkId
]
;
if
(
currentNetworkLinks
.
gateways
.
length
=
=
0
|
|
currentNetworkLinks
.
compareGateways
(
gateways
)
)
{
return
Promise
.
resolve
(
)
;
}
let
currentExtraRoutes
=
currentNetworkLinks
.
extraRoutes
;
return
this
.
_cleanupAllHostRoutes
(
networkId
)
.
then
(
(
)
=
>
{
/
/
If
gateways
have
changed
re
-
add
extra
host
routes
with
new
gateways
.
if
(
currentExtraRoutes
.
length
>
0
)
{
this
.
_setHostRoutes
(
true
currentExtraRoutes
currentNetworkLinks
.
interfaceName
gateways
)
.
then
(
(
)
=
>
{
currentNetworkLinks
.
extraRoutes
=
currentExtraRoutes
;
}
)
;
}
}
)
;
}
_cleanupAllHostRoutes
:
function
(
networkId
)
{
let
currentNetworkLinks
=
this
.
networkInterfaceLinks
[
networkId
]
;
let
hostRoutes
=
currentNetworkLinks
.
linkRoutes
.
concat
(
currentNetworkLinks
.
extraRoutes
)
;
if
(
hostRoutes
.
length
=
=
=
0
)
{
return
Promise
.
resolve
(
)
;
}
return
this
.
_setHostRoutes
(
false
hostRoutes
currentNetworkLinks
.
interfaceName
currentNetworkLinks
.
gateways
)
.
catch
(
(
aError
)
=
>
{
debug
(
"
Error
(
"
+
aError
+
"
)
on
_cleanupAllHostRoutes
keep
proceeding
.
"
)
;
}
)
.
then
(
(
)
=
>
currentNetworkLinks
.
resetLinks
(
)
)
;
}
selectGateway
:
function
(
gateways
host
)
{
for
(
let
i
=
0
;
i
<
gateways
.
length
;
i
+
+
)
{
let
gateway
=
gateways
[
i
]
;
if
(
gateway
.
match
(
this
.
REGEXP_IPV4
)
&
&
host
.
match
(
this
.
REGEXP_IPV4
)
|
|
gateway
.
indexOf
(
"
:
"
)
!
=
-
1
&
&
host
.
indexOf
(
"
:
"
)
!
=
-
1
)
{
return
gateway
;
}
}
return
null
;
}
setSecondaryDefaultRoute
:
function
(
network
)
{
let
gateways
=
network
.
getGateways
(
)
;
for
(
let
i
=
0
;
i
<
gateways
.
length
;
i
+
+
)
{
let
isIPv6
=
(
gateways
[
i
]
.
indexOf
(
"
:
"
)
!
=
-
1
)
?
true
:
false
;
/
/
First
we
need
to
add
a
host
route
to
the
gateway
in
the
secondary
/
/
routing
table
to
make
the
gateway
reachable
.
Host
route
takes
the
max
/
/
prefix
and
gateway
address
'
any
'
.
let
route
=
{
ip
:
gateways
[
i
]
prefix
:
isIPv6
?
IPV6_MAX_PREFIX_LENGTH
:
IPV4_MAX_PREFIX_LENGTH
gateway
:
isIPv6
?
IPV6_ADDRESS_ANY
:
IPV4_ADDRESS_ANY
}
;
gNetworkService
.
addSecondaryRoute
(
network
.
name
route
)
;
/
/
Now
we
can
add
the
default
route
through
gateway
.
Default
route
takes
the
/
/
min
prefix
and
destination
ip
'
any
'
.
route
.
ip
=
isIPv6
?
IPV6_ADDRESS_ANY
:
IPV4_ADDRESS_ANY
;
route
.
prefix
=
0
;
route
.
gateway
=
gateways
[
i
]
;
gNetworkService
.
addSecondaryRoute
(
network
.
name
route
)
;
}
}
removeSecondaryDefaultRoute
:
function
(
network
)
{
let
gateways
=
network
.
getGateways
(
)
;
for
(
let
i
=
0
;
i
<
gateways
.
length
;
i
+
+
)
{
let
isIPv6
=
(
gateways
[
i
]
.
indexOf
(
"
:
"
)
!
=
-
1
)
?
true
:
false
;
/
/
Remove
both
default
route
and
host
route
.
let
route
=
{
ip
:
isIPv6
?
IPV6_ADDRESS_ANY
:
IPV4_ADDRESS_ANY
prefix
:
0
gateway
:
gateways
[
i
]
}
;
gNetworkService
.
removeSecondaryRoute
(
network
.
name
route
)
;
route
.
ip
=
gateways
[
i
]
;
route
.
prefix
=
isIPv6
?
IPV6_MAX_PREFIX_LENGTH
:
IPV4_MAX_PREFIX_LENGTH
;
route
.
gateway
=
isIPv6
?
IPV6_ADDRESS_ANY
:
IPV4_ADDRESS_ANY
;
gNetworkService
.
removeSecondaryRoute
(
network
.
name
route
)
;
}
}
/
*
*
*
Determine
the
active
interface
and
configure
it
.
*
/
setAndConfigureActive
:
function
(
)
{
debug
(
"
Evaluating
whether
active
network
needs
to
be
changed
.
"
)
;
let
oldActive
=
this
.
active
;
if
(
this
.
_overriddenActive
)
{
debug
(
"
We
have
an
override
for
the
active
network
:
"
+
this
.
_overriddenActive
.
name
)
;
/
/
The
override
was
just
set
so
reconfigure
the
network
.
if
(
this
.
active
!
=
this
.
_overriddenActive
)
{
this
.
active
=
this
.
_overriddenActive
;
this
.
_setDefaultRouteAndDNS
(
this
.
active
oldActive
)
;
Services
.
obs
.
notifyObservers
(
this
.
active
TOPIC_ACTIVE_CHANGED
null
)
;
}
return
;
}
/
/
The
active
network
is
already
our
preferred
type
.
if
(
this
.
active
&
&
this
.
active
.
state
=
=
Ci
.
nsINetworkInterface
.
NETWORK_STATE_CONNECTED
&
&
this
.
active
.
type
=
=
this
.
_preferredNetworkType
)
{
debug
(
"
Active
network
is
already
our
preferred
type
.
"
)
;
this
.
_setDefaultRouteAndDNS
(
this
.
active
oldActive
)
;
return
;
}
/
/
Find
a
suitable
network
interface
to
activate
.
this
.
active
=
null
;
let
defaultDataNetwork
;
for
each
(
let
network
in
this
.
networkInterfaces
)
{
if
(
network
.
state
!
=
Ci
.
nsINetworkInterface
.
NETWORK_STATE_CONNECTED
)
{
continue
;
}
if
(
network
.
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE
)
{
defaultDataNetwork
=
network
;
}
this
.
active
=
network
;
if
(
network
.
type
=
=
this
.
preferredNetworkType
)
{
debug
(
"
Found
our
preferred
type
of
network
:
"
+
network
.
name
)
;
break
;
}
}
if
(
this
.
active
)
{
/
/
Give
higher
priority
to
default
data
APN
than
secondary
APN
.
/
/
If
default
data
APN
is
not
connected
we
still
set
default
route
/
/
and
DNS
on
secondary
APN
.
if
(
defaultDataNetwork
&
&
this
.
isNetworkTypeSecondaryMobile
(
this
.
active
.
type
)
&
&
this
.
active
.
type
!
=
this
.
preferredNetworkType
)
{
this
.
active
=
defaultDataNetwork
;
}
/
/
Don
'
t
set
default
route
on
secondary
APN
if
(
this
.
isNetworkTypeSecondaryMobile
(
this
.
active
.
type
)
)
{
gNetworkService
.
setDNS
(
this
.
active
function
(
)
{
}
)
;
}
else
{
this
.
_setDefaultRouteAndDNS
(
this
.
active
oldActive
)
;
}
}
if
(
this
.
active
!
=
oldActive
)
{
Services
.
obs
.
notifyObservers
(
this
.
active
TOPIC_ACTIVE_CHANGED
null
)
;
}
if
(
this
.
_manageOfflineStatus
)
{
Services
.
io
.
offline
=
!
this
.
active
;
}
}
resolveHostname
:
function
(
network
hostname
)
{
/
/
Sanity
check
for
null
undefined
and
empty
string
.
.
.
etc
.
if
(
!
hostname
)
{
return
Promise
.
reject
(
new
Error
(
"
hostname
is
empty
:
"
+
hostname
)
)
;
}
if
(
hostname
.
match
(
this
.
REGEXP_IPV4
)
|
|
hostname
.
match
(
this
.
REGEXP_IPV6
)
)
{
return
Promise
.
resolve
(
[
hostname
]
)
;
}
let
deferred
=
Promise
.
defer
(
)
;
let
onLookupComplete
=
(
aRequest
aRecord
aStatus
)
=
>
{
if
(
!
Components
.
isSuccessCode
(
aStatus
)
)
{
deferred
.
reject
(
new
Error
(
"
Failed
to
resolve
'
"
+
hostname
+
"
'
with
status
:
"
+
aStatus
)
)
;
return
;
}
let
retval
=
[
]
;
while
(
aRecord
.
hasMore
(
)
)
{
retval
.
push
(
aRecord
.
getNextAddrAsString
(
)
)
;
}
if
(
!
retval
.
length
)
{
deferred
.
reject
(
new
Error
(
"
No
valid
address
after
DNS
lookup
!
"
)
)
;
return
;
}
if
(
DEBUG
)
debug
(
"
hostname
is
resolved
:
"
+
hostname
)
;
if
(
DEBUG
)
debug
(
"
Addresses
:
"
+
JSON
.
stringify
(
retval
)
)
;
deferred
.
resolve
(
retval
)
;
}
;
/
/
Bug
1058282
-
Explicitly
request
ipv4
to
get
around
8
.
8
.
8
.
8
probe
at
/
/
http
:
/
/
androidxref
.
com
/
4
.
3_r2
.
1
/
xref
/
bionic
/
libc
/
netbsd
/
net
/
getaddrinfo
.
c
#
1923
/
/
/
/
Whenever
MMS
connection
is
the
only
network
interface
there
is
no
/
/
default
route
so
that
any
ip
probe
will
fail
.
let
flags
=
0
;
if
(
network
.
type
=
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE_MMS
)
{
flags
|
=
Ci
.
nsIDNSService
.
RESOLVE_DISABLE_IPV6
;
}
/
/
TODO
:
Bug
992772
-
Resolve
the
hostname
with
specified
networkInterface
.
gDNSService
.
asyncResolve
(
hostname
flags
onLookupComplete
Services
.
tm
.
mainThread
)
;
return
deferred
.
promise
;
}
convertConnectionType
:
function
(
network
)
{
/
/
If
there
is
internal
interface
change
(
e
.
g
.
MOBILE_MMS
MOBILE_SUPL
)
/
/
the
function
will
return
null
so
that
it
won
'
t
trigger
type
change
event
/
/
in
NetworkInformation
API
.
if
(
network
.
type
!
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_WIFI
&
&
network
.
type
!
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE
)
{
return
null
;
}
if
(
network
.
state
=
=
Ci
.
nsINetworkInterface
.
NETWORK_STATE_DISCONNECTED
)
{
return
CONNECTION_TYPE_NONE
;
}
switch
(
network
.
type
)
{
case
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_WIFI
:
return
CONNECTION_TYPE_WIFI
;
case
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_MOBILE
:
return
CONNECTION_TYPE_CELLULAR
;
}
}
_setDefaultRouteAndDNS
:
function
(
network
oldInterface
)
{
gNetworkService
.
setDefaultRoute
(
network
oldInterface
function
(
success
)
{
if
(
!
success
)
{
gNetworkService
.
destroyNetwork
(
network
function
(
)
{
}
)
;
return
;
}
gNetworkService
.
setDNS
(
network
function
(
result
)
{
gNetworkService
.
setNetworkProxy
(
network
)
;
}
)
;
}
)
;
}
}
;
let
CaptivePortalDetectionHelper
=
(
function
(
)
{
const
EVENT_CONNECT
=
"
Connect
"
;
const
EVENT_DISCONNECT
=
"
Disconnect
"
;
let
_ongoingInterface
=
null
;
let
_available
=
(
"
nsICaptivePortalDetector
"
in
Ci
)
;
let
getService
=
function
(
)
{
return
Cc
[
'
mozilla
.
org
/
toolkit
/
captive
-
detector
;
1
'
]
.
getService
(
Ci
.
nsICaptivePortalDetector
)
;
}
;
let
_performDetection
=
function
(
interfaceName
callback
)
{
let
capService
=
getService
(
)
;
let
capCallback
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsICaptivePortalCallback
]
)
prepare
:
function
(
)
{
capService
.
finishPreparation
(
interfaceName
)
;
}
complete
:
function
(
success
)
{
_ongoingInterface
=
null
;
callback
(
success
)
;
}
}
;
/
/
Abort
any
unfinished
captive
portal
detection
.
if
(
_ongoingInterface
!
=
null
)
{
capService
.
abort
(
_ongoingInterface
)
;
_ongoingInterface
=
null
;
}
try
{
capService
.
checkCaptivePortal
(
interfaceName
capCallback
)
;
_ongoingInterface
=
interfaceName
;
}
catch
(
e
)
{
debug
(
'
Fail
to
detect
captive
portal
due
to
:
'
+
e
.
message
)
;
}
}
;
let
_abort
=
function
(
interfaceName
)
{
if
(
_ongoingInterface
!
=
=
interfaceName
)
{
return
;
}
let
capService
=
getService
(
)
;
capService
.
abort
(
_ongoingInterface
)
;
_ongoingInterface
=
null
;
}
;
return
{
EVENT_CONNECT
:
EVENT_CONNECT
EVENT_DISCONNECT
:
EVENT_DISCONNECT
notify
:
function
(
eventType
network
)
{
switch
(
eventType
)
{
case
EVENT_CONNECT
:
/
/
perform
captive
portal
detection
on
wifi
interface
if
(
_available
&
&
network
&
&
network
.
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_WIFI
)
{
_performDetection
(
network
.
name
function
(
)
{
/
/
TODO
:
bug
837600
/
/
We
can
disconnect
wifi
in
here
if
user
abort
the
login
procedure
.
}
)
;
}
break
;
case
EVENT_DISCONNECT
:
if
(
_available
&
&
network
.
type
=
=
Ci
.
nsINetworkInterface
.
NETWORK_TYPE_WIFI
)
{
_abort
(
network
.
name
)
;
}
break
;
}
}
}
;
}
(
)
)
;
XPCOMUtils
.
defineLazyGetter
(
NetworkManager
.
prototype
"
mRil
"
function
(
)
{
try
{
return
Cc
[
"
mozilla
.
org
/
ril
;
1
"
]
.
getService
(
Ci
.
nsIRadioInterfaceLayer
)
;
}
catch
(
e
)
{
}
return
null
;
}
)
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
NetworkManager
]
)
;
let
debug
;
if
(
DEBUG
)
{
debug
=
function
(
s
)
{
dump
(
"
-
*
-
NetworkManager
:
"
+
s
+
"
\
n
"
)
;
}
;
}
else
{
debug
=
function
(
s
)
{
}
;
}
