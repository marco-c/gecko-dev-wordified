/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
2
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
mozilla_dom_textinputprocessor_h_
#
define
mozilla_dom_textinputprocessor_h_
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
TextEventDispatcherListener
.
h
"
#
include
"
nsITextInputProcessor
.
h
"
#
include
"
nsITextInputProcessorCallback
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
widget
{
class
TextEventDispatcher
;
}
/
/
namespace
widget
class
TextInputProcessor
MOZ_FINAL
:
public
nsITextInputProcessor
public
widget
:
:
TextEventDispatcherListener
{
typedef
mozilla
:
:
widget
:
:
IMENotification
IMENotification
;
typedef
mozilla
:
:
widget
:
:
TextEventDispatcher
TextEventDispatcher
;
public
:
TextInputProcessor
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSITEXTINPUTPROCESSOR
/
/
TextEventDispatcherListener
NS_IMETHOD
NotifyIME
(
TextEventDispatcher
*
aTextEventDispatcher
const
IMENotification
&
aNotification
)
MOZ_OVERRIDE
;
NS_IMETHOD_
(
void
)
OnRemovedFrom
(
TextEventDispatcher
*
aTextEventDispatcher
)
MOZ_OVERRIDE
;
protected
:
virtual
~
TextInputProcessor
(
)
;
private
:
nsresult
BeginInputTransactionInternal
(
nsIDOMWindow
*
aWindow
nsITextInputProcessorCallback
*
aCallback
bool
aForTests
bool
&
aSucceeded
)
;
nsresult
CommitCompositionInternal
(
const
nsAString
*
aCommitString
=
nullptr
bool
*
aSucceeded
=
nullptr
)
;
nsresult
CancelCompositionInternal
(
)
;
nsresult
IsValidStateForComposition
(
)
;
void
UnlinkFromTextEventDispatcher
(
)
;
nsresult
PrepareKeyboardEventToDispatch
(
WidgetKeyboardEvent
&
aKeyboardEvent
uint32_t
aKeyFlags
)
;
/
*
*
*
TextInputProcessor
manages
modifier
state
both
with
.
key
and
.
code
.
*
For
example
left
shift
key
up
shouldn
'
t
cause
inactivating
shift
state
*
while
right
shift
key
is
being
pressed
.
*
/
struct
ModifierKeyData
{
/
/
One
of
modifier
key
name
KeyNameIndex
mKeyNameIndex
;
/
/
Any
code
name
is
allowed
.
CodeNameIndex
mCodeNameIndex
;
/
/
A
modifier
key
flag
which
is
activated
by
the
key
.
Modifiers
mModifier
;
explicit
ModifierKeyData
(
const
WidgetKeyboardEvent
&
aKeyboardEvent
)
;
bool
operator
=
=
(
const
ModifierKeyData
&
aOther
)
const
{
return
mKeyNameIndex
=
=
aOther
.
mKeyNameIndex
&
&
mCodeNameIndex
=
=
aOther
.
mCodeNameIndex
;
}
}
;
class
ModifierKeyDataArray
:
public
nsTArray
<
ModifierKeyData
>
{
public
:
Modifiers
GetActiveModifiers
(
)
const
;
void
ActivateModifierKey
(
const
ModifierKeyData
&
aModifierKeyData
)
;
void
InactivateModifierKey
(
const
ModifierKeyData
&
aModifierKeyData
)
;
void
ToggleModifierKey
(
const
ModifierKeyData
&
aModifierKeyData
)
;
}
;
Modifiers
GetActiveModifiers
(
)
const
{
return
mModifierKeyDataArray
.
GetActiveModifiers
(
)
;
}
void
ActivateModifierKey
(
const
ModifierKeyData
&
aModifierKeyData
)
{
mModifierKeyDataArray
.
ActivateModifierKey
(
aModifierKeyData
)
;
}
void
InactivateModifierKey
(
const
ModifierKeyData
&
aModifierKeyData
)
{
mModifierKeyDataArray
.
InactivateModifierKey
(
aModifierKeyData
)
;
}
void
ToggleModifierKey
(
const
ModifierKeyData
&
aModifierKeyData
)
{
mModifierKeyDataArray
.
ToggleModifierKey
(
aModifierKeyData
)
;
}
TextEventDispatcher
*
mDispatcher
;
/
/
[
Weak
]
nsCOMPtr
<
nsITextInputProcessorCallback
>
mCallback
;
ModifierKeyDataArray
mModifierKeyDataArray
;
bool
mForTests
;
}
;
}
/
/
namespace
mozilla
#
endif
/
/
#
ifndef
mozilla_dom_textinputprocessor_h_
