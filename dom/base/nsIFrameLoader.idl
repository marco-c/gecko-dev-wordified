/
*
-
*
-
Mode
:
IDL
;
tab
-
width
:
2
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
nsISupports
.
idl
"
interface
nsFrameLoader
;
interface
nsIDocShell
;
interface
nsIURI
;
interface
nsIFrame
;
interface
nsIMessageSender
;
interface
nsIVariant
;
interface
nsIDOMElement
;
interface
nsITabParent
;
interface
nsILoadContext
;
interface
nsIPrintSettings
;
interface
nsIWebProgressListener
;
[
builtinclass
uuid
(
1645af04
-
1bc7
-
4363
-
8f2c
-
eb9679220ab1
)
]
interface
nsIFrameLoader
:
nsISupports
{
/
*
*
*
Start
loading
the
frame
.
This
method
figures
out
what
to
load
*
from
the
owner
content
in
the
frame
loader
.
*
/
void
loadFrame
(
in
boolean
originalSrc
)
;
/
*
*
*
Loads
the
specified
URI
in
this
frame
.
Behaves
identically
to
loadFrame
*
except
that
this
method
allows
specifying
the
URI
to
load
.
*
/
void
loadURI
(
in
nsIURI
aURI
in
boolean
originalSrc
)
;
/
*
*
*
Destroy
the
frame
loader
and
everything
inside
it
.
This
will
*
clear
the
weak
owner
content
reference
.
*
/
void
destroy
(
)
;
/
*
*
*
The
default
event
mode
automatically
forwards
the
events
*
handled
in
EventStateManager
:
:
HandleCrossProcessEvent
to
*
the
child
content
process
when
these
events
are
targeted
to
*
the
remote
browser
element
.
*
*
Used
primarly
for
input
events
(
mouse
keyboard
)
*
/
const
unsigned
long
EVENT_MODE_NORMAL_DISPATCH
=
0x00000000
;
/
*
*
*
With
this
event
mode
it
'
s
the
application
'
s
responsability
to
*
convert
and
forward
events
to
the
content
process
*
/
const
unsigned
long
EVENT_MODE_DONT_FORWARD_TO_CHILD
=
0x00000001
;
attribute
unsigned
long
eventMode
;
/
*
*
*
Find
out
whether
the
owner
content
really
is
a
mozbrowser
.
<
xul
:
browser
>
*
is
not
considered
to
be
a
mozbrowser
frame
.
*
/
readonly
attribute
boolean
ownerIsMozBrowserFrame
;
}
;
%
{
C
+
+
class
nsFrameLoader
;
%
}
native
alreadyAddRefed_nsFrameLoader
(
already_AddRefed
<
nsFrameLoader
>
)
;
[
scriptable
uuid
(
adc1b3ba
-
8deb
-
4943
-
8045
-
e6de0044f2ce
)
]
interface
nsIFrameLoaderOwner
:
nsISupports
{
/
*
*
*
The
frame
loader
owned
by
this
nsIFrameLoaderOwner
*
/
[
binaryname
(
FrameLoaderXPCOM
)
]
readonly
attribute
nsIFrameLoader
frameLoader
;
[
noscript
notxpcom
]
alreadyAddRefed_nsFrameLoader
GetFrameLoader
(
)
;
/
*
*
*
This
method
is
used
internally
by
SwapFrameLoaders
to
set
the
frame
loader
*
on
the
target
nsFrameLoader
.
*
*
Avoid
using
this
method
outside
of
that
context
and
instead
prefer
using
*
SwapFrameLoaders
.
*
/
[
noscript
notxpcom
]
void
internalSetFrameLoader
(
in
nsIFrameLoader
aNewFrameLoader
)
;
}
;
