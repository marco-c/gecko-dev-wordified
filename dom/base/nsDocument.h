/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
*
*
Base
class
for
all
our
document
implementations
.
*
/
#
ifndef
nsDocument_h___
#
define
nsDocument_h___
#
include
"
nsIDocument
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsWeakPtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsIdentifierMapEntry
.
h
"
#
include
"
nsIDOMDocument
.
h
"
#
include
"
nsStubDocumentObserver
.
h
"
#
include
"
nsIScriptGlobalObject
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsIParser
.
h
"
#
include
"
nsBindingManager
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsJSThingHashtable
.
h
"
#
include
"
nsIScriptObjectPrincipal
.
h
"
#
include
"
nsIRadioGroupContainer
.
h
"
#
include
"
nsILayoutHistoryState
.
h
"
#
include
"
nsIRequest
.
h
"
#
include
"
nsILoadGroup
.
h
"
#
include
"
nsTObserverArray
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsContentList
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
mozilla
/
StyleSetHandle
.
h
"
#
include
"
PLDHashTable
.
h
"
#
include
"
nsDOMAttributeMap
.
h
"
#
include
"
imgIRequest
.
h
"
#
include
"
mozilla
/
EventListenerManager
.
h
"
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
PendingAnimationTracker
.
h
"
#
include
"
mozilla
/
dom
/
BoxObject
.
h
"
#
include
"
mozilla
/
dom
/
DOMImplementation
.
h
"
#
include
"
mozilla
/
dom
/
ScriptLoader
.
h
"
#
include
"
mozilla
/
dom
/
StyleSheetList
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
CustomElementRegistry
.
h
"
#
include
"
mozilla
/
dom
/
Performance
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsIURIClassifier
.
h
"
#
define
XML_DECLARATION_BITS_DECLARATION_EXISTS
(
1
<
<
0
)
#
define
XML_DECLARATION_BITS_ENCODING_EXISTS
(
1
<
<
1
)
#
define
XML_DECLARATION_BITS_STANDALONE_EXISTS
(
1
<
<
2
)
#
define
XML_DECLARATION_BITS_STANDALONE_YES
(
1
<
<
3
)
class
nsDOMStyleSheetSetList
;
class
nsDocument
;
class
nsIRadioVisitor
;
class
nsIFormControl
;
struct
nsRadioGroupStruct
;
class
nsOnloadBlocker
;
class
nsUnblockOnloadEvent
;
class
nsDOMNavigationTiming
;
class
nsWindowSizes
;
class
nsHtml5TreeOpExecutor
;
class
nsDocumentOnStack
;
class
nsISecurityConsoleMessage
;
namespace
mozilla
{
class
EventChainPreVisitor
;
namespace
dom
{
class
ImageTracker
;
struct
LifecycleCallbacks
;
class
CallbackFunction
;
class
DOMIntersectionObserver
;
class
Performance
;
struct
FullscreenRequest
:
public
LinkedListElement
<
FullscreenRequest
>
{
explicit
FullscreenRequest
(
Element
*
aElement
)
;
FullscreenRequest
(
const
FullscreenRequest
&
)
=
delete
;
~
FullscreenRequest
(
)
;
Element
*
GetElement
(
)
const
{
return
mElement
;
}
nsIDocument
*
GetDocument
(
)
const
{
return
mDocument
;
}
private
:
RefPtr
<
Element
>
mElement
;
RefPtr
<
nsIDocument
>
mDocument
;
public
:
/
/
This
value
should
be
true
if
the
fullscreen
request
is
/
/
originated
from
chrome
code
.
bool
mIsCallerChrome
=
false
;
/
/
This
value
denotes
whether
we
should
trigger
a
NewOrigin
event
if
/
/
requesting
fullscreen
in
its
document
causes
the
origin
which
is
/
/
fullscreen
to
change
.
We
may
want
*
not
*
to
trigger
that
event
if
/
/
we
'
re
calling
RequestFullScreen
(
)
as
part
of
a
continuation
of
a
/
/
request
in
a
subdocument
in
different
process
whereupon
the
caller
/
/
need
to
send
some
notification
itself
with
the
real
origin
.
bool
mShouldNotifyNewOrigin
=
true
;
}
;
}
/
/
namespace
dom
}
/
/
namespace
mozilla
class
nsOnloadBlocker
final
:
public
nsIRequest
{
public
:
nsOnloadBlocker
(
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSIREQUEST
private
:
~
nsOnloadBlocker
(
)
{
}
}
;
/
/
Base
class
for
our
document
implementations
.
class
nsDocument
:
public
nsIDocument
public
nsIDOMDocument
public
nsSupportsWeakReference
public
nsIScriptObjectPrincipal
public
nsIRadioGroupContainer
public
nsIApplicationCacheContainer
public
nsStubMutationObserver
{
friend
class
nsIDocument
;
public
:
typedef
mozilla
:
:
dom
:
:
Element
Element
;
typedef
mozilla
:
:
net
:
:
ReferrerPolicy
ReferrerPolicy
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_ADDSIZEOFEXCLUDINGTHIS
virtual
void
Reset
(
nsIChannel
*
aChannel
nsILoadGroup
*
aLoadGroup
)
override
;
virtual
void
ResetToURI
(
nsIURI
*
aURI
nsILoadGroup
*
aLoadGroup
nsIPrincipal
*
aPrincipal
)
override
;
already_AddRefed
<
nsIPrincipal
>
MaybeDowngradePrincipal
(
nsIPrincipal
*
aPrincipal
)
;
/
/
StartDocumentLoad
is
pure
virtual
so
that
subclasses
must
override
it
.
/
/
The
nsDocument
StartDocumentLoad
does
some
setup
but
does
NOT
set
/
/
*
aDocListener
;
this
is
the
job
of
subclasses
.
virtual
nsresult
StartDocumentLoad
(
const
char
*
aCommand
nsIChannel
*
aChannel
nsILoadGroup
*
aLoadGroup
nsISupports
*
aContainer
nsIStreamListener
*
*
aDocListener
bool
aReset
=
true
nsIContentSink
*
aContentSink
=
nullptr
)
override
=
0
;
virtual
void
StopDocumentLoad
(
)
override
;
/
*
*
*
Set
the
Content
-
Type
of
this
document
.
*
/
virtual
void
SetContentType
(
const
nsAString
&
aContentType
)
override
;
/
*
*
*
Set
the
document
'
s
character
encoding
.
This
will
*
trigger
a
startDocumentLoad
if
necessary
to
answer
the
question
.
*
/
virtual
void
SetDocumentCharacterSet
(
NotNull
<
const
Encoding
*
>
aEncoding
)
override
;
/
*
*
*
Create
a
new
presentation
shell
that
will
use
aContext
for
*
its
presentation
context
(
presentation
contexts
<
b
>
must
not
<
/
b
>
be
*
shared
among
multiple
presentation
shells
)
.
*
/
already_AddRefed
<
nsIPresShell
>
CreateShell
(
nsPresContext
*
aContext
nsViewManager
*
aViewManager
mozilla
:
:
StyleSetHandle
aStyleSet
)
final
;
virtual
void
DeleteShell
(
)
override
;
static
bool
CallerIsTrustedAboutPage
(
JSContext
*
aCx
JSObject
*
aObject
)
;
static
bool
IsElementAnimateEnabled
(
JSContext
*
aCx
JSObject
*
aObject
)
;
static
bool
IsWebAnimationsEnabled
(
JSContext
*
aCx
JSObject
*
aObject
)
;
static
bool
IsWebAnimationsEnabled
(
mozilla
:
:
dom
:
:
CallerType
aCallerType
)
;
virtual
nsIChannel
*
GetChannel
(
)
const
override
{
return
mChannel
;
}
virtual
nsIChannel
*
GetFailedChannel
(
)
const
override
{
return
mFailedChannel
;
}
virtual
void
SetFailedChannel
(
nsIChannel
*
aChannel
)
override
{
mFailedChannel
=
aChannel
;
}
virtual
void
SetScriptGlobalObject
(
nsIScriptGlobalObject
*
aGlobalObject
)
override
;
virtual
void
EndUpdate
(
nsUpdateType
aUpdateType
)
override
;
virtual
void
BeginLoad
(
)
override
;
virtual
void
EndLoad
(
)
override
;
virtual
void
SetXMLDeclaration
(
const
char16_t
*
aVersion
const
char16_t
*
aEncoding
const
int32_t
aStandalone
)
override
;
virtual
void
GetXMLDeclaration
(
nsAString
&
aVersion
nsAString
&
aEncoding
nsAString
&
Standalone
)
override
;
virtual
void
OnPageShow
(
bool
aPersisted
mozilla
:
:
dom
:
:
EventTarget
*
aDispatchStartTarget
)
override
;
virtual
void
OnPageHide
(
bool
aPersisted
mozilla
:
:
dom
:
:
EventTarget
*
aDispatchStartTarget
)
override
;
virtual
void
WillDispatchMutationEvent
(
nsINode
*
aTarget
)
override
;
virtual
void
MutationEventDispatched
(
nsINode
*
aTarget
)
override
;
/
/
nsIRadioGroupContainer
NS_IMETHOD
WalkRadioGroup
(
const
nsAString
&
aName
nsIRadioVisitor
*
aVisitor
bool
aFlushContent
)
override
;
virtual
void
SetCurrentRadioButton
(
const
nsAString
&
aName
mozilla
:
:
dom
:
:
HTMLInputElement
*
aRadio
)
override
;
virtual
mozilla
:
:
dom
:
:
HTMLInputElement
*
GetCurrentRadioButton
(
const
nsAString
&
aName
)
override
;
NS_IMETHOD
GetNextRadioButton
(
const
nsAString
&
aName
const
bool
aPrevious
mozilla
:
:
dom
:
:
HTMLInputElement
*
aFocusedRadio
mozilla
:
:
dom
:
:
HTMLInputElement
*
*
aRadioOut
)
override
;
virtual
void
AddToRadioGroup
(
const
nsAString
&
aName
mozilla
:
:
dom
:
:
HTMLInputElement
*
aRadio
)
override
;
virtual
void
RemoveFromRadioGroup
(
const
nsAString
&
aName
mozilla
:
:
dom
:
:
HTMLInputElement
*
aRadio
)
override
;
virtual
uint32_t
GetRequiredRadioCount
(
const
nsAString
&
aName
)
const
override
;
virtual
void
RadioRequiredWillChange
(
const
nsAString
&
aName
bool
aRequiredAdded
)
override
;
virtual
bool
GetValueMissingState
(
const
nsAString
&
aName
)
const
override
;
virtual
void
SetValueMissingState
(
const
nsAString
&
aName
bool
aValue
)
override
;
/
/
for
radio
group
nsRadioGroupStruct
*
GetRadioGroup
(
const
nsAString
&
aName
)
const
;
nsRadioGroupStruct
*
GetOrCreateRadioGroup
(
const
nsAString
&
aName
)
;
virtual
nsViewportInfo
GetViewportInfo
(
const
mozilla
:
:
ScreenIntSize
&
aDisplaySize
)
override
;
enum
class
UseCounterReportKind
{
/
/
Flush
the
document
'
s
use
counters
only
;
the
use
counters
for
any
/
/
external
resource
documents
will
be
flushed
when
the
external
/
/
resource
documents
themselves
are
destroyed
.
eDefault
/
/
Flush
use
counters
for
the
document
and
for
its
external
resource
/
/
documents
.
(
Should
only
be
necessary
for
tests
where
we
need
/
/
flushing
to
happen
synchronously
and
deterministically
.
)
eIncludeExternalResources
}
;
void
ReportUseCounters
(
UseCounterReportKind
aKind
=
UseCounterReportKind
:
:
eDefault
)
;
bool
IsSynthesized
(
)
;
/
/
Check
whether
shadow
DOM
is
enabled
for
the
global
of
aObject
.
static
bool
IsShadowDOMEnabled
(
JSContext
*
aCx
JSObject
*
aObject
)
;
/
/
Check
whether
shadow
DOM
is
enabled
for
the
document
this
node
belongs
to
.
static
bool
IsShadowDOMEnabled
(
const
nsINode
*
aNode
)
;
private
:
void
SendToConsole
(
nsCOMArray
<
nsISecurityConsoleMessage
>
&
aMessages
)
;
public
:
/
/
nsIDOMDocument
NS_DECL_NSIDOMDOCUMENT
using
mozilla
:
:
dom
:
:
DocumentOrShadowRoot
:
:
GetElementById
;
using
mozilla
:
:
dom
:
:
DocumentOrShadowRoot
:
:
GetElementsByTagName
;
using
mozilla
:
:
dom
:
:
DocumentOrShadowRoot
:
:
GetElementsByTagNameNS
;
using
mozilla
:
:
dom
:
:
DocumentOrShadowRoot
:
:
GetElementsByClassName
;
/
/
nsIDOMEventTarget
virtual
nsresult
GetEventTargetParent
(
mozilla
:
:
EventChainPreVisitor
&
aVisitor
)
override
;
virtual
mozilla
:
:
EventListenerManager
*
GetOrCreateListenerManager
(
)
override
;
virtual
mozilla
:
:
EventListenerManager
*
GetExistingListenerManager
(
)
const
override
;
/
/
nsIScriptObjectPrincipal
virtual
nsIPrincipal
*
GetPrincipal
(
)
override
;
/
/
nsIApplicationCacheContainer
NS_DECL_NSIAPPLICATIONCACHECONTAINER
virtual
nsresult
Init
(
)
;
virtual
already_AddRefed
<
Element
>
CreateElem
(
const
nsAString
&
aName
nsAtom
*
aPrefix
int32_t
aNamespaceID
const
nsAString
*
aIs
=
nullptr
)
override
;
virtual
void
Sanitize
(
)
override
;
virtual
bool
CanSavePresentation
(
nsIRequest
*
aNewRequest
)
override
;
virtual
void
Destroy
(
)
override
;
virtual
void
RemovedFromDocShell
(
)
override
;
virtual
already_AddRefed
<
nsILayoutHistoryState
>
GetLayoutHistoryState
(
)
const
override
;
virtual
void
BlockOnload
(
)
override
;
virtual
void
UnblockOnload
(
bool
aFireSync
)
override
;
virtual
nsresult
NodesFromRectHelper
(
float
aX
float
aY
float
aTopSize
float
aRightSize
float
aBottomSize
float
aLeftSize
bool
aIgnoreRootScrollFrame
bool
aFlushLayout
nsIDOMNodeList
*
*
aReturn
)
override
;
virtual
void
FlushSkinBindings
(
)
override
;
virtual
nsresult
InitializeFrameLoader
(
nsFrameLoader
*
aLoader
)
override
;
virtual
nsresult
FinalizeFrameLoader
(
nsFrameLoader
*
aLoader
nsIRunnable
*
aFinalizer
)
override
;
virtual
void
TryCancelFrameLoaderInitialization
(
nsIDocShell
*
aShell
)
override
;
NS_DECL_CYCLE_COLLECTION_SKIPPABLE_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
nsDocument
nsIDocument
)
void
SetLoadedAsData
(
bool
aLoadedAsData
)
{
mLoadedAsData
=
aLoadedAsData
;
}
void
SetLoadedAsInteractiveData
(
bool
aLoadedAsInteractiveData
)
{
mLoadedAsInteractiveData
=
aLoadedAsInteractiveData
;
}
nsresult
CloneDocHelper
(
nsDocument
*
clone
bool
aPreallocateChildren
)
const
;
void
MaybeInitializeFinalizeFrameLoaders
(
)
;
void
MaybeEndOutermostXBLUpdate
(
)
;
/
/
Only
BlockOnload
should
call
this
!
void
AsyncBlockOnload
(
)
;
/
/
Returns
the
size
of
the
mBlockedTrackingNodes
array
.
(
nsIDocument
.
h
)
/
/
/
/
This
array
contains
nodes
that
have
been
blocked
to
prevent
/
/
user
tracking
.
They
most
likely
have
had
their
nsIChannel
/
/
canceled
by
the
URL
classifier
(
Safebrowsing
)
.
/
/
/
/
A
script
can
subsequently
use
GetBlockedTrackingNodes
(
)
/
/
to
get
a
list
of
references
to
these
nodes
.
/
/
/
/
Note
:
/
/
This
expresses
how
many
tracking
nodes
have
been
blocked
for
this
/
/
document
since
its
beginning
not
how
many
of
them
are
still
around
/
/
in
the
DOM
tree
.
Weak
references
to
blocked
nodes
are
added
in
the
/
/
mBlockedTrackingNodesArray
but
they
are
not
removed
when
those
nodes
/
/
are
removed
from
the
tree
or
even
garbage
collected
.
long
BlockedTrackingNodeCount
(
)
const
;
/
/
/
/
Returns
strong
references
to
mBlockedTrackingNodes
.
(
nsIDocument
.
h
)
/
/
/
/
This
array
contains
nodes
that
have
been
blocked
to
prevent
/
/
user
tracking
.
They
most
likely
have
had
their
nsIChannel
/
/
canceled
by
the
URL
classifier
(
Safebrowsing
)
.
/
/
already_AddRefed
<
nsSimpleContentList
>
BlockedTrackingNodes
(
)
const
;
static
void
UnlockPointer
(
nsIDocument
*
aDoc
=
nullptr
)
;
virtual
void
DocAddSizeOfExcludingThis
(
nsWindowSizes
&
aWindowSizes
)
const
override
;
/
/
DocAddSizeOfIncludingThis
is
inherited
from
nsIDocument
.
virtual
nsIDOMNode
*
AsDOMNode
(
)
override
{
return
this
;
}
virtual
void
UnblockDOMContentLoaded
(
)
override
;
protected
:
friend
class
nsNodeUtils
;
void
DispatchContentLoadedEvents
(
)
;
void
RetrieveRelevantHeaders
(
nsIChannel
*
aChannel
)
;
void
TryChannelCharset
(
nsIChannel
*
aChannel
int32_t
&
aCharsetSource
NotNull
<
const
Encoding
*
>
&
aEncoding
nsHtml5TreeOpExecutor
*
aExecutor
)
;
nsIContent
*
GetFirstBaseNodeWithHref
(
)
;
nsresult
SetFirstBaseNodeWithHref
(
nsIContent
*
node
)
;
public
:
bool
ContainsEMEContent
(
)
;
bool
ContainsMSEContent
(
)
;
protected
:
void
DispatchPageTransition
(
mozilla
:
:
dom
:
:
EventTarget
*
aDispatchTarget
const
nsAString
&
aType
bool
aPersisted
)
;
void
UpdateScreenOrientation
(
)
;
#
define
NS_DOCUMENT_NOTIFY_OBSERVERS
(
func_
params_
)
do
{
\
NS_OBSERVER_ARRAY_NOTIFY_XPCOM_OBSERVERS
(
mObservers
nsIDocumentObserver
\
func_
params_
)
;
\
/
*
FIXME
(
emilio
)
:
Apparently
we
can
keep
observing
from
the
BFCache
?
That
\
looks
bogus
.
*
/
\
if
(
nsIPresShell
*
shell
=
GetObservingShell
(
)
)
{
\
shell
-
>
func_
params_
;
\
}
\
}
while
(
0
)
#
ifdef
DEBUG
void
VerifyRootContentState
(
)
;
#
endif
explicit
nsDocument
(
const
char
*
aContentType
)
;
virtual
~
nsDocument
(
)
;
void
EnsureOnloadBlocker
(
)
;
public
:
RefPtr
<
mozilla
:
:
EventListenerManager
>
mListenerManager
;
nsClassHashtable
<
nsStringHashKey
nsRadioGroupStruct
>
mRadioGroups
;
bool
mDelayFrameLoaderInitialization
:
1
;
bool
mSynchronousDOMContentLoaded
:
1
;
/
/
Parser
aborted
.
True
if
the
parser
of
this
document
was
forcibly
/
/
terminated
instead
of
letting
it
finish
at
its
own
pace
.
bool
mParserAborted
:
1
;
friend
class
nsCallRequestFullScreen
;
/
/
Whether
we
have
reported
use
counters
for
this
document
with
Telemetry
yet
.
/
/
Normally
this
is
only
done
at
document
destruction
time
but
for
image
/
/
documents
(
SVG
documents
)
that
are
not
guaranteed
to
be
destroyed
we
/
/
report
use
counters
when
the
image
cache
no
longer
has
any
imgRequestProxys
/
/
pointing
to
them
.
We
track
whether
we
ever
reported
use
counters
so
/
/
that
we
only
report
them
once
for
the
document
.
bool
mReportedUseCounters
:
1
;
uint8_t
mXMLDeclarationBits
;
/
/
The
application
cache
that
this
document
is
associated
with
if
/
/
any
.
This
can
change
during
the
lifetime
of
the
document
.
nsCOMPtr
<
nsIApplicationCache
>
mApplicationCache
;
nsCOMPtr
<
nsIContent
>
mFirstBaseNodeWithHref
;
private
:
friend
class
nsUnblockOnloadEvent
;
void
PostUnblockOnloadEvent
(
)
;
void
DoUnblockOnload
(
)
;
nsresult
InitCSP
(
nsIChannel
*
aChannel
)
;
void
ClearAllBoxObjects
(
)
;
/
/
Returns
true
if
the
scheme
for
the
url
for
this
document
is
"
about
"
bool
IsAboutPage
(
)
const
;
/
/
These
are
not
implemented
and
not
supported
.
nsDocument
(
const
nsDocument
&
aOther
)
;
nsDocument
&
operator
=
(
const
nsDocument
&
aOther
)
;
/
/
The
layout
history
state
that
should
be
used
by
nodes
in
this
/
/
document
.
We
only
actually
store
a
pointer
to
it
when
:
/
/
1
)
We
have
no
script
global
object
.
/
/
2
)
We
haven
'
t
had
Destroy
(
)
called
on
us
yet
.
nsCOMPtr
<
nsILayoutHistoryState
>
mLayoutHistoryState
;
/
/
Currently
active
onload
blockers
uint32_t
mOnloadBlockCount
;
/
/
Onload
blockers
which
haven
'
t
been
activated
yet
uint32_t
mAsyncOnloadBlockCount
;
nsCOMPtr
<
nsIRequest
>
mOnloadBlocker
;
nsTArray
<
RefPtr
<
nsFrameLoader
>
>
mInitializableFrameLoaders
;
nsTArray
<
nsCOMPtr
<
nsIRunnable
>
>
mFrameLoaderFinalizers
;
RefPtr
<
nsRunnableMethod
<
nsDocument
>
>
mFrameLoaderRunner
;
nsCOMPtr
<
nsIRunnable
>
mMaybeEndOutermostXBLUpdateRunner
;
/
/
These
member
variables
cache
information
about
the
viewport
so
we
don
'
t
have
to
/
/
recalculate
it
each
time
.
bool
mValidWidth
mValidHeight
;
mozilla
:
:
LayoutDeviceToScreenScale
mScaleMinFloat
;
mozilla
:
:
LayoutDeviceToScreenScale
mScaleMaxFloat
;
mozilla
:
:
LayoutDeviceToScreenScale
mScaleFloat
;
mozilla
:
:
CSSToLayoutDeviceScale
mPixelRatio
;
bool
mAutoSize
mAllowZoom
mAllowDoubleTapZoom
mValidScaleFloat
mValidMaxScale
mScaleStrEmpty
mWidthStrEmpty
;
mozilla
:
:
CSSSize
mViewportSize
;
/
/
Set
to
true
when
the
document
is
possibly
controlled
by
the
ServiceWorker
.
/
/
Used
to
prevent
multiple
requests
to
ServiceWorkerManager
.
bool
mMaybeServiceWorkerControlled
;
#
ifdef
DEBUG
public
:
bool
mWillReparent
;
#
endif
}
;
class
nsDocumentOnStack
{
public
:
explicit
nsDocumentOnStack
(
nsIDocument
*
aDoc
)
:
mDoc
(
aDoc
)
{
mDoc
-
>
IncreaseStackRefCnt
(
)
;
}
~
nsDocumentOnStack
(
)
{
mDoc
-
>
DecreaseStackRefCnt
(
)
;
}
private
:
nsIDocument
*
mDoc
;
}
;
#
endif
/
*
nsDocument_h___
*
/
