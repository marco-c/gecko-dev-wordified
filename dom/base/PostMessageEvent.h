/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
mozilla_dom_PostMessageEvent_h
#
define
mozilla_dom_PostMessageEvent_h
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
StructuredCloneHolder
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
class
nsGlobalWindowOuter
;
class
nsGlobalWindowInner
;
class
nsIDocument
;
class
nsIPrincipal
;
namespace
mozilla
{
namespace
dom
{
class
BrowsingContext
;
/
*
*
*
Class
used
to
represent
events
generated
by
calls
to
Window
.
postMessage
*
which
asynchronously
creates
and
dispatches
events
.
*
/
class
PostMessageEvent
final
:
public
Runnable
{
public
:
NS_DECL_NSIRUNNABLE
PostMessageEvent
(
BrowsingContext
*
aSource
const
nsAString
&
aCallerOrigin
nsGlobalWindowOuter
*
aTargetWindow
nsIPrincipal
*
aProvidedPrincipal
uint64_t
aCallerWindowID
nsIURI
*
aCallerDocumentURI
)
;
void
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
JS
:
:
Handle
<
JS
:
:
Value
>
aTransfer
ErrorResult
&
aError
)
{
mHolder
.
Write
(
aCx
aMessage
aTransfer
JS
:
:
CloneDataPolicy
(
)
aError
)
;
}
private
:
~
PostMessageEvent
(
)
;
void
Dispatch
(
nsGlobalWindowInner
*
aTargetWindow
Event
*
aEvent
)
;
void
DispatchError
(
JSContext
*
aCx
nsGlobalWindowInner
*
aTargetWindow
mozilla
:
:
dom
:
:
EventTarget
*
aEventTarget
)
;
RefPtr
<
BrowsingContext
>
mSource
;
nsString
mCallerOrigin
;
RefPtr
<
nsGlobalWindowOuter
>
mTargetWindow
;
nsCOMPtr
<
nsIPrincipal
>
mProvidedPrincipal
;
StructuredCloneHolder
mHolder
;
uint64_t
mCallerWindowID
;
nsCOMPtr
<
nsIURI
>
mCallerDocumentURI
;
}
;
}
/
/
namespace
dom
}
/
/
namespace
mozilla
#
endif
/
/
mozilla_dom_PostMessageEvent_h
