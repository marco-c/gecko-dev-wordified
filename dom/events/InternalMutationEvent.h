/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
mozilla_MutationEvent_h__
#
define
mozilla_MutationEvent_h__
#
include
"
mozilla
/
BasicEvents
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsINode
.
h
"
namespace
mozilla
{
class
InternalMutationEvent
:
public
WidgetEvent
{
public
:
virtual
InternalMutationEvent
*
AsMutationEvent
(
)
override
{
return
this
;
}
InternalMutationEvent
(
bool
aIsTrusted
EventMessage
aMessage
const
WidgetEventTime
*
aTime
=
nullptr
)
:
WidgetEvent
(
aIsTrusted
aMessage
eMutationEventClass
aTime
)
mAttrChange
(
0
)
{
mFlags
.
mCancelable
=
false
;
}
virtual
WidgetEvent
*
Duplicate
(
)
const
override
{
MOZ_ASSERT
(
mClass
=
=
eMutationEventClass
"
Duplicate
(
)
must
be
overridden
by
sub
class
"
)
;
InternalMutationEvent
*
result
=
new
InternalMutationEvent
(
false
mMessage
this
)
;
result
-
>
AssignMutationEventData
(
*
this
true
)
;
result
-
>
mFlags
=
mFlags
;
return
result
;
}
nsCOMPtr
<
nsINode
>
mRelatedNode
;
RefPtr
<
nsAtom
>
mAttrName
;
RefPtr
<
nsAtom
>
mPrevAttrValue
;
RefPtr
<
nsAtom
>
mNewAttrValue
;
unsigned
short
mAttrChange
;
void
AssignMutationEventData
(
const
InternalMutationEvent
&
aEvent
bool
aCopyTargets
)
{
AssignEventData
(
aEvent
aCopyTargets
)
;
mRelatedNode
=
aEvent
.
mRelatedNode
;
mAttrName
=
aEvent
.
mAttrName
;
mPrevAttrValue
=
aEvent
.
mPrevAttrValue
;
mNewAttrValue
=
aEvent
.
mNewAttrValue
;
mAttrChange
=
aEvent
.
mAttrChange
;
}
}
;
}
/
/
namespace
mozilla
#
endif
/
/
mozilla_MutationEvent_h__
