/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
mozilla_dom_ServiceWorkerRegistration_h
#
define
mozilla_dom_ServiceWorkerRegistration_h
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerBinding
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerCommon
.
h
"
class
nsPIDOMWindow
;
namespace
mozilla
{
namespace
dom
{
class
Promise
;
class
PushManager
;
namespace
workers
{
class
ServiceWorker
;
}
/
/
This
class
exists
solely
so
that
we
can
satisfy
some
WebIDL
Func
=
attribute
/
/
constraints
.
Func
=
converts
the
function
name
to
a
header
file
to
include
in
/
/
this
case
"
ServiceWorkerRegistration
.
h
"
.
class
ServiceWorkerRegistration
final
{
public
:
/
/
Something
that
we
can
feed
into
the
Func
webidl
property
to
ensure
that
/
/
SetScope
is
never
exposed
to
the
user
.
static
bool
WebPushMethodHider
(
JSContext
*
unusedContext
JSObject
*
unusedObject
)
{
return
false
;
}
}
;
class
ServiceWorkerRegistrationBase
:
public
DOMEventTargetHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
ServiceWorkerRegistrationBase
DOMEventTargetHelper
)
IMPL_EVENT_HANDLER
(
updatefound
)
ServiceWorkerRegistrationBase
(
nsPIDOMWindow
*
aWindow
const
nsAString
&
aScope
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
=
0
;
virtual
already_AddRefed
<
workers
:
:
ServiceWorker
>
GetInstalling
(
)
=
0
;
virtual
already_AddRefed
<
workers
:
:
ServiceWorker
>
GetWaiting
(
)
=
0
;
virtual
already_AddRefed
<
workers
:
:
ServiceWorker
>
GetActive
(
)
=
0
;
void
GetScope
(
nsAString
&
aScope
)
const
{
aScope
=
mScope
;
}
/
/
Useful
methods
for
ServiceWorkerManager
:
virtual
void
InvalidateWorkerReference
(
WhichServiceWorker
aWhichOnes
)
=
0
;
/
/
DOMEventTargethelper
virtual
void
DisconnectFromOwner
(
)
override
;
protected
:
virtual
~
ServiceWorkerRegistrationBase
(
)
;
const
nsString
mScope
;
private
:
void
StartListeningForEvents
(
)
;
void
StopListeningForEvents
(
)
;
bool
mListeningForEvents
;
nsCOMPtr
<
nsISupports
>
mCCDummy
;
}
;
class
ServiceWorkerRegistrationMainThread
final
:
public
ServiceWorkerRegistrationBase
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
ServiceWorkerRegistrationMainThread
ServiceWorkerRegistrationBase
)
ServiceWorkerRegistrationMainThread
(
nsPIDOMWindow
*
aWindow
const
nsAString
&
aScope
)
:
ServiceWorkerRegistrationBase
(
aWindow
aScope
)
{
}
void
Update
(
)
;
already_AddRefed
<
Promise
>
Unregister
(
ErrorResult
&
aRv
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
already_AddRefed
<
workers
:
:
ServiceWorker
>
GetInstalling
(
)
override
;
already_AddRefed
<
workers
:
:
ServiceWorker
>
GetWaiting
(
)
override
;
already_AddRefed
<
workers
:
:
ServiceWorker
>
GetActive
(
)
override
;
already_AddRefed
<
PushManager
>
GetPushManager
(
ErrorResult
&
aRv
)
;
void
InvalidateWorkerReference
(
WhichServiceWorker
aWhichOnes
)
override
;
private
:
~
ServiceWorkerRegistrationMainThread
(
)
{
}
already_AddRefed
<
workers
:
:
ServiceWorker
>
GetWorkerReference
(
WhichServiceWorker
aWhichOne
)
;
/
/
The
following
properties
are
cached
here
to
ensure
JS
equality
is
satisfied
/
/
instead
of
acquiring
a
new
worker
instance
from
the
ServiceWorkerManager
/
/
for
every
access
.
A
null
value
is
considered
a
cache
miss
.
/
/
These
three
may
change
to
a
new
worker
at
any
time
.
nsRefPtr
<
workers
:
:
ServiceWorker
>
mInstallingWorker
;
nsRefPtr
<
workers
:
:
ServiceWorker
>
mWaitingWorker
;
nsRefPtr
<
workers
:
:
ServiceWorker
>
mActiveWorker
;
#
ifndef
MOZ_SIMPLEPUSH
nsRefPtr
<
PushManager
>
mPushManager
;
#
endif
}
;
class
ServiceWorkerRegistrationWorkerThread
final
:
public
ServiceWorkerRegistrationBase
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
ServiceWorkerRegistrationWorkerThread
ServiceWorkerRegistrationBase
)
ServiceWorkerRegistrationWorkerThread
(
nsPIDOMWindow
*
aWindow
const
nsAString
&
aScope
)
:
ServiceWorkerRegistrationBase
(
aWindow
aScope
)
{
}
void
Update
(
)
{
MOZ_CRASH
(
"
FIXME
"
)
;
}
already_AddRefed
<
Promise
>
Unregister
(
ErrorResult
&
aRv
)
{
MOZ_CRASH
(
"
FIXME
"
)
;
return
nullptr
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
already_AddRefed
<
workers
:
:
ServiceWorker
>
GetInstalling
(
)
override
;
already_AddRefed
<
workers
:
:
ServiceWorker
>
GetWaiting
(
)
override
;
already_AddRefed
<
workers
:
:
ServiceWorker
>
GetActive
(
)
override
;
void
InvalidateWorkerReference
(
WhichServiceWorker
aWhichOnes
)
override
;
private
:
~
ServiceWorkerRegistrationWorkerThread
(
)
{
}
nsCOMPtr
<
nsISupports
>
mCCDummyWorkerThread
;
}
;
}
/
/
namespace
dom
}
/
/
namespace
mozilla
#
endif
/
*
mozilla_dom_ServiceWorkerRegistration_h
*
/
