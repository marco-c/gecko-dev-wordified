'
use
strict
'
;
const
{
getCryptoParamsFromHeaders
PushCrypto
}
=
Cu
.
import
(
'
resource
:
/
/
gre
/
modules
/
PushCrypto
.
jsm
'
{
}
)
;
const
REJECT_PADDING
=
{
padding
:
'
reject
'
}
;
function
run_test
(
)
{
run_next_test
(
)
;
}
add_task
(
async
function
test_crypto_getCryptoParamsFromHeaders
(
)
{
/
/
These
headers
should
parse
correctly
.
let
shouldParse
=
[
{
desc
:
'
aesgcm
with
multiple
keys
'
headers
:
{
encoding
:
'
aesgcm
'
crypto_key
:
'
keyid
=
p256dh
;
dh
=
Iy1Je2Kv11A
p256ecdsa
=
o2M8QfiEKuI
'
encryption
:
'
keyid
=
p256dh
;
salt
=
upk1yFkp1xI
'
}
params
:
{
senderKey
:
'
Iy1Je2Kv11A
'
salt
:
'
upk1yFkp1xI
'
rs
:
4096
}
}
{
desc
:
'
aesgcm
with
quoted
key
param
'
headers
:
{
encoding
:
'
aesgcm
'
crypto_key
:
'
dh
=
"
byfHbUffc
-
k
"
'
encryption
:
'
salt
=
C11AvAsp6Gc
'
}
params
:
{
senderKey
:
'
byfHbUffc
-
k
'
salt
:
'
C11AvAsp6Gc
'
rs
:
4096
}
}
{
desc
:
'
aesgcm
with
Crypto
-
Key
and
rs
=
24
'
headers
:
{
encoding
:
'
aesgcm
'
crypto_key
:
'
dh
=
"
ybuT4VDz
-
Bg
"
'
encryption
:
'
salt
=
H7U7wcIoIKs
;
rs
=
24
'
}
params
:
{
senderKey
:
'
ybuT4VDz
-
Bg
'
salt
:
'
H7U7wcIoIKs
'
rs
:
24
}
}
{
desc
:
'
aesgcm128
with
Encryption
-
Key
and
rs
=
2
'
headers
:
{
encoding
:
'
aesgcm128
'
encryption_key
:
'
keyid
=
legacy
;
dh
=
LqrDQuVl9lY
'
encryption
:
'
keyid
=
legacy
;
salt
=
YngI8B7YapM
;
rs
=
2
'
}
params
:
{
senderKey
:
'
LqrDQuVl9lY
'
salt
:
'
YngI8B7YapM
'
rs
:
2
}
}
{
desc
:
'
aesgcm128
with
Encryption
-
Key
'
headers
:
{
encoding
:
'
aesgcm128
'
encryption_key
:
'
keyid
=
v2
;
dh
=
VA6wmY1IpiE
'
encryption
:
'
keyid
=
v2
;
salt
=
khtpyXhpDKM
'
}
params
:
{
senderKey
:
'
VA6wmY1IpiE
'
salt
:
'
khtpyXhpDKM
'
rs
:
4096
}
}
]
;
for
(
let
test
of
shouldParse
)
{
let
params
=
getCryptoParamsFromHeaders
(
test
.
headers
)
;
let
senderKey
=
ChromeUtils
.
base64URLDecode
(
test
.
params
.
senderKey
REJECT_PADDING
)
;
let
salt
=
ChromeUtils
.
base64URLDecode
(
test
.
params
.
salt
REJECT_PADDING
)
;
deepEqual
(
new
Uint8Array
(
params
.
senderKey
)
new
Uint8Array
(
senderKey
)
"
Sender
key
should
match
for
"
+
test
.
desc
)
;
deepEqual
(
new
Uint8Array
(
params
.
salt
)
new
Uint8Array
(
salt
)
"
Salt
should
match
for
"
+
test
.
desc
)
;
equal
(
params
.
rs
test
.
params
.
rs
"
Record
size
should
match
for
"
+
test
.
desc
)
;
}
/
/
These
headers
should
be
rejected
.
let
shouldThrow
=
[
{
desc
:
'
aesgcm128
with
Crypto
-
Key
'
headers
:
{
encoding
:
'
aesgcm128
'
crypto_key
:
'
keyid
=
v2
;
dh
=
VA6wmY1IpiE
'
encryption
:
'
keyid
=
v2
;
salt
=
F0Im7RtGgNY
'
}
}
{
desc
:
'
Invalid
encoding
'
headers
:
{
encoding
:
'
nonexistent
'
}
}
{
desc
:
'
Invalid
record
size
'
headers
:
{
encoding
:
'
aesgcm
'
crypto_key
:
'
dh
=
pbmv1QkcEDY
'
encryption
:
'
dh
=
Esao8aTBfIk
;
rs
=
bad
'
}
}
{
desc
:
'
aesgcm
with
Encryption
-
Key
'
headers
:
{
encoding
:
'
aesgcm
'
encryption_key
:
'
dh
=
FplK5KkvUF0
'
encryption
:
'
salt
=
p6YHhFF3BQY
'
}
}
]
;
for
(
let
test
of
shouldThrow
)
{
throws
(
(
)
=
>
getCryptoParamsFromHeaders
(
test
.
headers
)
test
.
desc
)
;
}
}
)
;
add_task
(
function
*
test_crypto_decodeMsg
(
)
{
let
privateKey
=
{
crv
:
'
P
-
256
'
d
:
'
4h23G_KkXC9TvBSK2v0Q7ImpS2YAuRd8hQyN0rFAwBg
'
ext
:
true
key_ops
:
[
'
deriveBits
'
]
kty
:
'
EC
'
x
:
'
sd85ZCbEG6dEkGMCmDyGBIt454Qy
-
Yo
-
1xhbaT2Jlk4
'
y
:
'
vr3cKpQ
-
Sp1kpZ9HipNjUCwSA55yy0uM8N9byE8dmLs
'
}
;
let
publicKey
=
ChromeUtils
.
base64URLDecode
(
'
BLHfOWQmxBunRJBjApg8hgSLeOeEMvmKPtcYW2k9iZZOvr3cKpQ
-
Sp1kpZ9HipNjUCwSA55yy0uM8N9byE8dmLs
'
{
padding
:
"
reject
"
}
)
;
let
expectedSuccesses
=
[
{
desc
:
'
padSize
=
2
rs
=
24
pad
=
0
'
result
:
'
Some
message
'
data
:
'
Oo34w2F9VVnTMFfKtdx48AZWQ9Li9M6DauWJVgXU
'
authSecret
:
'
aTDc6JebzR6eScy2oLo4RQ
'
headers
:
{
crypto_key
:
'
dh
=
BCHFVrflyxibGLlgztLwKelsRZp4gqX3tNfAKFaxAcBhpvYeN1yIUMrxaDKiLh4LNKPtj0BOXGdr
-
IQ
-
QP82Wjo
'
encryption
:
'
salt
=
zCU18Rw3A5aB_Xi
-
vfixmA
;
rs
=
24
'
encoding
:
'
aesgcm
'
}
}
{
desc
:
'
padSize
=
2
rs
=
8
pad
=
16
'
result
:
'
Yet
another
message
'
data
:
'
uEC5B_tR
-
fuQ3delQcrzrDCp40W6ipMZjGZ78USDJ5sMj
-
6bAOVG3AK6JqFl9E6AoWiBYYvMZfwThVxmDnw6RHtVeLKFM5DWgl1EwkOohwH2EhiDD0gM3io
-
d79WKzOPZE9rDWUSv64JstImSfX_ADQfABrvbZkeaWxh53EG59QMOElFJqHue4dMURpsMXg
'
authSecret
:
'
6plwZnSpVUbF7APDXus3UQ
'
headers
:
{
crypto_key
:
'
dh
=
BEaA4gzA3i0JDuirGhiLgymS4hfFX7TNTdEhSk_HBlLpkjgCpjPL5c
-
GL9uBGIfa_fhGNKKFhXz1k9Kyens2ZpQ
'
encryption
:
'
salt
=
ZFhzj0S
-
n29g9P2p4
-
I7tA
;
rs
=
8
'
encoding
:
'
aesgcm
'
}
}
{
desc
:
'
padSize
=
1
rs
=
4096
pad
=
2
'
result
:
'
aesgcm128
encrypted
message
'
data
:
'
ljBJ44NPzJFH9EuyT5xWMU4vpZ90MdAqaq1TC1kOLRoPNHtNFXeJ0GtuSaE
'
headers
:
{
encryption_key
:
'
dh
=
BOmnfg02vNd6RZ7kXWWrCGFF92bI
-
rQ
-
bV0Pku3
-
KmlHwbGv4ejWqgasEdLGle5Rhmp6SKJunZw2l2HxKvrIjfI
'
encryption
:
'
salt
=
btxxUtclbmgcc30b9rT3Bg
;
rs
=
4096
'
encoding
:
'
aesgcm128
'
}
}
{
desc
:
'
padSize
=
2
rs
=
3
pad
=
0
'
result
:
'
Small
record
size
'
data
:
'
oY4e5eDatDVt2fpQylxbPJM
-
3vrfhDasfPc8Q1PWt4tPfMVbz_sDNL_cvr0DXXkdFzS1lxsJsj550USx4MMl01ihjImXCjrw9R5xFgFrCAqJD3GwXA1vzS4T5yvGVbUp3SndMDdT1OCcEofTn7VC6xZ
-
zP8rzSQfDCBBxmPU7OISzr8Z4HyzFCGJeBfqiZ7yUfNlKF1x5UaZ4X6iU_TXx5KlQy_toV1dXZ2eEAMHJUcSdArvB6zRpFdEIxdcHcJyo1BIYgAYTDdAIy__IJVCPY_b2CE5W_6ohlYKB7xDyH8giNuWWXAgBozUfScLUVjPC38yJTpAUi6w6pXgXUWffende5FreQpnMFL1L4G
-
38wsI_
-
ISIOzdO8QIrXHxmtc1S5xzYu8bMqSgCinvCEwdeGFCmighRjj8t1zRWo0D14rHbQLPR_b1P5SvEeJTtS9Nm3iibM
'
authSecret
:
'
g2rWVHUCpUxgcL9Tz7vyeQ
'
headers
:
{
crypto_key
:
'
dh
=
BCg6ZIGuE2ZNm2ti6Arf4CDVD_8
-
-
aLXAGLYhpghwjl1xxVjTLLpb7zihuEOGGbyt8Qj0_fYHBP4ObxwJNl56bk
'
encryption
:
'
salt
=
5LIDBXbvkBvvb7ZdD
-
T4PQ
;
rs
=
3
'
encoding
:
'
aesgcm
'
}
}
]
;
for
(
let
test
of
expectedSuccesses
)
{
let
authSecret
=
test
.
authSecret
?
ChromeUtils
.
base64URLDecode
(
test
.
authSecret
{
padding
:
"
reject
"
}
)
:
null
;
let
data
=
ChromeUtils
.
base64URLDecode
(
test
.
data
{
padding
:
"
reject
"
}
)
;
let
result
=
yield
PushCrypto
.
decrypt
(
privateKey
publicKey
authSecret
test
.
headers
data
)
;
let
decoder
=
new
TextDecoder
(
'
utf
-
8
'
)
;
equal
(
decoder
.
decode
(
new
Uint8Array
(
result
)
)
test
.
result
test
.
desc
)
;
}
let
expectedFailures
=
[
{
desc
:
'
padSize
=
1
rs
=
4096
auth
secret
pad
=
8
'
data
:
'
h0FmyldY8aT5EQ6CJrbfRn_IdDvytoLeHb9_q5CjtdFRfgDRknxLmOzavLaVG4oOiS0r
'
senderPublicKey
:
'
'
authSecret
:
'
Sxb6u0gJIhGEogyLawjmCw
'
headers
:
{
crypto_key
:
'
dh
=
BCXHk7O8CE
-
9AOp6xx7g7c
-
NCaNpns1PyyHpdcmDaijLbT6IdGq0ezGatBwtFc34BBfscFxdk4Tjksa2Mx5rRCM
'
encryption
:
'
salt
=
aGBpoKklLtrLcAUCcCr7JQ
'
encoding
:
'
aesgcm128
'
}
}
{
desc
:
'
Missing
padding
'
data
:
'
anvsHj7oBQTPMhv7XSJEsvyMS4
-
8EtbC7HgFZsKaTg
'
headers
:
{
crypto_key
:
'
dh
=
BMSqfc3ohqw2DDgu3nsMESagYGWubswQPGxrW1bAbYKD18dIHQBUmD3ul_lu7MyQiT5gNdzn5JTXQvCcpf
-
oZE4
'
encryption
:
'
salt
=
Czx2i18rar8XWOXAVDnUuw
'
encoding
:
'
aesgcm128
'
}
}
{
desc
:
'
padSize
>
rs
'
data
:
'
Ct_h1g7O55e6GvuhmpjLsGnv8Rmwvxgw8iDESNKGxk_8E99iHKDzdV8wJPyHA
-
6b2E6kzuVa5UWiQ7s4Zms1xzJ4FKgoxvBObXkc_r_d4mnb
-
j245z3AcvRmcYGk5_HZ0ci26SfhAN3lCgxGzTHS4nuHBRkGwOb4Tj4SFyBRlLoTh2jyVK2jYugNjH9tTrGOBg7lP5lajLTQlxOi91
-
RYZSfFhsLX3LrAkXuRoN7G1CdiI7Y3_eTgbPIPabDcLCnGzmFBTvoJSaQF17huMl_UnWoCj2WovA4BwK_TvWSbdgElNnQ4CbArJ1h9OqhDOphVu5GUGr94iitXRQR
-
fqKPMad0ULLjKQWZOnjuIdV1RYEZ873r62Yyd31HoveJcSDb1T8l_QK2zVF8V4k0xmK9hGuC0rF5YJPYPHgl5__usknzxMBnRrfV5_MOL5uPZwUEFsu
'
headers
:
{
crypto_key
:
'
dh
=
BAcMdWLJRGx
-
kPpeFtwqR3GE1LWzd1TYh2rg6CEFu53O
-
y3DNLkNe_BtGtKRR4f7ZqpBMVS6NgfE2NwNPm3Ndls
'
encryption
:
'
salt
=
NQVTKhB0rpL7ZzKkotTGlA
;
rs
=
1
'
encoding
:
'
aesgcm
'
}
}
{
desc
:
'
Encrypted
with
padSize
=
1
decrypted
with
padSize
=
2
and
auth
secret
'
data
:
'
fwkuwTTChcLnrzsbDI78Y2EoQzfnbMI8Ax9Z27_rwX8
'
authSecret
:
'
BhbpNTWyO5wVJmVKTV6XaA
'
headers
:
{
crypto_key
:
'
dh
=
BCHn
-
I
-
J3dfPRLJBlNZ3xFoAqaBLZ6qdhpaz9W7Q00JW1oD
-
hTxyEECn6KYJNK8AxKUyIDwn6Icx_PYWJiEYjQ0
'
encryption
:
'
salt
=
c6JQl9eJ0VvwrUVCQDxY7Q
'
encoding
:
'
aesgcm
'
}
}
{
desc
:
'
Truncated
input
'
data
:
'
AlDjj6NvT5HGyrHbT8M5D6XBFSra6xrWS9B2ROaCIjwSu3RyZ1iyuv0
'
headers
:
{
crypto_key
:
'
dh
=
BCHn
-
I
-
J3dfPRLJBlNZ3xFoAqaBLZ6qdhpaz9W7Q00JW1oD
-
hTxyEECn6KYJNK8AxKUyIDwn6Icx_PYWJiEYjQ0
'
encryption
:
'
salt
=
c6JQl9eJ0VvwrUVCQDxY7Q
;
rs
=
25
'
encoding
:
'
aesgcm
'
}
}
]
;
for
(
let
test
of
expectedFailures
)
{
let
authSecret
=
test
.
authSecret
?
ChromeUtils
.
base64URLDecode
(
test
.
authSecret
{
padding
:
"
reject
"
}
)
:
null
;
let
data
=
ChromeUtils
.
base64URLDecode
(
test
.
data
{
padding
:
"
reject
"
}
)
;
yield
rejects
(
PushCrypto
.
decrypt
(
privateKey
publicKey
authSecret
test
.
headers
data
)
test
.
desc
)
;
}
}
)
;
add_task
(
async
function
test_aes128gcm
(
)
{
let
expectedSuccesses
=
[
{
desc
:
'
Example
from
draft
-
ietf
-
webpush
-
encryption
-
latest
'
result
:
'
When
I
grow
up
I
want
to
be
a
watermelon
'
data
:
'
DGv6ra1nlYgDCS1FRnbzlwAAEABBBP4z9KsN6nGRTbVYI_c7VJSPQTBtkgcy27mlmlMoZIIgDll6e3vCYLocInmYWAmS6TlzAC8wEqKK6PBru3jl7A_yl95bQpu6cVPTpK4Mqgkf1CXztLVBSt2Ks3oZwbuwXPXLWyouBWLVWGNWQexSgSxsj_Qulcy4a
-
fN
'
authSecret
:
'
BTBZMqHH6r4Tts7J_aSIgg
'
privateKey
:
{
kty
:
'
EC
'
crv
:
'
P
-
256
'
d
:
'
q1dXpw3UpT5VOmu_cf_v6ih07Aems3njxI
-
JWgLcM94
'
x
:
'
JXGyvs3942BVGq8e0PTNNmwRzr5VX4m8t7GGpTM5FzE
'
y
:
'
aOzi6
-
AYWXvTBHm4bjyPjs7Vd8pZGH6SRpkNtoIAiw4
'
ext
:
true
}
publicKey
:
'
BCVxsr7N_eNgVRqvHtD0zTZsEc6
-
VV
-
JvLexhqUzORcxaOzi6
-
AYWXvTBHm4bjyPjs7Vd8pZGH6SRpkNtoIAiw4
'
}
{
desc
:
'
rs
=
24
'
result
:
"
I
am
the
very
model
of
a
modern
Major
-
General
;
I
'
ve
information
vegetable
animal
and
mineral
"
data
:
'
goagSH7PP0ZGwUsgShmdkwAAABhBBDJVyIuUJbOSVMeWHP8VNPnxY
-
dZSw86doqOkEzZZZY1ALBWVXTVf0rUDH3oi68I9Hrp
-
01zA
-
mr8XKWl5kcH8cX0KiV2PtCwdkEyaQ73YF5fsDxgoWDiaTA3wPqMvuLDqGsZWHnE9Psnfoy7UMEqKlh2a1nE7ZOXiXcOBHLNj260jYzSJnEPV2eXixSXfyWpaSJHAwfj4wVdAAocmViIg6ywk8wFB1hgJpnX2UVEU_qIOcaP6AOIOr1UUQPfosQqC2MEHe5u9gHXF5pi
-
E267LAlkoYefq01KV_xK_vjbxpw8GAYfSjQEm0L8FG
-
CN37c8pnQ2Yf61MkihaXac9OctfNeWq_22cN6hn4qsOq0F7QoWIiZqWhB1vS9cJ3KUlyPQvKI9cvevDxw0fJHWeTFzhuwT9BjdILjjb2Vkqc0
-
qTDOawqD4c8WXsvdGDQCec5Y1x3UhdQXdjR_mhXypxFM37OZTvKJBr1vPCpRXl
-
bI6iOd7KScgtMM1x5luKhGzZyz25HyuFyj1ec82A
'
authSecret
:
'
_tK2LDGoIt6be6agJ_nvGA
'
privateKey
:
{
kty
:
'
EC
'
crv
:
'
P
-
256
'
d
:
'
bGViEe3PvjjFJg8lcnLsqu71b2yqWGnZN9J2MTed
-
9s
'
x
:
'
auB0GHF0AZ2LAocFnvOXDS7EeCMopnzbg
-
tS21FMHrU
'
y
:
'
GpbhrW
-
_xKj3XhhXA
-
kDZSicKZ0kn0BuVhqzhLOB
-
Cc
'
ext
:
true
}
publicKey
:
'
BGrgdBhxdAGdiwKHBZ7zlw0uxHgjKKZ824PrUttRTB61GpbhrW
-
_xKj3XhhXA
-
kDZSicKZ0kn0BuVhqzhLOB
-
Cc
'
}
]
;
for
(
let
test
of
expectedSuccesses
)
{
let
publicKey
=
ChromeUtils
.
base64URLDecode
(
test
.
publicKey
REJECT_PADDING
)
;
let
authSecret
=
ChromeUtils
.
base64URLDecode
(
test
.
authSecret
REJECT_PADDING
)
;
let
payload
=
ChromeUtils
.
base64URLDecode
(
test
.
data
REJECT_PADDING
)
;
let
result
=
await
PushCrypto
.
decrypt
(
test
.
privateKey
publicKey
authSecret
{
encoding
:
'
aes128gcm
'
}
payload
)
;
let
decoder
=
new
TextDecoder
(
'
utf
-
8
'
)
;
equal
(
decoder
.
decode
(
new
Uint8Array
(
result
)
)
test
.
result
test
.
desc
)
;
}
}
)
;
