/
*
-
*
-
Mode
:
IDL
;
tab
-
width
:
2
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
domstubs
.
idl
"
[
ptr
]
native
WidgetEvent
(
mozilla
:
:
WidgetEvent
)
;
[
ptr
]
native
DOMEventPtr
(
mozilla
:
:
dom
:
:
Event
)
;
[
ptr
]
native
IPCMessagePtr
(
IPC
:
:
Message
)
;
[
ptr
]
native
ConstIPCMessagePtr
(
const
IPC
:
:
Message
)
;
[
ptr
]
native
PickleIterator
(
PickleIterator
)
;
[
ptr
]
native
EventTargetPtr
(
mozilla
:
:
dom
:
:
EventTarget
)
;
%
{
C
+
+
#
ifdef
ERROR
#
undef
ERROR
#
endif
#
include
"
mozilla
/
EventForwards
.
h
"
class
nsPresContext
;
class
nsInvalidateRequestList
;
namespace
mozilla
{
namespace
dom
{
class
Event
;
class
EventTarget
;
}
/
/
namespace
dom
}
/
/
namespace
mozilla
%
}
webidl
EventTarget
;
/
*
*
*
The
nsIDOMEvent
interface
is
the
primary
datatype
for
all
events
in
*
the
Document
Object
Model
.
*
*
For
more
information
on
this
interface
please
see
*
http
:
/
/
dev
.
w3
.
org
/
2006
/
webapi
/
DOM
-
Level
-
3
-
Events
/
html
/
DOM3
-
Events
.
html
and
*
http
:
/
/
dvcs
.
w3
.
org
/
hg
/
domcore
/
raw
-
file
/
tip
/
Overview
.
html
*
/
[
shim
(
Event
)
uuid
(
f58daacf
-
4d1a
-
4002
-
8fd7
-
06b614dfbcf6
)
]
interface
nsIDOMEvent
:
nsISupports
{
/
/
PhaseType
/
*
*
*
The
event
isn
'
t
being
dispatched
.
*
/
const
unsigned
short
NONE
=
0
;
/
*
*
*
The
current
event
phase
is
the
capturing
phase
.
*
/
const
unsigned
short
CAPTURING_PHASE
=
1
;
/
*
*
*
The
event
is
currently
being
evaluated
at
the
target
EventTarget
.
*
/
const
unsigned
short
AT_TARGET
=
2
;
/
*
*
*
The
current
event
phase
is
the
bubbling
phase
.
*
/
const
unsigned
short
BUBBLING_PHASE
=
3
;
const
long
ALT_MASK
=
0x00000001
;
const
long
CONTROL_MASK
=
0x00000002
;
const
long
SHIFT_MASK
=
0x00000004
;
const
long
META_MASK
=
0x00000008
;
[
notxpcom
]
DOMEventPtr
InternalDOMEvent
(
)
;
}
;
