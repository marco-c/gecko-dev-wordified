/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
nsISupports
.
idl
"
interface
nsIPresentationControlChannel
;
%
{
C
+
+
#
define
TCP_PRESENTATION_SERVER_CONTACT_ID
\
"
mozilla
.
org
/
presentation
-
device
/
tcp
-
presentation
-
server
;
1
"
%
}
/
*
*
The
device
information
required
for
establishing
TCP
control
channel
.
*
/
[
scriptable
uuid
(
7fce55c0
-
2470
-
4a41
-
a3b9
-
c35fbe55f206
)
]
interface
nsITCPDeviceInfo
:
nsISupports
{
readonly
attribute
AUTF8String
id
;
readonly
attribute
AUTF8String
host
;
readonly
attribute
uint16_t
port
;
}
;
[
scriptable
uuid
(
fbb890a9
-
9e95
-
47d1
-
a425
-
86fd95881d81
)
]
interface
nsITCPPresentationServerListener
:
nsISupports
{
/
*
*
*
Callback
while
the
server
socket
stops
listening
.
*
param
aReason
*
The
reason
of
the
socket
close
.
NS_OK
for
manually
|
close
|
.
*
<
other
-
error
>
on
failure
.
*
/
void
onClose
(
in
nsresult
aReason
)
;
/
*
*
*
Callback
while
the
remote
host
is
requesting
to
start
a
presentation
session
.
*
param
aDeviceInfo
The
device
information
related
to
the
remote
host
.
*
param
aUrl
The
URL
requested
to
open
by
remote
device
.
*
param
aPresentationId
The
Id
for
representing
this
session
.
*
param
aControlChannel
The
control
channel
for
this
session
.
*
/
void
onSessionRequest
(
in
nsITCPDeviceInfo
aDeviceInfo
in
DOMString
aUrl
in
DOMString
aPresentationId
in
nsIPresentationControlChannel
aControlChannel
)
;
}
;
/
*
*
*
TCP
presentation
server
which
can
be
used
by
discovery
services
.
*
/
[
scriptable
uuid
(
494237ec
-
c567
-
41ab
-
afc9
-
82d26c4fe1dc
)
]
interface
nsITCPPresentationServer
:
nsISupports
{
/
*
*
*
This
method
initializes
a
TCP
presentation
server
.
*
param
aId
*
The
unique
Id
for
the
device
within
the
discovery
scope
.
If
aId
*
is
null
empty
string
or
opt
-
out
the
TCP
presentation
server
*
should
not
work
until
the
|
id
|
is
set
appropriately
.
*
param
aPort
*
The
port
of
the
server
socket
.
Pass
0
or
opt
-
out
to
indicate
no
*
preference
and
a
port
will
be
selected
automatically
.
*
throws
NS_ERROR_FAILURE
if
the
server
socket
has
been
inited
or
the
*
server
socket
can
not
be
inited
.
*
/
void
init
(
[
optional
]
in
AUTF8String
aId
[
optional
]
in
uint16_t
aPort
)
;
/
*
*
*
Request
session
to
designated
remote
TCP
device
.
*
param
aDeviceInfo
*
The
remtoe
device
info
for
establish
connection
.
*
param
aUrl
*
The
URL
requested
to
open
by
remote
device
.
*
param
aPresentationId
*
The
Id
for
representing
this
session
.
*
returns
The
control
channel
for
this
session
.
*
throws
NS_ERROR_FAILURE
if
the
server
socket
has
been
inited
or
the
*
server
socket
can
not
be
inited
.
*
/
nsIPresentationControlChannel
requestSession
(
in
nsITCPDeviceInfo
aDeviceInfo
in
DOMString
aUrl
in
DOMString
aPresentationId
)
;
/
*
*
*
Close
server
socket
and
call
|
listener
.
onClose
(
NS_OK
)
|
*
/
void
close
(
)
;
/
*
*
*
Get
the
listen
port
of
the
TCP
socket
valid
after
|
init
|
.
0
indicates
*
the
server
socket
is
not
inited
or
closed
.
*
/
readonly
attribute
uint16_t
port
;
/
*
*
*
The
id
of
the
TCP
presentation
server
.
The
setter
should
be
use
if
the
|
id
|
*
is
not
set
by
the
|
init
|
.
Moreover
if
the
|
id
|
is
not
set
by
|
init
|
the
*
TCP
presentation
server
should
not
work
until
the
|
id
|
is
set
.
*
throws
NS_ERROR_FAILURE
if
the
non
-
null
id
has
been
set
by
|
init
|
or
this
*
setter
*
/
attribute
AUTF8String
id
;
/
*
*
*
the
listener
for
handling
events
of
this
TCP
presentation
server
*
/
attribute
nsITCPPresentationServerListener
listener
;
}
;
