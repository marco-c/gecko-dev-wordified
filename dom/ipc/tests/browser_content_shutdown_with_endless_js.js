/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
"
use
strict
"
;
const
EMPTY_PAGE
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
ipc
/
tests
/
file_dummy
.
html
"
;
const
HANG_PAGE
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
ipc
/
tests
/
file_endless_js
.
html
"
;
function
pushPref
(
name
val
)
{
return
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
name
val
]
]
}
)
;
}
async
function
createAndShutdownContentProcess
(
url
)
{
info
(
"
Create
and
shutdown
a
content
process
for
"
+
url
)
;
let
oldChildCount
=
Services
.
ppmm
.
childCount
;
info
(
"
Old
process
count
:
"
+
oldChildCount
)
;
let
tabpromise
=
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
opening
:
url
waitForLoad
:
true
forceNewProcess
:
true
}
)
;
let
tab
=
await
tabpromise
;
/
/
It
seems
that
the
ppmm
counter
is
racy
wrt
tabpromise
.
Services
.
tm
.
spinEventLoopUntil
(
"
browser_content_shutdown_with_endless_js
"
(
)
=
>
Services
.
ppmm
.
childCount
>
oldChildCount
)
;
let
newChildCount
=
Services
.
ppmm
.
childCount
;
info
(
"
New
process
count
:
"
+
newChildCount
)
;
/
/
There
can
be
(
unrelated
)
other
processes
launching
so
we
cannot
do
an
/
/
exact
newChildCount
=
=
oldChildCount
+
1
here
.
This
is
weird
but
not
/
/
relevant
for
our
test
.
ok
(
newChildCount
>
oldChildCount
"
Process
created
.
"
)
;
/
/
Start
the
shutdown
of
the
child
process
let
tabClosed
=
BrowserTestUtils
.
waitForTabClosing
(
tab
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
ok
(
true
"
removeTab
"
)
;
Services
.
tm
.
spinEventLoopUntil
(
"
browser_content_shutdown_with_endless_js
"
(
)
=
>
Services
.
ppmm
.
childCount
<
newChildCount
)
;
info
(
"
New
count
:
"
+
Services
.
ppmm
.
childCount
)
;
await
tabClosed
;
/
/
If
we
do
not
hang
and
get
here
we
are
fine
.
ok
(
Services
.
ppmm
.
childCount
<
newChildCount
"
Shutdown
of
content
process
complete
.
"
)
;
}
add_task
(
async
(
)
=
>
{
/
/
This
test
is
only
relevant
in
e10s
.
if
(
!
gMultiProcessBrowser
)
{
ok
(
true
"
We
are
not
in
multiprocess
mode
skipping
test
.
"
)
;
return
;
}
/
/
Ensure
the
process
cache
cannot
interfere
.
pushPref
(
"
dom
.
ipc
.
processPreload
.
enabled
"
false
)
;
/
/
Ensure
we
have
no
cached
processes
from
previous
tests
.
Services
.
ppmm
.
releaseCachedProcesses
(
)
;
/
/
First
let
'
s
do
a
dry
run
that
should
always
succeed
.
await
createAndShutdownContentProcess
(
EMPTY_PAGE
)
;
/
/
Now
we
will
start
a
shutdown
of
our
content
process
while
our
content
/
/
script
is
running
an
endless
loop
.
/
/
/
/
If
the
JS
does
not
get
interrupted
on
shutdown
it
will
cause
this
test
/
/
to
hang
.
await
createAndShutdownContentProcess
(
HANG_PAGE
)
;
}
)
;
