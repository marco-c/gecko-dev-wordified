/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Fetch
.
h
"
#
include
"
mozilla
/
dom
/
IdentityCredential
.
h
"
#
include
"
mozilla
/
dom
/
IdentityNetworkHelpers
.
h
"
#
include
"
mozilla
/
dom
/
Request
.
h
"
#
include
"
mozilla
/
ExpandedPrincipal
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
nsEffectiveTLDService
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsIXPConnect
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsStringStream
.
h
"
#
include
"
nsURLHelper
.
h
"
namespace
mozilla
:
:
dom
{
IdentityCredential
:
:
~
IdentityCredential
(
)
=
default
;
JSObject
*
IdentityCredential
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
IdentityCredential_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
IdentityCredential
:
:
IdentityCredential
(
nsPIDOMWindowInner
*
aParent
)
:
Credential
(
aParent
)
{
}
void
IdentityCredential
:
:
CopyValuesFrom
(
const
IPCIdentityCredential
&
aOther
)
{
this
-
>
SetToken
(
aOther
.
token
(
)
)
;
this
-
>
SetId
(
aOther
.
id
(
)
)
;
this
-
>
SetType
(
aOther
.
type
(
)
)
;
}
IPCIdentityCredential
IdentityCredential
:
:
MakeIPCIdentityCredential
(
)
{
nsString
token
id
type
;
GetToken
(
token
)
;
GetId
(
id
)
;
GetType
(
type
)
;
IPCIdentityCredential
result
;
result
.
token
(
)
=
token
;
result
.
id
(
)
=
id
;
result
.
type
(
)
=
type
;
return
result
;
}
void
IdentityCredential
:
:
GetToken
(
nsAString
&
aToken
)
const
{
aToken
.
Assign
(
mToken
)
;
}
void
IdentityCredential
:
:
SetToken
(
const
nsAString
&
aToken
)
{
mToken
.
Assign
(
aToken
)
;
}
/
/
static
RefPtr
<
IdentityCredential
:
:
GetIdentityCredentialPromise
>
IdentityCredential
:
:
DiscoverFromExternalSource
(
nsPIDOMWindowInner
*
aParent
const
CredentialRequestOptions
&
aOptions
bool
aSameOriginWithAncestors
)
{
return
IdentityCredential
:
:
GetIdentityCredentialPromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
}
/
/
namespace
mozilla
:
:
dom
