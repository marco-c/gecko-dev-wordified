/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
mozilla_dom_BroadcastChannelChild_h
#
define
mozilla_dom_BroadcastChannelChild_h
#
include
"
mozilla
/
dom
/
EventTarget
.
h
"
#
include
"
mozilla
/
dom
/
PBroadcastChannelChild
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
BackgroundChildImpl
;
}
namespace
dom
{
class
EventTarget
;
class
BroadcastChannelChild
MOZ_FINAL
:
public
PBroadcastChannelChild
{
friend
class
mozilla
:
:
ipc
:
:
BackgroundChildImpl
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
BroadcastChannelChild
)
void
SetEventTarget
(
EventTarget
*
aEventTarget
)
{
mEventTarget
=
aEventTarget
;
}
virtual
bool
RecvNotify
(
const
nsString
&
aMessage
)
MOZ_OVERRIDE
;
bool
IsActorDestroyed
(
)
const
{
return
mActorDestroyed
;
}
private
:
BroadcastChannelChild
(
const
nsAString
&
aOrigin
const
nsAString
&
aChannel
)
;
~
BroadcastChannelChild
(
)
;
void
Notify
(
JSContext
*
aCx
const
nsString
&
aMessage
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
;
/
/
This
raw
pointer
is
actually
the
parent
object
.
/
/
It
'
s
set
to
null
when
the
parent
object
is
deleted
.
EventTarget
*
mEventTarget
;
nsString
mOrigin
;
nsString
mChannel
;
bool
mActorDestroyed
;
}
;
}
/
/
dom
namespace
}
/
/
mozilla
namespace
#
endif
/
/
mozilla_dom_BroadcastChannelChild_h
