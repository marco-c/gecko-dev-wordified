/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
mozilla_dom_DesktopNotification_h
#
define
mozilla_dom_DesktopNotification_h
#
include
"
PCOMContentPermissionRequestChild
.
h
"
#
include
"
nsDOMClassInfoID
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsIJSContextStack
.
h
"
#
include
"
nsIAlertsService
.
h
"
#
include
"
nsIDOMDesktopNotification
.
h
"
#
include
"
nsIDOMEventTarget
.
h
"
#
include
"
nsIContentPermissionPrompt
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsWeakPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIDOMWindow
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsDOMEventTargetHelper
.
h
"
#
include
"
nsIDOMEvent
.
h
"
#
include
"
nsIDocument
.
h
"
namespace
mozilla
{
namespace
dom
{
class
AlertServiceObserver
;
/
*
*
DesktopNotificationCenter
*
Object
hangs
off
of
the
navigator
object
and
hands
out
DesktopNotification
objects
*
/
class
DesktopNotificationCenter
:
public
nsIDOMDesktopNotificationCenter
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIDOMDESKTOPNOTIFICATIONCENTER
DesktopNotificationCenter
(
nsPIDOMWindow
*
aWindow
)
{
mOwner
=
aWindow
;
/
/
Grab
the
uri
of
the
document
nsCOMPtr
<
nsIDOMDocument
>
domdoc
;
mOwner
-
>
GetDocument
(
getter_AddRefs
(
domdoc
)
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
do_QueryInterface
(
domdoc
)
;
mPrincipal
=
doc
-
>
NodePrincipal
(
)
;
}
virtual
~
DesktopNotificationCenter
(
)
{
}
void
Shutdown
(
)
{
mOwner
=
nullptr
;
}
private
:
nsCOMPtr
<
nsPIDOMWindow
>
mOwner
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
}
;
class
DesktopNotification
:
public
nsDOMEventTargetHelper
public
nsIDOMDesktopNotification
{
friend
class
DesktopNotificationRequest
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIDOMDESKTOPNOTIFICATION
DesktopNotification
(
const
nsAString
&
title
const
nsAString
&
description
const
nsAString
&
iconURL
nsPIDOMWindow
*
aWindow
nsIPrincipal
*
principal
)
;
virtual
~
DesktopNotification
(
)
;
void
Init
(
)
;
/
*
*
PostDesktopNotification
*
Uses
alert
service
to
display
a
notification
*
/
nsresult
PostDesktopNotification
(
)
;
nsresult
SetAllow
(
bool
aAllow
)
;
/
*
*
Creates
and
dispatches
a
dom
event
of
type
aName
*
/
void
DispatchNotificationEvent
(
const
nsString
&
aName
)
;
void
HandleAlertServiceNotification
(
const
char
*
aTopic
)
;
protected
:
nsString
mTitle
;
nsString
mDescription
;
nsString
mIconURL
;
nsRefPtr
<
AlertServiceObserver
>
mObserver
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
bool
mAllow
;
bool
mShowHasBeenCalled
;
static
uint32_t
sCount
;
}
;
/
*
*
Simple
Request
*
/
class
DesktopNotificationRequest
:
public
nsIContentPermissionRequest
public
nsRunnable
public
PCOMContentPermissionRequestChild
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSICONTENTPERMISSIONREQUEST
DesktopNotificationRequest
(
DesktopNotification
*
notification
)
:
mDesktopNotification
(
notification
)
{
}
NS_IMETHOD
Run
(
)
{
nsCOMPtr
<
nsIContentPermissionPrompt
>
prompt
=
do_CreateInstance
(
NS_CONTENT_PERMISSION_PROMPT_CONTRACTID
)
;
if
(
prompt
)
{
prompt
-
>
Prompt
(
this
)
;
}
return
NS_OK
;
}
~
DesktopNotificationRequest
(
)
{
}
bool
Recv__delete__
(
const
bool
&
allow
)
{
if
(
allow
)
(
void
)
Allow
(
)
;
else
(
void
)
Cancel
(
)
;
return
true
;
}
void
IPDLRelease
(
)
{
Release
(
)
;
}
nsRefPtr
<
DesktopNotification
>
mDesktopNotification
;
}
;
class
AlertServiceObserver
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
AlertServiceObserver
(
DesktopNotification
*
notification
)
:
mNotification
(
notification
)
{
}
virtual
~
AlertServiceObserver
(
)
{
}
void
Disconnect
(
)
{
mNotification
=
nullptr
;
}
NS_IMETHODIMP
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
PRUnichar
*
aData
)
{
/
/
forward
to
parent
if
(
mNotification
)
{
#
ifdef
MOZ_B2G
if
(
NS_FAILED
(
mNotification
-
>
CheckInnerWindowCorrectness
(
)
)
)
return
NS_ERROR_NOT_AVAILABLE
;
#
endif
mNotification
-
>
HandleAlertServiceNotification
(
aTopic
)
;
}
return
NS_OK
;
}
;
private
:
DesktopNotification
*
mNotification
;
}
;
}
/
/
namespace
dom
}
/
/
namespace
mozilla
#
endif
/
*
mozilla_dom_DesktopNotification_h
*
/
