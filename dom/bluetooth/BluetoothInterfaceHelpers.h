/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
mozilla_dom_bluetooth_bluetoothinterfacehelpers_h
#
define
mozilla_dom_bluetooth_bluetoothinterfacehelpers_h
#
include
"
BluetoothCommon
.
h
"
#
include
"
nsThreadUtils
.
h
"
BEGIN_BLUETOOTH_NAMESPACE
/
/
/
/
Conversion
/
/
nsresult
Convert
(
nsresult
aIn
BluetoothStatus
&
aOut
)
;
/
/
/
/
Init
operators
/
/
/
/
Below
are
general
-
purpose
init
operators
for
Bluetooth
.
The
classes
/
/
of
type
|
ConstantInitOp
[
1
.
.
3
]
|
initialize
results
or
notifications
/
/
with
constant
values
.
/
/
template
<
typename
T1
>
class
ConstantInitOp1
final
{
public
:
ConstantInitOp1
(
const
T1
&
aArg1
)
:
mArg1
(
aArg1
)
{
}
nsresult
operator
(
)
(
T1
&
aArg1
)
const
{
aArg1
=
mArg1
;
return
NS_OK
;
}
private
:
const
T1
&
mArg1
;
}
;
template
<
typename
T1
typename
T2
>
class
ConstantInitOp2
final
{
public
:
ConstantInitOp2
(
const
T1
&
aArg1
const
T2
&
aArg2
)
:
mArg1
(
aArg1
)
mArg2
(
aArg2
)
{
}
nsresult
operator
(
)
(
T1
&
aArg1
T2
&
aArg2
)
const
{
aArg1
=
mArg1
;
aArg2
=
mArg2
;
return
NS_OK
;
}
private
:
const
T1
&
mArg1
;
const
T2
&
mArg2
;
}
;
template
<
typename
T1
typename
T2
typename
T3
>
class
ConstantInitOp3
final
{
public
:
ConstantInitOp3
(
const
T1
&
aArg1
const
T2
&
aArg2
const
T3
&
aArg3
)
:
mArg1
(
aArg1
)
mArg2
(
aArg2
)
mArg3
(
aArg3
)
{
}
nsresult
operator
(
)
(
T1
&
aArg1
T2
&
aArg2
T3
&
aArg3
)
const
{
aArg1
=
mArg1
;
aArg2
=
mArg2
;
aArg3
=
mArg3
;
return
NS_OK
;
}
private
:
const
T1
&
mArg1
;
const
T2
&
mArg2
;
const
T3
&
mArg3
;
}
;
END_BLUETOOTH_NAMESPACE
#
endif
