/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
BluetoothSocket
.
h
"
#
include
<
fcntl
.
h
>
#
include
"
BluetoothSocketObserver
.
h
"
#
include
"
BluetoothUnixSocketConnector
.
h
"
#
include
"
mozilla
/
unused
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsXULAppAPI
.
h
"
using
namespace
mozilla
:
:
ipc
;
BEGIN_BLUETOOTH_NAMESPACE
static
const
size_t
MAX_READ_SIZE
=
1
<
<
16
;
/
/
/
/
BluetoothSocketIO
/
/
class
BluetoothSocket
:
:
BluetoothSocketIO
final
:
public
UnixSocketWatcher
public
DataSocketIO
{
public
:
BluetoothSocketIO
(
MessageLoop
*
mIOLoop
BluetoothSocket
*
aConsumer
UnixSocketConnector
*
aConnector
)
;
~
BluetoothSocketIO
(
)
;
void
GetSocketAddr
(
nsAString
&
aAddrStr
)
const
;
BluetoothSocket
*
GetBluetoothSocket
(
)
;
DataSocket
*
GetDataSocket
(
)
;
/
/
Delayed
-
task
handling
/
/
void
SetDelayedConnectTask
(
CancelableTask
*
aTask
)
;
void
ClearDelayedConnectTask
(
)
;
void
CancelDelayedConnectTask
(
)
;
/
/
Task
callback
methods
/
/
/
*
*
*
Run
bind
/
listen
to
prepare
for
further
runs
of
accept
(
)
*
/
void
Listen
(
)
;
/
*
*
*
Connect
to
a
socket
*
/
void
Connect
(
)
;
void
Send
(
UnixSocketIOBuffer
*
aBuffer
)
;
/
/
I
/
O
callback
methods
/
/
void
OnConnected
(
)
override
;
void
OnError
(
const
char
*
aFunction
int
aErrno
)
override
;
void
OnListening
(
)
override
;
void
OnSocketCanAcceptWithoutBlocking
(
)
override
;
void
OnSocketCanReceiveWithoutBlocking
(
)
override
;
void
OnSocketCanSendWithoutBlocking
(
)
override
;
/
/
Methods
for
|
DataSocket
|
/
/
nsresult
QueryReceiveBuffer
(
UnixSocketIOBuffer
*
*
aBuffer
)
;
void
ConsumeBuffer
(
)
;
void
DiscardBuffer
(
)
;
/
/
Methods
for
|
SocketIOBase
|
/
/
SocketBase
*
GetSocketBase
(
)
override
;
bool
IsShutdownOnMainThread
(
)
const
override
;
bool
IsShutdownOnIOThread
(
)
const
override
;
void
ShutdownOnMainThread
(
)
override
;
void
ShutdownOnIOThread
(
)
override
;
private
:
class
ReceiveRunnable
;
void
FireSocketError
(
)
;
/
*
*
*
Consumer
pointer
.
Non
-
thread
safe
RefPtr
so
should
only
be
manipulated
*
directly
from
main
thread
.
All
non
-
main
-
thread
accesses
should
happen
with
*
mIO
as
container
.
*
/
RefPtr
<
BluetoothSocket
>
mConsumer
;
/
*
*
*
Connector
object
used
to
create
the
connection
we
are
currently
using
.
*
/
nsAutoPtr
<
UnixSocketConnector
>
mConnector
;
/
*
*
*
If
true
do
not
requeue
whatever
task
we
'
re
running
*
/
bool
mShuttingDownOnIOThread
;
/
*
*
*
Number
of
valid
bytes
in
|
mAddress
|
*
/
socklen_t
mAddressLength
;
/
*
*
*
Address
structure
of
the
socket
currently
in
use
*
/
struct
sockaddr_storage
mAddress
;
/
*
*
*
Task
member
for
delayed
connect
task
.
Should
only
be
access
on
main
thread
.
*
/
CancelableTask
*
mDelayedConnectTask
;
/
*
*
*
I
/
O
buffer
for
received
data
*
/
nsAutoPtr
<
UnixSocketRawData
>
mBuffer
;
}
;
BluetoothSocket
:
:
BluetoothSocketIO
:
:
BluetoothSocketIO
(
MessageLoop
*
mIOLoop
BluetoothSocket
*
aConsumer
UnixSocketConnector
*
aConnector
)
:
UnixSocketWatcher
(
mIOLoop
)
mConsumer
(
aConsumer
)
mConnector
(
aConnector
)
mShuttingDownOnIOThread
(
false
)
mAddressLength
(
0
)
mDelayedConnectTask
(
nullptr
)
{
MOZ_ASSERT
(
mConsumer
)
;
MOZ_ASSERT
(
mConnector
)
;
}
BluetoothSocket
:
:
BluetoothSocketIO
:
:
~
BluetoothSocketIO
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
IsShutdownOnMainThread
(
)
)
;
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
GetSocketAddr
(
nsAString
&
aAddrStr
)
const
{
if
(
!
mConnector
)
{
NS_WARNING
(
"
No
connector
to
get
socket
address
from
!
"
)
;
aAddrStr
.
Truncate
(
)
;
return
;
}
nsCString
addressString
;
nsresult
rv
=
mConnector
-
>
ConvertAddressToString
(
*
reinterpret_cast
<
const
struct
sockaddr
*
>
(
&
mAddress
)
mAddressLength
addressString
)
;
if
(
NS_FAILED
(
rv
)
)
{
aAddrStr
.
Truncate
(
)
;
return
;
}
aAddrStr
.
Assign
(
NS_ConvertUTF8toUTF16
(
addressString
)
)
;
}
BluetoothSocket
*
BluetoothSocket
:
:
BluetoothSocketIO
:
:
GetBluetoothSocket
(
)
{
return
mConsumer
.
get
(
)
;
}
DataSocket
*
BluetoothSocket
:
:
BluetoothSocketIO
:
:
GetDataSocket
(
)
{
return
GetBluetoothSocket
(
)
;
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
SetDelayedConnectTask
(
CancelableTask
*
aTask
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mDelayedConnectTask
=
aTask
;
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
ClearDelayedConnectTask
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mDelayedConnectTask
=
nullptr
;
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
CancelDelayedConnectTask
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mDelayedConnectTask
)
{
return
;
}
mDelayedConnectTask
-
>
Cancel
(
)
;
ClearDelayedConnectTask
(
)
;
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
Listen
(
)
{
MOZ_ASSERT
(
MessageLoopForIO
:
:
current
(
)
=
=
GetIOLoop
(
)
)
;
MOZ_ASSERT
(
mConnector
)
;
if
(
!
IsOpen
(
)
)
{
mAddressLength
=
sizeof
(
mAddress
)
;
int
fd
;
nsresult
rv
=
mConnector
-
>
CreateListenSocket
(
reinterpret_cast
<
struct
sockaddr
*
>
(
&
mAddress
)
&
mAddressLength
fd
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
FireSocketError
(
)
;
return
;
}
SetFd
(
fd
)
;
/
/
calls
OnListening
on
success
or
OnError
otherwise
rv
=
UnixSocketWatcher
:
:
Listen
(
reinterpret_cast
<
struct
sockaddr
*
>
(
&
mAddress
)
mAddressLength
)
;
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
}
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
Connect
(
)
{
MOZ_ASSERT
(
MessageLoopForIO
:
:
current
(
)
=
=
GetIOLoop
(
)
)
;
MOZ_ASSERT
(
mConnector
)
;
if
(
!
IsOpen
(
)
)
{
mAddressLength
=
sizeof
(
mAddress
)
;
int
fd
;
nsresult
rv
=
mConnector
-
>
CreateStreamSocket
(
reinterpret_cast
<
struct
sockaddr
*
>
(
&
mAddress
)
&
mAddressLength
fd
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
FireSocketError
(
)
;
return
;
}
SetFd
(
fd
)
;
}
/
/
calls
OnConnected
(
)
on
success
or
OnError
(
)
otherwise
nsresult
rv
=
UnixSocketWatcher
:
:
Connect
(
reinterpret_cast
<
struct
sockaddr
*
>
(
&
mAddress
)
mAddressLength
)
;
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
Send
(
UnixSocketIOBuffer
*
aBuffer
)
{
EnqueueData
(
aBuffer
)
;
AddWatchers
(
WRITE_WATCHER
false
)
;
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
OnConnected
(
)
{
MOZ_ASSERT
(
MessageLoopForIO
:
:
current
(
)
=
=
GetIOLoop
(
)
)
;
MOZ_ASSERT
(
GetConnectionStatus
(
)
=
=
SOCKET_IS_CONNECTED
)
;
NS_DispatchToMainThread
(
new
SocketIOEventRunnable
(
this
SocketIOEventRunnable
:
:
CONNECT_SUCCESS
)
)
;
AddWatchers
(
READ_WATCHER
true
)
;
if
(
HasPendingData
(
)
)
{
AddWatchers
(
WRITE_WATCHER
false
)
;
}
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
OnListening
(
)
{
MOZ_ASSERT
(
MessageLoopForIO
:
:
current
(
)
=
=
GetIOLoop
(
)
)
;
MOZ_ASSERT
(
GetConnectionStatus
(
)
=
=
SOCKET_IS_LISTENING
)
;
AddWatchers
(
READ_WATCHER
true
)
;
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
OnError
(
const
char
*
aFunction
int
aErrno
)
{
MOZ_ASSERT
(
MessageLoopForIO
:
:
current
(
)
=
=
GetIOLoop
(
)
)
;
UnixFdWatcher
:
:
OnError
(
aFunction
aErrno
)
;
FireSocketError
(
)
;
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
OnSocketCanAcceptWithoutBlocking
(
)
{
MOZ_ASSERT
(
MessageLoopForIO
:
:
current
(
)
=
=
GetIOLoop
(
)
)
;
MOZ_ASSERT
(
GetConnectionStatus
(
)
=
=
SOCKET_IS_LISTENING
)
;
RemoveWatchers
(
READ_WATCHER
|
WRITE_WATCHER
)
;
mAddressLength
=
sizeof
(
mAddress
)
;
int
fd
;
nsresult
rv
=
mConnector
-
>
AcceptStreamSocket
(
GetFd
(
)
reinterpret_cast
<
struct
sockaddr
*
>
(
&
mAddress
)
&
mAddressLength
fd
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
FireSocketError
(
)
;
return
;
}
Close
(
)
;
SetSocket
(
fd
SOCKET_IS_CONNECTED
)
;
NS_DispatchToMainThread
(
new
SocketIOEventRunnable
(
this
SocketIOEventRunnable
:
:
CONNECT_SUCCESS
)
)
;
AddWatchers
(
READ_WATCHER
true
)
;
if
(
HasPendingData
(
)
)
{
AddWatchers
(
WRITE_WATCHER
false
)
;
}
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
OnSocketCanReceiveWithoutBlocking
(
)
{
MOZ_ASSERT
(
MessageLoopForIO
:
:
current
(
)
=
=
GetIOLoop
(
)
)
;
MOZ_ASSERT
(
GetConnectionStatus
(
)
=
=
SOCKET_IS_CONNECTED
)
;
/
/
see
bug
990984
ssize_t
res
=
ReceiveData
(
GetFd
(
)
)
;
if
(
res
<
0
)
{
/
*
I
/
O
error
*
/
RemoveWatchers
(
READ_WATCHER
|
WRITE_WATCHER
)
;
}
else
if
(
!
res
)
{
/
*
EOF
or
peer
shutdown
*
/
RemoveWatchers
(
READ_WATCHER
)
;
}
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
OnSocketCanSendWithoutBlocking
(
)
{
MOZ_ASSERT
(
MessageLoopForIO
:
:
current
(
)
=
=
GetIOLoop
(
)
)
;
MOZ_ASSERT
(
GetConnectionStatus
(
)
=
=
SOCKET_IS_CONNECTED
)
;
/
/
see
bug
990984
nsresult
rv
=
SendPendingData
(
GetFd
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
if
(
HasPendingData
(
)
)
{
AddWatchers
(
WRITE_WATCHER
false
)
;
}
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
FireSocketError
(
)
{
MOZ_ASSERT
(
MessageLoopForIO
:
:
current
(
)
=
=
GetIOLoop
(
)
)
;
/
/
Clean
up
watchers
statuses
fds
Close
(
)
;
/
/
Tell
the
main
thread
we
'
ve
errored
NS_DispatchToMainThread
(
new
SocketIOEventRunnable
(
this
SocketIOEventRunnable
:
:
CONNECT_ERROR
)
)
;
}
/
/
|
DataSocketIO
|
nsresult
BluetoothSocket
:
:
BluetoothSocketIO
:
:
QueryReceiveBuffer
(
UnixSocketIOBuffer
*
*
aBuffer
)
{
MOZ_ASSERT
(
aBuffer
)
;
if
(
!
mBuffer
)
{
mBuffer
=
new
UnixSocketRawData
(
MAX_READ_SIZE
)
;
}
*
aBuffer
=
mBuffer
.
get
(
)
;
return
NS_OK
;
}
/
*
*
*
|
ReceiveRunnable
|
transfers
data
received
on
the
I
/
O
thread
*
to
an
instance
of
|
BluetoothSocket
|
on
the
main
thread
.
*
/
class
BluetoothSocket
:
:
BluetoothSocketIO
:
:
ReceiveRunnable
final
:
public
SocketIORunnable
<
BluetoothSocketIO
>
{
public
:
ReceiveRunnable
(
BluetoothSocketIO
*
aIO
UnixSocketBuffer
*
aBuffer
)
:
SocketIORunnable
<
BluetoothSocketIO
>
(
aIO
)
mBuffer
(
aBuffer
)
{
}
NS_IMETHOD
Run
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
BluetoothSocketIO
*
io
=
SocketIORunnable
<
BluetoothSocketIO
>
:
:
GetIO
(
)
;
if
(
NS_WARN_IF
(
io
-
>
IsShutdownOnMainThread
(
)
)
)
{
/
/
Since
we
'
ve
already
explicitly
closed
and
the
close
/
/
happened
before
this
this
isn
'
t
really
an
error
.
return
NS_OK
;
}
BluetoothSocket
*
bluetoothSocket
=
io
-
>
GetBluetoothSocket
(
)
;
MOZ_ASSERT
(
bluetoothSocket
)
;
bluetoothSocket
-
>
ReceiveSocketData
(
mBuffer
)
;
return
NS_OK
;
}
private
:
nsAutoPtr
<
UnixSocketBuffer
>
mBuffer
;
}
;
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
ConsumeBuffer
(
)
{
NS_DispatchToMainThread
(
new
ReceiveRunnable
(
this
mBuffer
.
forget
(
)
)
)
;
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
DiscardBuffer
(
)
{
/
/
Nothing
to
do
.
}
/
/
|
SocketIOBase
|
SocketBase
*
BluetoothSocket
:
:
BluetoothSocketIO
:
:
GetSocketBase
(
)
{
return
GetDataSocket
(
)
;
}
bool
BluetoothSocket
:
:
BluetoothSocketIO
:
:
IsShutdownOnMainThread
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mConsumer
=
=
nullptr
;
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
ShutdownOnMainThread
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
IsShutdownOnMainThread
(
)
)
;
mConsumer
=
nullptr
;
}
bool
BluetoothSocket
:
:
BluetoothSocketIO
:
:
IsShutdownOnIOThread
(
)
const
{
return
mShuttingDownOnIOThread
;
}
void
BluetoothSocket
:
:
BluetoothSocketIO
:
:
ShutdownOnIOThread
(
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mShuttingDownOnIOThread
)
;
Close
(
)
;
/
/
will
also
remove
fd
from
I
/
O
loop
mShuttingDownOnIOThread
=
true
;
}
/
/
/
/
Socket
tasks
/
/
class
BluetoothSocket
:
:
ListenTask
final
:
public
SocketIOTask
<
BluetoothSocketIO
>
{
public
:
ListenTask
(
BluetoothSocketIO
*
aIO
)
:
SocketIOTask
<
BluetoothSocketIO
>
(
aIO
)
{
}
void
Run
(
)
override
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
if
(
!
IsCanceled
(
)
)
{
GetIO
(
)
-
>
Listen
(
)
;
}
}
}
;
class
BluetoothSocket
:
:
ConnectTask
final
:
public
SocketIOTask
<
BluetoothSocketIO
>
{
public
:
ConnectTask
(
BluetoothSocketIO
*
aIO
)
:
SocketIOTask
<
BluetoothSocketIO
>
(
aIO
)
{
}
void
Run
(
)
override
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
IsCanceled
(
)
)
;
GetIO
(
)
-
>
Connect
(
)
;
}
}
;
class
BluetoothSocket
:
:
DelayedConnectTask
final
:
public
SocketIOTask
<
BluetoothSocketIO
>
{
public
:
DelayedConnectTask
(
BluetoothSocketIO
*
aIO
)
:
SocketIOTask
<
BluetoothSocketIO
>
(
aIO
)
{
}
void
Run
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
IsCanceled
(
)
)
{
return
;
}
BluetoothSocketIO
*
io
=
GetIO
(
)
;
if
(
io
-
>
IsShutdownOnMainThread
(
)
)
{
return
;
}
io
-
>
ClearDelayedConnectTask
(
)
;
XRE_GetIOMessageLoop
(
)
-
>
PostTask
(
FROM_HERE
new
ConnectTask
(
io
)
)
;
}
}
;
/
/
/
/
BluetoothSocket
/
/
BluetoothSocket
:
:
BluetoothSocket
(
BluetoothSocketObserver
*
aObserver
)
:
mObserver
(
aObserver
)
mIO
(
nullptr
)
{
MOZ_ASSERT
(
aObserver
)
;
}
BluetoothSocket
:
:
~
BluetoothSocket
(
)
{
MOZ_ASSERT
(
!
mIO
)
;
}
nsresult
BluetoothSocket
:
:
Connect
(
const
nsAString
&
aDeviceAddress
const
BluetoothUuid
&
aServiceUuid
BluetoothSocketType
aType
int
aChannel
bool
aAuth
bool
aEncrypt
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
aDeviceAddress
.
IsEmpty
(
)
)
;
nsAutoPtr
<
BluetoothUnixSocketConnector
>
connector
(
new
BluetoothUnixSocketConnector
(
NS_ConvertUTF16toUTF8
(
aDeviceAddress
)
aType
aChannel
aAuth
aEncrypt
)
)
;
nsresult
rv
=
Connect
(
connector
)
;
if
(
NS_FAILED
(
rv
)
)
{
nsAutoString
addr
;
GetAddress
(
addr
)
;
BT_LOGD
(
"
%
s
failed
.
Current
connected
device
address
:
%
s
"
__FUNCTION__
NS_ConvertUTF16toUTF8
(
addr
)
.
get
(
)
)
;
return
rv
;
}
connector
.
forget
(
)
;
return
NS_OK
;
}
nsresult
BluetoothSocket
:
:
Listen
(
const
nsAString
&
aServiceName
const
BluetoothUuid
&
aServiceUuid
BluetoothSocketType
aType
int
aChannel
bool
aAuth
bool
aEncrypt
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsAutoPtr
<
BluetoothUnixSocketConnector
>
connector
(
new
BluetoothUnixSocketConnector
(
NS_LITERAL_CSTRING
(
BLUETOOTH_ADDRESS_NONE
)
aType
aChannel
aAuth
aEncrypt
)
)
;
nsresult
rv
=
Listen
(
connector
)
;
if
(
NS_FAILED
(
rv
)
)
{
nsAutoString
addr
;
GetAddress
(
addr
)
;
BT_LOGD
(
"
%
s
failed
.
Current
connected
device
address
:
%
s
"
__FUNCTION__
NS_ConvertUTF16toUTF8
(
addr
)
.
get
(
)
)
;
return
rv
;
}
connector
.
forget
(
)
;
return
NS_OK
;
}
void
BluetoothSocket
:
:
ReceiveSocketData
(
nsAutoPtr
<
UnixSocketBuffer
>
&
aBuffer
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mObserver
)
;
mObserver
-
>
ReceiveSocketData
(
this
aBuffer
)
;
}
bool
BluetoothSocket
:
:
SendSocketData
(
const
nsACString
&
aStr
)
{
if
(
aStr
.
Length
(
)
>
MAX_READ_SIZE
)
{
return
false
;
}
SendSocketData
(
new
UnixSocketRawData
(
aStr
.
BeginReading
(
)
aStr
.
Length
(
)
)
)
;
return
true
;
}
nsresult
BluetoothSocket
:
:
Connect
(
BluetoothUnixSocketConnector
*
aConnector
int
aDelayMs
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aConnector
)
;
MOZ_ASSERT
(
!
mIO
)
;
MessageLoop
*
ioLoop
=
XRE_GetIOMessageLoop
(
)
;
mIO
=
new
BluetoothSocketIO
(
ioLoop
this
aConnector
)
;
SetConnectionStatus
(
SOCKET_CONNECTING
)
;
if
(
aDelayMs
>
0
)
{
DelayedConnectTask
*
connectTask
=
new
DelayedConnectTask
(
mIO
)
;
mIO
-
>
SetDelayedConnectTask
(
connectTask
)
;
MessageLoop
:
:
current
(
)
-
>
PostDelayedTask
(
FROM_HERE
connectTask
aDelayMs
)
;
}
else
{
ioLoop
-
>
PostTask
(
FROM_HERE
new
ConnectTask
(
mIO
)
)
;
}
return
NS_OK
;
}
nsresult
BluetoothSocket
:
:
Listen
(
BluetoothUnixSocketConnector
*
aConnector
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aConnector
)
;
MOZ_ASSERT
(
!
mIO
)
;
MessageLoop
*
ioLoop
=
XRE_GetIOMessageLoop
(
)
;
mIO
=
new
BluetoothSocketIO
(
ioLoop
this
aConnector
)
;
SetConnectionStatus
(
SOCKET_LISTENING
)
;
ioLoop
-
>
PostTask
(
FROM_HERE
new
ListenTask
(
mIO
)
)
;
return
NS_OK
;
}
void
BluetoothSocket
:
:
GetAddress
(
nsAString
&
aAddrStr
)
{
aAddrStr
.
Truncate
(
)
;
if
(
!
mIO
|
|
GetConnectionStatus
(
)
!
=
SOCKET_CONNECTED
)
{
NS_WARNING
(
"
No
socket
currently
open
!
"
)
;
return
;
}
mIO
-
>
GetSocketAddr
(
aAddrStr
)
;
}
/
/
|
DataSocket
|
void
BluetoothSocket
:
:
SendSocketData
(
UnixSocketIOBuffer
*
aBuffer
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mIO
)
;
MOZ_ASSERT
(
!
mIO
-
>
IsShutdownOnMainThread
(
)
)
;
XRE_GetIOMessageLoop
(
)
-
>
PostTask
(
FROM_HERE
new
SocketIOSendTask
<
BluetoothSocketIO
UnixSocketIOBuffer
>
(
mIO
aBuffer
)
)
;
}
/
/
|
SocketBase
|
void
BluetoothSocket
:
:
Close
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mIO
)
{
return
;
}
mIO
-
>
CancelDelayedConnectTask
(
)
;
/
/
From
this
point
on
we
consider
mIO
as
being
deleted
.
/
/
We
sever
the
relationship
here
so
any
future
calls
to
listen
or
connect
/
/
will
create
a
new
implementation
.
mIO
-
>
ShutdownOnMainThread
(
)
;
XRE_GetIOMessageLoop
(
)
-
>
PostTask
(
FROM_HERE
new
SocketIOShutdownTask
(
mIO
)
)
;
mIO
=
nullptr
;
NotifyDisconnect
(
)
;
}
void
BluetoothSocket
:
:
OnConnectSuccess
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mObserver
)
;
mObserver
-
>
OnSocketConnectSuccess
(
this
)
;
}
void
BluetoothSocket
:
:
OnConnectError
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mObserver
)
;
mObserver
-
>
OnSocketConnectError
(
this
)
;
}
void
BluetoothSocket
:
:
OnDisconnect
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mObserver
)
;
mObserver
-
>
OnSocketDisconnect
(
this
)
;
}
END_BLUETOOTH_NAMESPACE
