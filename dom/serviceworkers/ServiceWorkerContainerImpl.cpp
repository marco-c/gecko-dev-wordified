/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
ServiceWorkerContainerImpl
.
h
"
namespace
mozilla
{
namespace
dom
{
ServiceWorkerContainerImpl
:
:
~
ServiceWorkerContainerImpl
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mOuter
)
;
}
ServiceWorkerContainerImpl
:
:
ServiceWorkerContainerImpl
(
)
:
mOuter
(
nullptr
)
{
}
void
ServiceWorkerContainerImpl
:
:
AddContainer
(
ServiceWorkerContainer
*
aOuter
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aOuter
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mOuter
)
;
mOuter
=
aOuter
;
}
void
ServiceWorkerContainerImpl
:
:
RemoveContainer
(
ServiceWorkerContainer
*
aOuter
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aOuter
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mOuter
=
=
aOuter
)
;
mOuter
=
nullptr
;
}
void
ServiceWorkerContainerImpl
:
:
Register
(
const
ClientInfo
&
aClientInfo
const
nsACString
&
aScopeURL
const
nsACString
&
aScriptURL
ServiceWorkerUpdateViaCache
aUpdateViaCache
ServiceWorkerRegistrationCallback
&
&
aSuccessCB
ServiceWorkerFailureCallback
&
&
aFailureCB
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
mOuter
)
;
nsIGlobalObject
*
global
=
mOuter
-
>
GetParentObject
(
)
;
if
(
NS_WARN_IF
(
!
global
)
)
{
aFailureCB
(
CopyableErrorResult
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
)
;
return
;
}
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
NS_WARN_IF
(
!
swm
)
)
{
aFailureCB
(
CopyableErrorResult
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
)
;
return
;
}
auto
holder
=
MakeRefPtr
<
DOMMozPromiseRequestHolder
<
ServiceWorkerRegistrationPromise
>
>
(
global
)
;
swm
-
>
Register
(
aClientInfo
aScopeURL
aScriptURL
aUpdateViaCache
)
-
>
Then
(
global
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
__func__
[
successCB
=
std
:
:
move
(
aSuccessCB
)
holder
]
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
{
holder
-
>
Complete
(
)
;
successCB
(
aDescriptor
)
;
}
[
failureCB
=
std
:
:
move
(
aFailureCB
)
holder
]
(
const
CopyableErrorResult
&
aResult
)
{
holder
-
>
Complete
(
)
;
failureCB
(
CopyableErrorResult
(
aResult
)
)
;
}
)
-
>
Track
(
*
holder
)
;
}
RefPtr
<
ServiceWorkerRegistrationPromise
>
ServiceWorkerContainerImpl
:
:
GetRegistration
(
const
ClientInfo
&
aClientInfo
const
nsACString
&
aURL
)
const
{
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
NS_WARN_IF
(
!
swm
)
)
{
return
ServiceWorkerRegistrationPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
return
swm
-
>
GetRegistration
(
aClientInfo
aURL
)
;
}
RefPtr
<
ServiceWorkerRegistrationListPromise
>
ServiceWorkerContainerImpl
:
:
GetRegistrations
(
const
ClientInfo
&
aClientInfo
)
const
{
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
NS_WARN_IF
(
!
swm
)
)
{
return
ServiceWorkerRegistrationListPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
return
swm
-
>
GetRegistrations
(
aClientInfo
)
;
}
RefPtr
<
ServiceWorkerRegistrationPromise
>
ServiceWorkerContainerImpl
:
:
GetReady
(
const
ClientInfo
&
aClientInfo
)
const
{
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
NS_WARN_IF
(
!
swm
)
)
{
return
ServiceWorkerRegistrationPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
return
swm
-
>
WhenReady
(
aClientInfo
)
;
}
}
/
/
namespace
dom
}
/
/
namespace
mozilla
