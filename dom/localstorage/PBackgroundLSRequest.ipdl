/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
file
*
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
include
protocol
PBackground
;
namespace
mozilla
{
namespace
dom
{
struct
LSRequestPrepareDatastoreResponse
{
uint64_t
datastoreId
;
}
;
struct
LSRequestPrepareObserverResponse
{
uint64_t
observerId
;
}
;
union
LSRequestResponse
{
nsresult
;
LSRequestPrepareDatastoreResponse
;
LSRequestPrepareObserverResponse
;
}
;
protocol
PBackgroundLSRequest
{
manager
PBackground
;
parent
:
/
/
The
Cancel
message
is
used
to
avoid
a
possible
dead
lock
caused
by
a
CPOW
/
/
sending
a
synchronous
message
from
the
main
thread
in
the
chrome
process
/
/
to
the
main
thread
in
the
content
process
at
the
time
we
are
blocking
/
/
the
main
thread
in
the
content
process
to
handle
a
request
.
/
/
We
use
the
PBackground
thread
on
the
parent
side
to
handle
requests
but
/
/
sometimes
we
need
to
get
information
from
principals
and
that
'
s
currently
/
/
only
possible
on
the
main
thread
.
So
if
the
main
thread
in
the
chrome
/
/
process
is
blocked
by
a
CPOW
operation
our
request
must
wait
for
the
CPOW
/
/
operation
to
complete
.
However
the
CPOW
operation
can
'
t
complete
either
/
/
because
we
are
blocking
the
main
thread
in
the
content
process
.
/
/
The
dead
lock
is
prevented
by
canceling
our
nested
event
loop
in
the
/
/
content
process
when
we
receive
a
synchronous
IPC
message
from
the
parent
.
async
Cancel
(
)
;
async
Finish
(
)
;
child
:
async
__delete__
(
LSRequestResponse
response
)
;
async
Ready
(
)
;
}
;
}
/
/
namespace
dom
}
/
/
namespace
mozilla
