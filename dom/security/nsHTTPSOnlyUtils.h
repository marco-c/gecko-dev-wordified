/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
nsHTTPSOnlyUtils_h___
#
define
nsHTTPSOnlyUtils_h___
#
include
"
nsIScriptError
.
h
"
class
nsHTTPSOnlyUtils
{
public
:
/
*
*
*
Returns
if
HTTPSOnly
-
Mode
preference
is
enabled
*
param
aFromPrivateWindow
true
if
executing
in
private
browsing
mode
*
return
true
if
HTTPS
-
Only
Mode
is
enabled
*
/
static
bool
IsHttpsOnlyModeEnabled
(
bool
aFromPrivateWindow
)
;
/
*
*
*
Determines
if
a
request
should
get
upgraded
because
of
the
HTTPS
-
Only
mode
.
*
If
true
the
httpsOnlyStatus
flag
in
LoadInfo
gets
updated
and
a
message
is
*
logged
in
the
console
.
*
param
aURI
nsIURI
of
request
*
param
aLoadInfo
nsILoadInfo
of
request
*
return
true
if
request
should
get
upgraded
*
/
static
bool
ShouldUpgradeRequest
(
nsIURI
*
aURI
nsILoadInfo
*
aLoadInfo
)
;
/
*
*
*
Determines
if
a
request
should
get
upgraded
because
of
the
HTTPS
-
Only
mode
.
*
If
true
a
message
is
logged
in
the
console
.
*
param
aURI
nsIURI
of
request
*
param
aLoadInfo
nsILoadInfo
of
request
*
return
true
if
request
should
get
upgraded
*
/
static
bool
ShouldUpgradeWebSocket
(
nsIURI
*
aURI
nsILoadInfo
*
aLoadInfo
)
;
/
*
*
*
Checks
if
the
error
code
is
on
a
block
-
list
of
codes
that
are
probably
not
*
related
to
a
HTTPS
-
Only
Mode
upgrade
.
*
param
aChannel
The
failed
Channel
.
*
param
aError
Error
Code
from
Request
*
return
false
if
error
is
not
related
to
upgrade
*
/
static
bool
CouldBeHttpsOnlyError
(
nsIChannel
*
aChannel
nsresult
aError
)
;
/
*
*
*
Logs
localized
message
to
either
content
console
or
browser
console
*
param
aName
Localization
key
*
param
aParams
Localization
parameters
*
param
aFlags
Logging
Flag
(
see
nsIScriptError
)
*
param
aInnerWindowID
Inner
Window
ID
(
Logged
on
browser
console
if
0
)
*
param
aFromPrivateWindow
If
from
private
window
*
param
[
aURI
]
Optional
:
URI
to
log
*
/
static
void
LogLocalizedString
(
const
char
*
aName
const
nsTArray
<
nsString
>
&
aParams
uint32_t
aFlags
uint64_t
aInnerWindowID
bool
aFromPrivateWindow
nsIURI
*
aURI
=
nullptr
)
;
/
*
*
*
Tests
if
the
HTTPS
-
Only
Mode
upgrade
exception
is
set
for
a
given
channel
.
*
Note
:
This
function
only
adds
an
exemption
for
loads
of
TYPE_DOCUMENT
.
*
param
aChannel
The
channel
to
be
checked
*
/
static
void
TestSitePermissionAndPotentiallyAddExemption
(
nsIChannel
*
aChannel
)
;
private
:
/
*
*
*
Logs
localized
message
to
either
content
console
or
browser
console
*
param
aMessage
Message
to
log
*
param
aFlags
Logging
Flag
(
see
nsIScriptError
)
*
param
aInnerWindowID
Inner
Window
ID
(
Logged
on
browser
console
if
0
)
*
param
aFromPrivateWindow
If
from
private
window
*
param
[
aURI
]
Optional
:
URI
to
log
*
/
static
void
LogMessage
(
const
nsAString
&
aMessage
uint32_t
aFlags
uint64_t
aInnerWindowID
bool
aFromPrivateWindow
nsIURI
*
aURI
=
nullptr
)
;
/
*
*
*
Checks
whether
the
URI
ends
with
.
onion
*
param
aURI
URI
object
*
return
true
if
the
URI
is
an
Onion
URI
*
/
static
bool
OnionException
(
nsIURI
*
aURI
)
;
/
*
*
*
Checks
whether
the
URI
is
a
loopback
-
or
local
-
IP
*
param
aURI
URI
object
*
return
true
if
the
URI
is
either
loopback
or
local
*
/
static
bool
LoopbackOrLocalException
(
nsIURI
*
aURI
)
;
}
;
#
endif
/
*
nsHTTPSOnlyUtils_h___
*
/
