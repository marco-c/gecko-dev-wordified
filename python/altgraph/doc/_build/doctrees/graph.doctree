cdocutils
.
nodes
document
q
)
q
}
q
(
U
nametypesq
}
q
(
X
#
altgraph
.
Graph
.
Graph
.
forw_topo_sortq
X
altgraph
.
Graph
.
Graphq
X
altgraph
.
Graph
.
Graph
.
hide_nodeq
X
altgraph
.
Graph
.
Graph
.
out_nbrsq
X
+
altgraph
.
Graph
.
Graph
.
number_of_hidden_edgesq
X
!
altgraph
.
Graph
.
Graph
.
restore_edgeq
X
altgraph
.
Graph
.
Graph
.
number_of_edgesq
X
altgraph
.
Graph
.
node_dataq
X
altgraph
.
Graph
.
Graph
.
inc_degreeq
X
altgraph
.
Graph
.
Graph
.
edge_listq
X
altgraph
.
Graph
.
Graph
.
edge_dataq
X
altgraph
.
Graph
.
Graph
.
forw_bfsq
X
!
altgraph
.
Graph
.
Graph
.
__contains__q
X
altgraph
.
Graph
.
Graph
.
all_nbrsq
X
"
altgraph
.
Graph
.
Graph
.
describe_edgeq
X
altgraph
.
Graph
.
Graph
.
headq
X
altgraph
.
Graph
.
Graph
.
get_hopsq
X
%
altgraph
.
Graph
.
Graph
.
hidden_node_listq
X
%
altgraph
.
Graph
.
Graph
.
hidden_edge_listq
X
&
altgraph
.
Graph
.
Graph
.
forw_bfs_subgraphq
X
altgraph
.
Graph
.
Graph
.
all_edgesq
X
&
altgraph
.
Graph
.
Graph
.
restore_all_edgesq
X
altgraph
.
Graph
.
Graph
.
inc_nbrsq
X
#
altgraph
.
Graph
.
Graph
.
back_topo_sortq
X
altgraph
.
Graph
.
Graph
.
iterdfsq
X
!
altgraph
.
Graph
.
Graph
.
restore_nodeq
X
edge
related
methodsq
NX
altgraph
.
Graph
.
Graph
.
add_edgeq
!
X
altgraph
.
Graph
.
Graph
.
connectedq
"
X
altgraph
.
Graph
.
Graph
.
tailq
#
X
node
related
methodsq
NX
+
altgraph
.
graph
-
-
-
basic
directional
graphsq
%
NX
altgraph
.
Graph
.
Graph
.
iterdataq
&
X
&
altgraph
.
Graph
.
Graph
.
back_bfs_subgraphq
'
X
graph
statisticsq
(
NX
!
altgraph
.
Graph
.
Graph
.
edge_by_nodeq
)
X
altgraph
.
Graph
.
Graph
.
edge_by_idq
*
X
altgraph
.
Graph
.
Graph
.
clust_coefq
+
X
altgraph
.
Graph
.
Graph
.
all_degreeq
X
altgraph
.
Graph
.
Graph
.
inc_edgesq
-
X
&
altgraph
.
Graph
.
Graph
.
restore_all_nodesq
.
X
altgraph
.
Graph
.
Graph
.
back_bfsq
/
X
altgraph
.
Graph
.
Graph
.
out_edgesq0
X
altgraph
.
Graph
.
Graph
.
hide_edgeq1
X
"
altgraph
.
Graph
.
Graph
.
describe_nodeq2
X
altgraph
.
Graph
.
Graph
.
__iter__q3
X
altgraph
.
Graph
.
Graph
.
number_of_nodesq4
X
altgraph
.
Graph
.
Graph
.
add_nodeq5
X
altgraph
.
Graph
.
Graph
.
node_listq6
X
graph
traversalq7NX
+
altgraph
.
Graph
.
Graph
.
number_of_hidden_nodesq8
X
altgraph
.
Graph
.
Graph
.
out_degreeq9
uU
substitution_defsq
:
}
q
;
U
parse_messagesq
<
]
q
=
U
current_sourceq
>
NU
decorationq
?
NU
autofootnote_startq
K
U
nameidsqA
}
qB
(
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
h
U
edge
-
related
-
methodsqCh
!
h
!
h
"
h
"
h
#
h
#
h
U
node
-
related
-
methodsqDh
%
U
'
altgraph
-
graph
-
basic
-
directional
-
graphsqEh
&
h
&
h
'
h
'
h
(
U
graph
-
statisticsqFh
)
h
)
h
*
h
*
h
+
h
+
h
h
h
-
h
-
h
.
h
.
h
/
h
/
h0h0h1h1h2h2h3h3h4h4h5h5h6h6h7U
graph
-
traversalqGh8h8h9h9uU
childrenqH
]
qIcdocutils
.
nodes
section
qJ
)
qK
}
qL
(
U
rawsourceqMU
U
parentqNh
U
sourceqOcdocutils
.
nodes
reprunicode
qPX7
/
Users
/
ronald
/
Projects
/
pyobjc
-
hg
/
altgraph
/
doc
/
graph
.
rstqQ
qR
}
qSbU
tagnameqTU
sectionqUU
attributesqV
}
qW
(
U
dupnamesqX
]
U
classesqY
]
U
backrefsqZ
]
U
idsq
[
]
q
\
(
X
module
-
altgraph
.
Graphq
]
hEeU
namesq
^
]
q_h
%
auU
lineq
K
U
documentqah
hH
]
qb
(
cdocutils
.
nodes
title
qc
)
qd
}
qe
(
hMX2
:
mod
:
altgraph
.
Graph
-
-
-
Basic
directional
graphsqfhNhKhOhRhTU
titleqghV
}
qh
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
qi
(
csphinx
.
addnodes
pending_xref
qj
)
qk
}
ql
(
hMX
:
mod
:
altgraph
.
Graph
qmhNhdhOhRhTU
pending_xrefqnhV
}
qo
(
U
reftypeX
modU
refwarnqp
U
reftargetqqX
altgraph
.
GraphU
refdomainX
pyqrh
[
]
hZ
]
U
refexplicit
hX
]
hY
]
h
^
]
U
refdocqsX
graphqtU
py
:
classquNU
py
:
moduleqvNuh
K
hH
]
qwcdocutils
.
nodes
literal
qx
)
qy
}
qz
(
hMhmhV
}
q
{
(
hX
]
hY
]
q
|
(
U
xrefq
}
hrX
py
-
modq
~
ehZ
]
h
[
]
h
^
]
uhNhkhH
]
q
cdocutils
.
nodes
Text
q
X
altgraph
.
Graphq
q
}
q
(
hMU
hNhyubahTU
literalq
ubaubh
X
-
-
-
Basic
directional
graphsq
q
}
q
(
hMX
-
-
-
Basic
directional
graphsq
hNhdubeubcsphinx
.
addnodes
index
q
)
q
}
q
(
hMU
hNhKhOhRhTU
indexq
hV
}
q
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
q
(
U
singleq
X
altgraph
.
Graph
(
module
)
X
module
-
altgraph
.
GraphU
tq
auh
Nhah
hH
]
ubcdocutils
.
nodes
paragraph
q
)
q
}
q
(
hMX
The
module
:
mod
:
altgraph
.
Graph
provides
a
class
:
class
:
Graph
that
represents
a
directed
graph
with
*
N
*
nodes
and
*
E
*
edges
.
hNhKhOhRhTU
paragraphq
hV
}
q
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
q
(
h
X
The
module
q
q
}
q
(
hMX
The
module
hNh
ubhj
)
q
}
q
(
hMX
:
mod
:
altgraph
.
Graph
q
hNh
hOhRhThnhV
}
q
(
U
reftypeX
modhp
hqX
altgraph
.
GraphU
refdomainX
pyq
h
[
]
hZ
]
U
refexplicit
hX
]
hY
]
h
^
]
hshthuNhvX
altgraph
.
Graphq
uh
K
hH
]
q
hx
)
q
}
q
(
hMh
hV
}
q
(
hX
]
hY
]
q
(
h
}
h
X
py
-
modq
ehZ
]
h
[
]
h
^
]
uhNh
hH
]
q
h
X
altgraph
.
Graphq
q
}
q
(
hMU
hNh
ubahTh
ubaubh
X
provides
a
class
q
q
}
q
(
hMX
provides
a
class
hNh
ubhj
)
q
}
q
(
hMX
:
class
:
Graph
q
hNh
hOhRhThnhV
}
q
(
U
reftypeX
classhp
hqX
GraphU
refdomainX
pyq
h
[
]
hZ
]
U
refexplicit
hX
]
hY
]
h
^
]
hshthuNhvh
uh
K
hH
]
q
hx
)
q
}
q
(
hMh
hV
}
q
(
hX
]
hY
]
q
(
h
}
h
X
py
-
classq
ehZ
]
h
[
]
h
^
]
uhNh
hH
]
q
h
X
Graphq
q
}
q
(
hMU
hNh
ubahTh
ubaubh
X
'
that
represents
a
directed
graph
with
q
q
}
q
(
hMX
'
that
represents
a
directed
graph
with
hNh
ubcdocutils
.
nodes
emphasis
q
)
q
}
q
(
hMX
*
N
*
hV
}
q
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNh
hH
]
q
h
X
N
q
}
q
(
hMU
hNh
ubahTU
emphasisq
ubh
X
nodes
and
q
q
}
q
(
hMX
nodes
and
hNh
ubh
)
q
}
q
(
hMX
*
E
*
hV
}
q
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNh
hH
]
q
h
X
E
q
}
q
(
hMU
hNh
ubahTh
ubh
X
edges
.
q
q
}
q
(
hMX
edges
.
hNh
ubeubh
)
q
}
q
(
hMU
hNhKhOhRhTh
hV
}
q
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
q
(
h
X
Graph
(
class
in
altgraph
.
Graph
)
h
U
tq
auh
Nhah
hH
]
ubcsphinx
.
addnodes
desc
q
)
q
}
q
(
hMU
hNhKhOhRhTU
descq
hV
}
q
(
U
noindexq
U
domainq
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
U
objtypeq
X
classq
U
desctypeq
h
uh
Nhah
hH
]
q
(
csphinx
.
addnodes
desc_signature
q
)
q
}
q
(
hMX
Graph
(
[
edges
]
)
hNh
hOhRhTU
desc_signatureq
hV
}
q
(
h
[
]
q
h
aU
moduleq
h
hZ
]
hX
]
hY
]
h
^
]
q
h
aU
fullnameq
X
Graphq
U
classq
U
U
firstq
uh
K
hah
hH
]
q
(
csphinx
.
addnodes
desc_annotation
q
)
q
}
q
(
hMX
class
hNh
hOhRhTU
desc_annotationq
hV
}
q
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
q
h
X
class
q
q
}
q
(
hMU
hNh
ubaubcsphinx
.
addnodes
desc_addname
q
)
q
}
q
(
hMX
altgraph
.
Graph
.
hNh
hOhRhTU
desc_addnameq
hV
}
q
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
q
h
X
altgraph
.
Graph
.
q
r
}
r
(
hMU
hNh
ubaubcsphinx
.
addnodes
desc_name
r
)
r
}
r
(
hMh
hNh
hOhRhTU
desc_namer
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
Graphr
r
}
r
(
hMU
hNj
ubaubcsphinx
.
addnodes
desc_parameterlist
r
)
r
}
r
(
hMU
hNh
hOhRhTU
desc_parameterlistr
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
csphinx
.
addnodes
desc_optional
r
)
r
}
r
(
hMU
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
csphinx
.
addnodes
desc_parameter
r
)
r
}
r
(
hMX
edgeshV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
edgesr
r
}
r
(
hMU
hNj
ubahTU
desc_parameterr
ubahTU
desc_optionalr
ubaubeubcsphinx
.
addnodes
desc_content
r
)
r
!
}
r
"
(
hMU
hNh
hOhRhTU
desc_contentr
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
%
(
h
)
r
&
}
r
'
(
hMX
Constructs
a
new
empty
:
class
:
Graph
object
.
If
the
optional
*
edges
*
parameter
is
supplied
updates
the
graph
by
adding
the
specified
edges
.
hNj
!
hOhRhTh
hV
}
r
(
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
)
(
h
X
Constructs
a
new
empty
r
*
r
+
}
r
(
hMX
Constructs
a
new
empty
hNj
&
ubhj
)
r
-
}
r
.
(
hMX
:
class
:
Graph
r
/
hNj
&
hOhRhThnhV
}
r0
(
U
reftypeX
classhp
hqX
GraphU
refdomainX
pyr1
h
[
]
hZ
]
U
refexplicit
hX
]
hY
]
h
^
]
hshthuh
hvh
uh
K
hH
]
r2
hx
)
r3
}
r4
(
hMj
/
hV
}
r5
(
hX
]
hY
]
r6
(
h
}
j1
X
py
-
classr7
ehZ
]
h
[
]
h
^
]
uhNj
-
hH
]
r8
h
X
Graphr9
r
:
}
r
;
(
hMU
hNj3
ubahTh
ubaubh
X
object
.
If
the
optional
r
<
r
=
}
r
>
(
hMX
object
.
If
the
optional
hNj
&
ubh
)
r
?
}
r
(
hMX
*
edges
*
hV
}
rA
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
&
hH
]
rB
h
X
edgesrC
rD
}
rE
(
hMU
hNj
?
ubahTh
ubh
XH
parameter
is
supplied
updates
the
graph
by
adding
the
specified
edges
.
rF
rG
}
rH
(
hMXH
parameter
is
supplied
updates
the
graph
by
adding
the
specified
edges
.
hNj
&
ubeubh
)
rI
}
rJ
(
hMX
'
All
of
the
elements
in
*
edges
*
should
be
tuples
with
two
or
three
elements
.
The
first
two
elements
of
the
tuple
are
the
source
and
destination
node
of
the
edge
the
optional
third
element
is
the
edge
data
.
The
source
and
destination
nodes
are
added
to
the
graph
when
the
aren
'
t
already
present
.
hNj
!
hOhRhTh
hV
}
rK
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rL
(
h
X
All
of
the
elements
in
rM
rN
}
rO
(
hMX
All
of
the
elements
in
hNjI
ubh
)
rP
}
rQ
(
hMX
*
edges
*
hV
}
rR
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjI
hH
]
rS
h
X
edgesrT
rU
}
rV
(
hMU
hNjP
ubahTh
ubh
X
should
be
tuples
with
two
or
three
elements
.
The
first
two
elements
of
the
tuple
are
the
source
and
destination
node
of
the
edge
the
optional
third
element
is
the
edge
data
.
The
source
and
destination
nodes
are
added
to
the
graph
when
the
aren
'
t
already
present
.
rW
rX
}
rY
(
hMX
should
be
tuples
with
two
or
three
elements
.
The
first
two
elements
of
the
tuple
are
the
source
and
destination
node
of
the
edge
the
optional
third
element
is
the
edge
data
.
The
source
and
destination
nodes
are
added
to
the
graph
when
the
aren
'
t
already
present
.
hNjI
ubeubeubeubhJ
)
rZ
}
r
[
(
hMU
hNhKhOhRhThUhV
}
r
\
(
hX
]
hY
]
hZ
]
h
[
]
r
]
hDah
^
]
r
^
h
auh
K
hah
hH
]
r_
(
hc
)
r
}
ra
(
hMX
Node
related
methodsrb
hNjZ
hOhRhThghV
}
rc
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rd
h
X
Node
related
methodsre
rf
}
rg
(
hMjb
hNj
ubaubh
)
rh
}
ri
(
hMU
hNjZ
hONhTh
hV
}
rj
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
rk
(
h
X
(
add_node
(
)
(
altgraph
.
Graph
.
Graph
method
)
h5U
trl
auh
Nhah
hH
]
ubh
)
rm
}
rn
(
hMU
hNjZ
hONhTh
hV
}
ro
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodrp
h
jp
uh
Nhah
hH
]
rq
(
h
)
rr
}
rs
(
hMX
!
Graph
.
add_node
(
node
[
node_data
]
)
hNjm
hOhRhTh
hV
}
rt
(
h
[
]
ru
h5ah
h
hZ
]
hX
]
hY
]
h
^
]
rv
h5ah
X
Graph
.
add_nodeh
X
Graphh
uh
K
%
hah
hH
]
rw
(
h
)
rx
}
ry
(
hMX
Graph
.
hNjr
hOhRhTh
hV
}
rz
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
%
hah
hH
]
r
{
h
X
Graph
.
r
|
r
}
}
r
~
(
hMU
hNjx
ubaubj
)
r
}
r
(
hMX
add_nodehNjr
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
%
hah
hH
]
r
h
X
add_noder
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNjr
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
%
hah
hH
]
r
(
j
)
r
}
r
(
hMX
nodehV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTj
ubj
)
r
}
r
(
hMU
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
j
)
r
}
r
(
hMX
node_datahV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
node_datar
r
}
r
(
hMU
hNj
ubahTj
ubahTj
ubeubeubj
)
r
}
r
(
hMU
hNjm
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
%
hah
hH
]
r
(
h
)
r
}
r
(
hMXb
Adds
a
new
node
to
the
graph
if
it
is
not
already
present
.
The
new
node
must
be
a
hashable
object
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
Xb
Adds
a
new
node
to
the
graph
if
it
is
not
already
present
.
The
new
node
must
be
a
hashable
object
.
r
r
}
r
(
hMj
hNj
ubaubh
)
r
}
r
(
hMXQ
Arbitrary
data
can
be
attached
to
the
node
via
the
optional
*
node_data
*
argument
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
X
<
Arbitrary
data
can
be
attached
to
the
node
via
the
optional
r
r
}
r
(
hMX
<
Arbitrary
data
can
be
attached
to
the
node
via
the
optional
hNj
ubh
)
r
}
r
(
hMX
*
node_data
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
node_datar
r
}
r
(
hMU
hNj
ubahTh
ubh
X
argument
.
r
r
}
r
(
hMX
argument
.
hNj
ubeubcdocutils
.
nodes
note
r
)
r
}
r
(
hMXR
the
node
also
won
'
t
be
added
to
the
graph
when
it
is
present
but
currently
hidden
.
hNj
hOhRhTU
noter
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Nhah
hH
]
r
h
)
r
}
r
(
hMXR
the
node
also
won
'
t
be
added
to
the
graph
when
it
is
present
but
currently
hidden
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
"
hH
]
r
h
XR
the
node
also
won
'
t
be
added
to
the
graph
when
it
is
present
but
currently
hidden
.
r
r
}
r
(
hMj
hNj
ubaubaubeubeubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
)
hide_node
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hide_node
(
node
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
hide_nodeh
X
Graphh
uh
K
.
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
.
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
hide_nodehNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
.
hah
hH
]
r
h
X
hide_noder
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
.
hah
hH
]
r
j
)
r
}
r
(
hMX
nodehV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTj
ubaubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
.
hah
hH
]
r
(
h
)
r
}
r
(
hMX_
Hides
a
*
node
*
from
the
graph
.
The
incoming
and
outgoing
edges
of
the
node
will
also
be
hidden
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
(
hah
hH
]
r
(
h
X
Hides
a
r
r
}
r
(
hMX
Hides
a
hNj
ubh
)
r
}
r
(
hMX
*
node
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTh
ubh
XQ
from
the
graph
.
The
incoming
and
outgoing
edges
of
the
node
will
also
be
hidden
.
r
r
}
r
(
hMXQ
from
the
graph
.
The
incoming
and
outgoing
edges
of
the
node
will
also
be
hidden
.
hNj
ubeubh
)
r
}
r
(
hMXU
Raises
:
class
:
altgraph
.
GraphError
when
the
node
is
not
(
visible
)
node
of
the
graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
+
hah
hH
]
r
(
h
X
Raises
r
r
}
r
(
hMX
Raises
hNj
ubhj
)
r
}
r
(
hMX
:
class
:
altgraph
.
GraphError
r
hNj
hOhRhThnhV
}
r
(
U
reftypeX
classhp
hqX
altgraph
.
GraphErrorU
refdomainX
pyr
h
[
]
hZ
]
U
refexplicit
hX
]
hY
]
h
^
]
hshthuX
Graphhvh
uh
K
+
hH
]
r
hx
)
r
}
r
(
hMj
hV
}
r
(
hX
]
hY
]
r
(
h
}
j
X
py
-
classr
ehZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
altgraph
.
GraphErrorr
r
}
r
(
hMU
hNj
ubahTh
ubaubh
X2
when
the
node
is
not
(
visible
)
node
of
the
graph
.
r
r
}
r
(
hMX2
when
the
node
is
not
(
visible
)
node
of
the
graph
.
hNj
ubeubeubeubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
!
(
h
X
restore_node
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
"
auh
Nhah
hH
]
ubh
)
r
#
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
%
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
&
h
j
&
uh
Nhah
hH
]
r
'
(
h
)
r
(
}
r
)
(
hMX
Graph
.
restore_node
(
node
)
hNj
#
hOhRhTh
hV
}
r
*
(
h
[
]
r
+
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
restore_nodeh
X
Graphh
uh
K6hah
hH
]
r
-
(
h
)
r
.
}
r
/
(
hMX
Graph
.
hNj
(
hOhRhTh
hV
}
r0
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K6hah
hH
]
r1
h
X
Graph
.
r2
r3
}
r4
(
hMU
hNj
.
ubaubj
)
r5
}
r6
(
hMX
restore_nodehNj
(
hOhRhTj
hV
}
r7
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K6hah
hH
]
r8
h
X
restore_noder9
r
:
}
r
;
(
hMU
hNj5
ubaubj
)
r
<
}
r
=
(
hMU
hNj
(
hOhRhTj
hV
}
r
>
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K6hah
hH
]
r
?
j
)
r
}
rA
(
hMX
nodehV
}
rB
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
<
hH
]
rC
h
X
noderD
rE
}
rF
(
hMU
hNj
ubahTj
ubaubeubj
)
rG
}
rH
(
hMU
hNj
#
hOhRhTj
#
hV
}
rI
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K6hah
hH
]
rJ
(
h
)
rK
}
rL
(
hMXc
Restores
a
previously
hidden
*
node
*
.
The
incoming
and
outgoing
edges
of
the
node
are
also
restored
.
hNjG
hOhRhTh
hV
}
rM
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K1hah
hH
]
rN
(
h
X
Restores
a
previously
hidden
rO
rP
}
rQ
(
hMX
Restores
a
previously
hidden
hNjK
ubh
)
rR
}
rS
(
hMX
*
node
*
hV
}
rT
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjK
hH
]
rU
h
X
noderV
rW
}
rX
(
hMU
hNjR
ubahTh
ubh
X
.
The
incoming
and
outgoing
edges
of
the
node
are
also
restored
.
rY
rZ
}
r
[
(
hMX
.
The
incoming
and
outgoing
edges
of
the
node
are
also
restored
.
hNjK
ubeubh
)
r
\
}
r
]
(
hMXT
Raises
:
class
:
altgraph
.
GraphError
when
the
node
is
not
a
hidden
node
of
the
graph
.
hNjG
hOhRhTh
hV
}
r
^
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K4hah
hH
]
r_
(
h
X
Raises
r
ra
}
rb
(
hMX
Raises
hNj
\
ubhj
)
rc
}
rd
(
hMX
:
class
:
altgraph
.
GraphError
re
hNj
\
hOhRhThnhV
}
rf
(
U
reftypeX
classhp
hqX
altgraph
.
GraphErrorU
refdomainX
pyrg
h
[
]
hZ
]
U
refexplicit
hX
]
hY
]
h
^
]
hshthuX
Graphhvh
uh
K4hH
]
rh
hx
)
ri
}
rj
(
hMje
hV
}
rk
(
hX
]
hY
]
rl
(
h
}
jg
X
py
-
classrm
ehZ
]
h
[
]
h
^
]
uhNjc
hH
]
rn
h
X
altgraph
.
GraphErrorro
rp
}
rq
(
hMU
hNji
ubahTh
ubaubh
X1
when
the
node
is
not
a
hidden
node
of
the
graph
.
rr
rs
}
rt
(
hMX1
when
the
node
is
not
a
hidden
node
of
the
graph
.
hNj
\
ubeubeubeubh
)
ru
}
rv
(
hMU
hNjZ
hOhRhTh
hV
}
rw
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
rx
(
h
X1
restore_all_nodes
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
.
U
try
auh
Nhah
hH
]
ubh
)
rz
}
r
{
(
hMU
hNjZ
hOhRhTh
hV
}
r
|
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
}
h
j
}
uh
Nhah
hH
]
r
~
(
h
)
r
}
r
(
hMX
Graph
.
restore_all_nodes
(
)
hNjz
hOhRhTh
hV
}
r
(
h
[
]
r
h
.
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
.
ah
X
Graph
.
restore_all_nodesh
X
Graphh
uh
K
:
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
:
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
restore_all_nodeshNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
:
hah
hH
]
r
h
X
restore_all_nodesr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
:
hah
hH
]
ubeubj
)
r
}
r
(
hMU
hNjz
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
:
hah
hH
]
r
h
)
r
}
r
(
hMX
Restores
all
hidden
nodes
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K9hah
hH
]
r
h
X
Restores
all
hidden
nodes
.
r
r
}
r
(
hMj
hNj
ubaubaubeubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
/
number_of_nodes
(
)
(
altgraph
.
Graph
.
Graph
method
)
h4U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
number_of_nodes
(
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h4ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h4ah
X
Graph
.
number_of_nodesh
X
Graphh
uh
K
>
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
>
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
number_of_nodeshNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
>
hah
hH
]
r
h
X
number_of_nodesr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
>
hah
hH
]
ubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
>
hah
hH
]
r
h
)
r
}
r
(
hMX0
Return
the
number
of
visible
nodes
in
the
graph
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
=
hah
hH
]
r
h
X0
Return
the
number
of
visible
nodes
in
the
graph
.
r
r
}
r
(
hMj
hNj
ubaubaubeubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X6
number_of_hidden_nodes
(
)
(
altgraph
.
Graph
.
Graph
method
)
h8U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
number_of_hidden_nodes
(
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h8ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h8ah
X
Graph
.
number_of_hidden_nodesh
X
Graphh
uh
KBhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KBhah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
number_of_hidden_nodeshNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KBhah
hH
]
r
h
X
number_of_hidden_nodesr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KBhah
hH
]
ubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KBhah
hH
]
r
h
)
r
}
r
(
hMX
/
Return
the
number
of
hidden
nodes
in
the
graph
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KAhah
hH
]
r
h
X
/
Return
the
number
of
hidden
nodes
in
the
graph
.
r
r
}
r
(
hMj
hNj
ubaubaubeubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
)
node_list
(
)
(
altgraph
.
Graph
.
Graph
method
)
h6U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
node_list
(
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h6ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h6ah
X
Graph
.
node_listh
X
Graphh
uh
KFhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KFhah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
node_listhNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KFhah
hH
]
r
h
X
node_listr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KFhah
hH
]
ubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KFhah
hH
]
r
h
)
r
!
}
r
"
(
hMX2
Return
a
list
with
all
visible
nodes
in
the
graph
.
r
#
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KEhah
hH
]
r
%
h
X2
Return
a
list
with
all
visible
nodes
in
the
graph
.
r
&
r
'
}
r
(
(
hMj
#
hNj
!
ubaubaubeubh
)
r
)
}
r
*
(
hMU
hNjZ
hOhRhTh
hV
}
r
+
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X0
hidden_node_list
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
-
auh
Nhah
hH
]
ubh
)
r
.
}
r
/
(
hMU
hNjZ
hOhRhTh
hV
}
r0
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr1
h
j1
uh
Nhah
hH
]
r2
(
h
)
r3
}
r4
(
hMX
Graph
.
hidden_node_list
(
)
hNj
.
hOhRhTh
hV
}
r5
(
h
[
]
r6
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r7
h
ah
X
Graph
.
hidden_node_listh
X
Graphh
uh
KJhah
hH
]
r8
(
h
)
r9
}
r
:
(
hMX
Graph
.
hNj3
hOhRhTh
hV
}
r
;
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KJhah
hH
]
r
<
h
X
Graph
.
r
=
r
>
}
r
?
(
hMU
hNj9
ubaubj
)
r
}
rA
(
hMX
hidden_node_listhNj3
hOhRhTj
hV
}
rB
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KJhah
hH
]
rC
h
X
hidden_node_listrD
rE
}
rF
(
hMU
hNj
ubaubj
)
rG
}
rH
(
hMU
hNj3
hOhRhTj
hV
}
rI
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KJhah
hH
]
ubeubj
)
rJ
}
rK
(
hMU
hNj
.
hOhRhTj
#
hV
}
rL
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KJhah
hH
]
rM
h
)
rN
}
rO
(
hMX1
Return
a
list
with
all
hidden
nodes
in
the
graph
.
rP
hNjJ
hOhRhTh
hV
}
rQ
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KIhah
hH
]
rR
h
X1
Return
a
list
with
all
hidden
nodes
in
the
graph
.
rS
rT
}
rU
(
hMjP
hNjN
ubaubaubeubh
)
rV
}
rW
(
hMU
hNjZ
hOhRhTh
hV
}
rX
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
rY
(
h
X
&
node_data
(
)
(
in
module
altgraph
.
Graph
)
h
U
trZ
auh
Nhah
hH
]
ubh
)
r
[
}
r
\
(
hMU
hNjZ
hOhRhTh
hV
}
r
]
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
^
h
j
^
uh
Nhah
hH
]
r_
(
h
)
r
}
ra
(
hMX
node_data
(
node
)
hNj
[
hOhRhTh
hV
}
rb
(
h
[
]
rc
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
rd
h
ah
X
node_datare
h
U
h
uh
KOhah
hH
]
rf
(
h
)
rg
}
rh
(
hMX
altgraph
.
Graph
.
hNj
hOhRhTh
hV
}
ri
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KOhah
hH
]
rj
h
X
altgraph
.
Graph
.
rk
rl
}
rm
(
hMU
hNjg
ubaubj
)
rn
}
ro
(
hMje
hNj
hOhRhTj
hV
}
rp
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KOhah
hH
]
rq
h
X
node_datarr
rs
}
rt
(
hMU
hNjn
ubaubj
)
ru
}
rv
(
hMU
hNj
hOhRhTj
hV
}
rw
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KOhah
hH
]
rx
j
)
ry
}
rz
(
hMX
nodehV
}
r
{
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNju
hH
]
r
|
h
X
noder
}
r
~
}
r
(
hMU
hNjy
ubahTj
ubaubeubj
)
r
}
r
(
hMU
hNj
[
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KOhah
hH
]
r
h
)
r
}
r
(
hMX
=
Return
the
data
associated
with
the
*
node
*
when
it
was
added
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KMhah
hH
]
r
(
h
X
Return
the
data
associated
with
the
r
r
}
r
(
hMX
Return
the
data
associated
with
the
hNj
ubh
)
r
}
r
(
hMX
*
node
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTh
ubh
X
when
it
was
added
.
r
r
}
r
(
hMX
when
it
was
added
.
hNj
ubeubaubeubh
)
r
}
r
(
hMU
hNjZ
hONhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
-
describe_node
(
)
(
altgraph
.
Graph
.
Graph
method
)
h2U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjZ
hONhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
describe_node
(
node
)
r
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h2ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h2ah
X
Graph
.
describe_nodeh
X
Graphh
uh
KYhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KYhah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
describe_nodehNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KYhah
hH
]
r
h
X
describe_noder
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KYhah
hH
]
r
j
)
r
}
r
(
hMX
nodehV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTj
ubaubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KYhah
hH
]
r
(
h
)
r
}
r
(
hMXZ
Returns
*
node
*
the
node
'
s
data
and
the
lists
of
outgoing
and
incoming
edges
for
the
node
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KRhah
hH
]
r
(
h
X
Returns
r
r
}
r
(
hMX
Returns
hNj
ubh
)
r
}
r
(
hMX
*
node
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTh
ubh
XL
the
node
'
s
data
and
the
lists
of
outgoing
and
incoming
edges
for
the
node
.
r
r
}
r
(
hMXL
the
node
'
s
data
and
the
lists
of
outgoing
and
incoming
edges
for
the
node
.
hNj
ubeubj
)
r
}
r
(
hMXV
the
edge
lists
should
not
be
modified
doing
so
can
result
in
unpredicatable
behavior
.
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Nhah
hH
]
r
h
)
r
}
r
(
hMXV
the
edge
lists
should
not
be
modified
doing
so
can
result
in
unpredicatable
behavior
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
KWhH
]
r
h
XV
the
edge
lists
should
not
be
modified
doing
so
can
result
in
unpredicatable
behavior
.
r
r
}
r
(
hMj
hNj
ubaubaubeubeubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
__contains__
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
__contains__
(
node
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
__contains__h
X
Graphh
uh
K
^
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
^
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
__contains__hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
^
hah
hH
]
r
h
X
__contains__r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
^
hah
hH
]
r
j
)
r
}
r
(
hMX
nodehV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTj
ubaubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
^
hah
hH
]
r
h
)
r
}
r
(
hMXb
Returns
True
iff
*
node
*
is
a
node
in
the
graph
.
This
method
is
accessed
through
the
*
in
*
operator
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
\
hah
hH
]
r
(
h
X
Returns
True
iff
r
r
}
r
(
hMX
Returns
True
iff
hNj
ubh
)
r
}
r
(
hMX
*
node
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTh
ubh
X
=
is
a
node
in
the
graph
.
This
method
is
accessed
through
the
r
r
}
r
(
hMX
=
is
a
node
in
the
graph
.
This
method
is
accessed
through
the
hNj
ubh
)
r
}
r
(
hMX
*
in
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
!
h
X
inr
"
r
#
}
r
(
hMU
hNj
ubahTh
ubh
X
operator
.
r
%
r
&
}
r
'
(
hMX
operator
.
hNj
ubeubaubeubh
)
r
(
}
r
)
(
hMU
hNjZ
hOhRhTh
hV
}
r
*
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
+
(
h
X
(
__iter__
(
)
(
altgraph
.
Graph
.
Graph
method
)
h3U
tr
auh
Nhah
hH
]
ubh
)
r
-
}
r
.
(
hMU
hNjZ
hOhRhTh
hV
}
r
/
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr0
h
j0
uh
Nhah
hH
]
r1
(
h
)
r2
}
r3
(
hMX
Graph
.
__iter__
(
)
hNj
-
hOhRhTh
hV
}
r4
(
h
[
]
r5
h3ah
h
hZ
]
hX
]
hY
]
h
^
]
r6
h3ah
X
Graph
.
__iter__h
X
Graphh
uh
Kbhah
hH
]
r7
(
h
)
r8
}
r9
(
hMX
Graph
.
hNj2
hOhRhTh
hV
}
r
:
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kbhah
hH
]
r
;
h
X
Graph
.
r
<
r
=
}
r
>
(
hMU
hNj8
ubaubj
)
r
?
}
r
(
hMX
__iter__hNj2
hOhRhTj
hV
}
rA
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kbhah
hH
]
rB
h
X
__iter__rC
rD
}
rE
(
hMU
hNj
?
ubaubj
)
rF
}
rG
(
hMU
hNj2
hOhRhTj
hV
}
rH
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kbhah
hH
]
ubeubj
)
rI
}
rJ
(
hMU
hNj
-
hOhRhTj
#
hV
}
rK
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kbhah
hH
]
rL
h
)
rM
}
rN
(
hMX
Yield
all
nodes
in
the
graph
.
rO
hNjI
hOhRhTh
hV
}
rP
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kahah
hH
]
rQ
h
X
Yield
all
nodes
in
the
graph
.
rR
rS
}
rT
(
hMjO
hNjM
ubaubaubeubh
)
rU
}
rV
(
hMU
hNjZ
hOhRhTh
hV
}
rW
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
rX
(
h
X
)
out_edges
(
)
(
altgraph
.
Graph
.
Graph
method
)
h0U
trY
auh
Nhah
hH
]
ubh
)
rZ
}
r
[
(
hMU
hNjZ
hOhRhTh
hV
}
r
\
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
]
h
j
]
uh
Nhah
hH
]
r
^
(
h
)
r_
}
r
(
hMX
Graph
.
out_edges
(
node
)
hNjZ
hOhRhTh
hV
}
ra
(
h
[
]
rb
h0ah
h
hZ
]
hX
]
hY
]
h
^
]
rc
h0ah
X
Graph
.
out_edgesh
X
Graphh
uh
Kfhah
hH
]
rd
(
h
)
re
}
rf
(
hMX
Graph
.
hNj_
hOhRhTh
hV
}
rg
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kfhah
hH
]
rh
h
X
Graph
.
ri
rj
}
rk
(
hMU
hNje
ubaubj
)
rl
}
rm
(
hMX
out_edgeshNj_
hOhRhTj
hV
}
rn
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kfhah
hH
]
ro
h
X
out_edgesrp
rq
}
rr
(
hMU
hNjl
ubaubj
)
rs
}
rt
(
hMU
hNj_
hOhRhTj
hV
}
ru
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kfhah
hH
]
rv
j
)
rw
}
rx
(
hMX
nodehV
}
ry
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjs
hH
]
rz
h
X
noder
{
r
|
}
r
}
(
hMU
hNjw
ubahTj
ubaubeubj
)
r
~
}
r
(
hMU
hNjZ
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kfhah
hH
]
r
h
)
r
}
r
(
hMX
Return
the
list
of
outgoing
edges
for
*
node
*
hNj
~
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kehah
hH
]
r
(
h
X
&
Return
the
list
of
outgoing
edges
for
r
r
}
r
(
hMX
&
Return
the
list
of
outgoing
edges
for
hNj
ubh
)
r
}
r
(
hMX
*
node
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTh
ubeubaubeubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
)
inc_edges
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
-
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
inc_edges
(
node
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
-
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
-
ah
X
Graph
.
inc_edgesh
X
Graphh
uh
Kjhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kjhah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
inc_edgeshNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kjhah
hH
]
r
h
X
inc_edgesr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kjhah
hH
]
r
j
)
r
}
r
(
hMX
nodehV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTj
ubaubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kjhah
hH
]
r
h
)
r
}
r
(
hMX
Return
the
list
of
incoming
edges
for
*
node
*
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kihah
hH
]
r
(
h
X
&
Return
the
list
of
incoming
edges
for
r
r
}
r
(
hMX
&
Return
the
list
of
incoming
edges
for
hNj
ubh
)
r
}
r
(
hMX
*
node
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTh
ubeubaubeubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
)
all_edges
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
all_edges
(
node
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
all_edgesh
X
Graphh
uh
Knhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Knhah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
all_edgeshNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Knhah
hH
]
r
h
X
all_edgesr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Knhah
hH
]
r
j
)
r
}
r
(
hMX
nodehV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTj
ubaubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Knhah
hH
]
r
h
)
r
}
r
(
hMX9
Return
the
list
of
incoming
and
outgoing
edges
for
*
node
*
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kmhah
hH
]
r
(
h
X3
Return
the
list
of
incoming
and
outgoing
edges
for
r
r
}
r
(
hMX3
Return
the
list
of
incoming
and
outgoing
edges
for
hNj
ubh
)
r
}
r
(
hMX
*
node
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTh
ubeubaubeubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
*
out_degree
(
)
(
altgraph
.
Graph
.
Graph
method
)
h9U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
out_degree
(
node
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h9ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h9ah
X
Graph
.
out_degreeh
X
Graphh
uh
Krhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Krhah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
out_degreehNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Krhah
hH
]
r
h
X
out_degreer
!
r
"
}
r
#
(
hMU
hNj
ubaubj
)
r
}
r
%
(
hMU
hNj
hOhRhTj
hV
}
r
&
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Krhah
hH
]
r
'
j
)
r
(
}
r
)
(
hMX
nodehV
}
r
*
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
+
h
X
noder
r
-
}
r
.
(
hMU
hNj
(
ubahTj
ubaubeubj
)
r
/
}
r0
(
hMU
hNj
hOhRhTj
#
hV
}
r1
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Krhah
hH
]
r2
h
)
r3
}
r4
(
hMX
/
Return
the
number
of
outgoing
edges
for
*
node
*
.
hNj
/
hOhRhTh
hV
}
r5
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kqhah
hH
]
r6
(
h
X
(
Return
the
number
of
outgoing
edges
for
r7
r8
}
r9
(
hMX
(
Return
the
number
of
outgoing
edges
for
hNj3
ubh
)
r
:
}
r
;
(
hMX
*
node
*
hV
}
r
<
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj3
hH
]
r
=
h
X
noder
>
r
?
}
r
(
hMU
hNj
:
ubahTh
ubh
X
.
rA
}
rB
(
hMX
.
hNj3
ubeubaubeubh
)
rC
}
rD
(
hMU
hNjZ
hOhRhTh
hV
}
rE
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
rF
(
h
X
*
inc_degree
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
trG
auh
Nhah
hH
]
ubh
)
rH
}
rI
(
hMU
hNjZ
hOhRhTh
hV
}
rJ
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodrK
h
jK
uh
Nhah
hH
]
rL
(
h
)
rM
}
rN
(
hMX
Graph
.
inc_degree
(
node
)
hNjH
hOhRhTh
hV
}
rO
(
h
[
]
rP
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
rQ
h
ah
X
Graph
.
inc_degreeh
X
Graphh
uh
Kvhah
hH
]
rR
(
h
)
rS
}
rT
(
hMX
Graph
.
hNjM
hOhRhTh
hV
}
rU
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kvhah
hH
]
rV
h
X
Graph
.
rW
rX
}
rY
(
hMU
hNjS
ubaubj
)
rZ
}
r
[
(
hMX
inc_degreehNjM
hOhRhTj
hV
}
r
\
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kvhah
hH
]
r
]
h
X
inc_degreer
^
r_
}
r
(
hMU
hNjZ
ubaubj
)
ra
}
rb
(
hMU
hNjM
hOhRhTj
hV
}
rc
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kvhah
hH
]
rd
j
)
re
}
rf
(
hMX
nodehV
}
rg
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNja
hH
]
rh
h
X
noderi
rj
}
rk
(
hMU
hNje
ubahTj
ubaubeubj
)
rl
}
rm
(
hMU
hNjH
hOhRhTj
#
hV
}
rn
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kvhah
hH
]
ro
h
)
rp
}
rq
(
hMX
/
Return
the
number
of
incoming
edges
for
*
node
*
.
hNjl
hOhRhTh
hV
}
rr
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kuhah
hH
]
rs
(
h
X
(
Return
the
number
of
incoming
edges
for
rt
ru
}
rv
(
hMX
(
Return
the
number
of
incoming
edges
for
hNjp
ubh
)
rw
}
rx
(
hMX
*
node
*
hV
}
ry
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjp
hH
]
rz
h
X
noder
{
r
|
}
r
}
(
hMU
hNjw
ubahTh
ubh
X
.
r
~
}
r
(
hMX
.
hNjp
ubeubaubeubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
*
all_degree
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjZ
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
all_degree
(
node
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
all_degreeh
X
Graphh
uh
Kzhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kzhah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
all_degreehNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kzhah
hH
]
r
h
X
all_degreer
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kzhah
hH
]
r
j
)
r
}
r
(
hMX
nodehV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTj
ubaubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kzhah
hH
]
r
h
)
r
}
r
(
hMX
=
Return
the
number
of
edges
(
incoming
or
outgoing
)
for
*
node
*
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
Kyhah
hH
]
r
(
h
X6
Return
the
number
of
edges
(
incoming
or
outgoing
)
for
r
r
}
r
(
hMX6
Return
the
number
of
edges
(
incoming
or
outgoing
)
for
hNj
ubh
)
r
}
r
(
hMX
*
node
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTh
ubh
X
.
r
}
r
(
hMX
.
hNj
ubeubaubeubeubhJ
)
r
}
r
(
hMU
hNhKhOhRhThUhV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
r
hCah
^
]
r
h
auh
K
|
hah
hH
]
r
(
hc
)
r
}
r
(
hMX
Edge
related
methodsr
hNj
hOhRhThghV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
|
hah
hH
]
r
h
X
Edge
related
methodsr
r
}
r
(
hMj
hNj
ubaubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
(
add_edge
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
!
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
?
Graph
.
add_edge
(
head_id
tail_id
[
edge
data
[
create_nodes
]
]
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
!
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
!
ah
X
Graph
.
add_edgeh
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
add_edgehNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
add_edger
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
j
)
r
}
r
(
hMX
head_idhV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
head_idr
r
}
r
(
hMU
hNj
ubahTj
ubj
)
r
}
r
(
hMX
tail_idhV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
tail_idr
r
}
r
(
hMU
hNj
ubahTj
ubj
)
r
}
r
(
hMU
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
(
j
)
r
}
r
(
hMX
edge
datahV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
edge
datar
r
}
r
(
hMU
hNj
ubahTj
ubj
)
r
}
r
(
hMU
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
j
)
r
}
r
(
hMX
create_nodeshV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
create_nodesr
r
}
r
(
hMU
hNj
ubahTj
ubahTj
ubehTj
ubeubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
)
r
}
r
(
hMX
Adds
a
directed
edge
from
*
head_id
*
to
*
tail_id
*
.
Arbitrary
data
can
be
added
via
*
edge_data
*
.
When
*
create_nodes
*
is
*
True
*
(
the
default
)
*
head_id
*
and
*
tail_id
*
will
be
added
to
the
graph
when
the
aren
'
t
already
present
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
X
Adds
a
directed
edge
from
r
r
}
r
(
hMX
Adds
a
directed
edge
from
hNj
ubh
)
r
}
r
(
hMX
*
head_id
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
head_idr
r
!
}
r
"
(
hMU
hNj
ubahTh
ubh
X
to
r
#
r
}
r
%
(
hMX
to
hNj
ubh
)
r
&
}
r
'
(
hMX
*
tail_id
*
hV
}
r
(
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
)
h
X
tail_idr
*
r
+
}
r
(
hMU
hNj
&
ubahTh
ubh
X
"
.
Arbitrary
data
can
be
added
via
r
-
r
.
}
r
/
(
hMX
"
.
Arbitrary
data
can
be
added
via
hNj
ubh
)
r0
}
r1
(
hMX
*
edge_data
*
hV
}
r2
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r3
h
X
edge_datar4
r5
}
r6
(
hMU
hNj0
ubahTh
ubh
X
.
When
r7
r8
}
r9
(
hMX
.
When
hNj
ubh
)
r
:
}
r
;
(
hMX
*
create_nodes
*
hV
}
r
<
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
=
h
X
create_nodesr
>
r
?
}
r
(
hMU
hNj
:
ubahTh
ubh
X
is
rA
rB
}
rC
(
hMX
is
hNj
ubh
)
rD
}
rE
(
hMX
*
True
*
hV
}
rF
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
rG
h
X
TruerH
rI
}
rJ
(
hMU
hNjD
ubahTh
ubh
X
(
the
default
)
rK
rL
}
rM
(
hMX
(
the
default
)
hNj
ubh
)
rN
}
rO
(
hMX
*
head_id
*
hV
}
rP
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
rQ
h
X
head_idrR
rS
}
rT
(
hMU
hNjN
ubahTh
ubh
X
and
rU
rV
}
rW
(
hMX
and
hNj
ubh
)
rX
}
rY
(
hMX
*
tail_id
*
hV
}
rZ
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
[
h
X
tail_idr
\
r
]
}
r
^
(
hMU
hNjX
ubahTh
ubh
X
<
will
be
added
to
the
graph
when
the
aren
'
t
already
present
.
r_
r
}
ra
(
hMX
<
will
be
added
to
the
graph
when
the
aren
'
t
already
present
.
hNj
ubeubaubeubh
)
rb
}
rc
(
hMU
hNj
hOhRhTh
hV
}
rd
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
re
(
h
X
)
hide_edge
(
)
(
altgraph
.
Graph
.
Graph
method
)
h1U
trf
auh
Nhah
hH
]
ubh
)
rg
}
rh
(
hMU
hNj
hOhRhTh
hV
}
ri
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodrj
h
jj
uh
Nhah
hH
]
rk
(
h
)
rl
}
rm
(
hMX
Graph
.
hide_edge
(
edge
)
hNjg
hOhRhTh
hV
}
rn
(
h
[
]
ro
h1ah
h
hZ
]
hX
]
hY
]
h
^
]
rp
h1ah
X
Graph
.
hide_edgeh
X
Graphh
uh
K
hah
hH
]
rq
(
h
)
rr
}
rs
(
hMX
Graph
.
hNjl
hOhRhTh
hV
}
rt
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
ru
h
X
Graph
.
rv
rw
}
rx
(
hMU
hNjr
ubaubj
)
ry
}
rz
(
hMX
hide_edgehNjl
hOhRhTj
hV
}
r
{
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
|
h
X
hide_edger
}
r
~
}
r
(
hMU
hNjy
ubaubj
)
r
}
r
(
hMU
hNjl
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
j
)
r
}
r
(
hMX
edgehV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
edger
r
}
r
(
hMU
hNj
ubahTj
ubaubeubj
)
r
}
r
(
hMU
hNjg
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
)
r
}
r
(
hMXJ
Hides
an
edge
from
the
graph
.
The
edge
may
be
unhidden
at
some
later
time
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
XJ
Hides
an
edge
from
the
graph
.
The
edge
may
be
unhidden
at
some
later
time
.
r
r
}
r
(
hMj
hNj
ubaubaubeubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
restore_edge
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
restore_edge
(
edge
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
restore_edgeh
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
restore_edgehNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
restore_edger
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
j
)
r
}
r
(
hMX
edgehV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
edger
r
}
r
(
hMU
hNj
ubahTj
ubaubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
)
r
}
r
(
hMX
Restores
a
previously
hidden
*
edge
*
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
X
Restores
a
previously
hidden
r
r
}
r
(
hMX
Restores
a
previously
hidden
hNj
ubh
)
r
}
r
(
hMX
*
edge
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
edger
r
}
r
(
hMU
hNj
ubahTh
ubh
X
.
r
}
r
(
hMX
.
hNj
ubeubaubeubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X1
restore_all_edges
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
restore_all_edges
(
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
restore_all_edgesh
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
restore_all_edgeshNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
restore_all_edgesr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
ubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
)
r
}
r
(
hMXV
Restore
all
edges
that
were
hidden
before
except
for
edges
referring
to
hidden
nodes
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
XV
Restore
all
edges
that
were
hidden
before
except
for
edges
referring
to
hidden
nodes
.
r
r
}
r
(
hMj
hNj
ubaubaubeubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
edge_by_node
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
)
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
edge_by_node
(
head
tail
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
)
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
)
ah
X
Graph
.
edge_by_nodeh
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
edge_by_nodehNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
edge_by_noder
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
!
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
"
(
j
)
r
#
}
r
(
hMX
headhV
}
r
%
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
&
h
X
headr
'
r
(
}
r
)
(
hMU
hNj
#
ubahTj
ubj
)
r
*
}
r
+
(
hMX
tailhV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
-
h
X
tailr
.
r
/
}
r0
(
hMU
hNj
*
ubahTj
ubeubeubj
)
r1
}
r2
(
hMU
hNj
hOhRhTj
#
hV
}
r3
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r4
h
)
r5
}
r6
(
hMX_
Return
the
edge
ID
for
an
edge
from
*
head
*
to
*
tail
*
or
:
data
:
None
when
no
such
edge
exists
.
hNj1
hOhRhTh
hV
}
r7
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r8
(
h
X
Return
the
edge
ID
for
an
edge
from
r9
r
:
}
r
;
(
hMX
Return
the
edge
ID
for
an
edge
from
hNj5
ubh
)
r
<
}
r
=
(
hMX
*
head
*
hV
}
r
>
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj5
hH
]
r
?
h
X
headr
rA
}
rB
(
hMU
hNj
<
ubahTh
ubh
X
to
rC
rD
}
rE
(
hMX
to
hNj5
ubh
)
rF
}
rG
(
hMX
*
tail
*
hV
}
rH
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj5
hH
]
rI
h
X
tailrJ
rK
}
rL
(
hMU
hNjF
ubahTh
ubh
X
or
rM
rN
}
rO
(
hMX
or
hNj5
ubhj
)
rP
}
rQ
(
hMX
:
data
:
None
rR
hNj5
hOhRhThnhV
}
rS
(
U
reftypeX
datahp
hqX
NoneU
refdomainX
pyrT
h
[
]
hZ
]
U
refexplicit
hX
]
hY
]
h
^
]
hshthuX
Graphhvh
uh
K
hH
]
rU
hx
)
rV
}
rW
(
hMjR
hV
}
rX
(
hX
]
hY
]
rY
(
h
}
jT
X
py
-
datarZ
ehZ
]
h
[
]
h
^
]
uhNjP
hH
]
r
[
h
X
Noner
\
r
]
}
r
^
(
hMU
hNjV
ubahTh
ubaubh
X
when
no
such
edge
exists
.
r_
r
}
ra
(
hMX
when
no
such
edge
exists
.
hNj5
ubeubaubeubh
)
rb
}
rc
(
hMU
hNj
hOhRhTh
hV
}
rd
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
re
(
h
X
*
edge_by_id
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
*
U
trf
auh
Nhah
hH
]
ubh
)
rg
}
rh
(
hMU
hNj
hOhRhTh
hV
}
ri
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodrj
h
jj
uh
Nhah
hH
]
rk
(
h
)
rl
}
rm
(
hMX
Graph
.
edge_by_id
(
edge
)
hNjg
hOhRhTh
hV
}
rn
(
h
[
]
ro
h
*
ah
h
hZ
]
hX
]
hY
]
h
^
]
rp
h
*
ah
X
Graph
.
edge_by_idh
X
Graphh
uh
K
hah
hH
]
rq
(
h
)
rr
}
rs
(
hMX
Graph
.
hNjl
hOhRhTh
hV
}
rt
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
ru
h
X
Graph
.
rv
rw
}
rx
(
hMU
hNjr
ubaubj
)
ry
}
rz
(
hMX
edge_by_idhNjl
hOhRhTj
hV
}
r
{
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
|
h
X
edge_by_idr
}
r
~
}
r
(
hMU
hNjy
ubaubj
)
r
}
r
(
hMU
hNjl
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
j
)
r
}
r
(
hMX
edgehV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
edger
r
}
r
(
hMU
hNj
ubahTj
ubaubeubj
)
r
}
r
(
hMU
hNjg
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
)
r
}
r
(
hMX
&
Return
the
head
and
tail
of
the
*
edge
*
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
X
Return
the
head
and
tail
of
the
r
r
}
r
(
hMX
Return
the
head
and
tail
of
the
hNj
ubh
)
r
}
r
(
hMX
*
edge
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
edger
r
}
r
(
hMU
hNj
ubahTh
ubeubaubeubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
)
edge_data
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
edge_data
(
edge
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
edge_datah
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
edge_datahNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
edge_datar
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
j
)
r
}
r
(
hMX
edgehV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
edger
r
}
r
(
hMU
hNj
ubahTj
ubaubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
)
r
}
r
(
hMX
+
Return
the
data
associated
with
the
*
edge
*
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
X
Return
the
data
associated
with
the
r
r
}
r
(
hMX
Return
the
data
associated
with
the
hNj
ubh
)
r
}
r
(
hMX
*
edge
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
edger
r
}
r
(
hMU
hNj
ubahTh
ubh
X
.
r
}
r
(
hMX
.
hNj
ubeubaubeubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
head
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
head
(
edge
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
headh
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
headhNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
headr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
j
)
r
}
r
(
hMX
edgehV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
edger
r
}
r
(
hMU
hNj
ubahTj
ubaubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
)
r
}
r
(
hMX
Return
the
head
of
an
*
edge
*
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
X
Return
the
head
of
an
r
r
}
r
(
hMX
Return
the
head
of
an
hNj
ubh
)
r
}
r
(
hMX
*
edge
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
edger
r
}
r
(
hMU
hNj
ubahTh
ubeubaubeubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
tail
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
#
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
tail
(
edge
)
hNj
hOhRhTh
hV
}
r
!
(
h
[
]
r
"
h
#
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
#
h
#
ah
X
Graph
.
tailh
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
%
}
r
&
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
'
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
X
Graph
.
r
)
r
*
}
r
+
(
hMU
hNj
%
ubaubj
)
r
}
r
-
(
hMX
tailhNj
hOhRhTj
hV
}
r
.
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
/
h
X
tailr0
r1
}
r2
(
hMU
hNj
ubaubj
)
r3
}
r4
(
hMU
hNj
hOhRhTj
hV
}
r5
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r6
j
)
r7
}
r8
(
hMX
edgehV
}
r9
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj3
hH
]
r
:
h
X
edger
;
r
<
}
r
=
(
hMU
hNj7
ubahTj
ubaubeubj
)
r
>
}
r
?
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rA
h
)
rB
}
rC
(
hMX
Return
the
tail
of
an
*
edge
*
hNj
>
hOhRhTh
hV
}
rD
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rE
(
h
X
Return
the
tail
of
an
rF
rG
}
rH
(
hMX
Return
the
tail
of
an
hNjB
ubh
)
rI
}
rJ
(
hMX
*
edge
*
hV
}
rK
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjB
hH
]
rL
h
X
edgerM
rN
}
rO
(
hMU
hNjI
ubahTh
ubeubaubeubh
)
rP
}
rQ
(
hMU
hNj
hOhRhTh
hV
}
rR
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
rS
(
h
X
-
describe_edge
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
trT
auh
Nhah
hH
]
ubh
)
rU
}
rV
(
hMU
hNj
hOhRhTh
hV
}
rW
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodrX
h
jX
uh
Nhah
hH
]
rY
(
h
)
rZ
}
r
[
(
hMX
Graph
.
describe_edge
(
edge
)
hNjU
hOhRhTh
hV
}
r
\
(
h
[
]
r
]
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
^
h
ah
X
Graph
.
describe_edgeh
X
Graphh
uh
K
hah
hH
]
r_
(
h
)
r
}
ra
(
hMX
Graph
.
hNjZ
hOhRhTh
hV
}
rb
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rc
h
X
Graph
.
rd
re
}
rf
(
hMU
hNj
ubaubj
)
rg
}
rh
(
hMX
describe_edgehNjZ
hOhRhTj
hV
}
ri
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rj
h
X
describe_edgerk
rl
}
rm
(
hMU
hNjg
ubaubj
)
rn
}
ro
(
hMU
hNjZ
hOhRhTj
hV
}
rp
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rq
j
)
rr
}
rs
(
hMX
edgehV
}
rt
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjn
hH
]
ru
h
X
edgerv
rw
}
rx
(
hMU
hNjr
ubahTj
ubaubeubj
)
ry
}
rz
(
hMU
hNjU
hOhRhTj
#
hV
}
r
{
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
|
h
)
r
}
}
r
~
(
hMX
:
Return
the
*
edge
*
the
associated
data
its
head
and
tail
.
hNjy
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
X
Return
the
r
r
}
r
(
hMX
Return
the
hNj
}
ubh
)
r
}
r
(
hMX
*
edge
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
}
hH
]
r
h
X
edger
r
}
r
(
hMU
hNj
ubahTh
ubh
X
)
the
associated
data
its
head
and
tail
.
r
r
}
r
(
hMX
)
the
associated
data
its
head
and
tail
.
hNj
}
ubeubaubeubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
/
number_of_edges
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
number_of_edges
(
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
number_of_edgesh
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
number_of_edgeshNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
number_of_edgesr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
ubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
)
r
}
r
(
hMX
#
Return
the
number
of
visible
edges
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
#
Return
the
number
of
visible
edges
.
r
r
}
r
(
hMj
hNj
ubaubaubeubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X6
number_of_hidden_edges
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
number_of_hidden_edges
(
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
number_of_hidden_edgesh
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
number_of_hidden_edgeshNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
number_of_hidden_edgesr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
ubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
)
r
}
r
(
hMX
"
Return
the
number
of
hidden
edges
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
"
Return
the
number
of
hidden
edges
.
r
r
}
r
(
hMj
hNj
ubaubaubeubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
)
edge_list
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
edge_list
(
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
edge_listh
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
edge_listhNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
edge_listr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
ubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
)
r
}
r
(
hMX3
Returns
a
list
with
all
visible
edges
in
the
graph
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X3
Returns
a
list
with
all
visible
edges
in
the
graph
.
r
r
}
r
(
hMj
hNj
ubaubaubeubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X0
hidden_edge_list
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hidden_edge_list
(
)
hNj
hOhRhTh
hV
}
r
!
(
h
[
]
r
"
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
#
h
ah
X
Graph
.
hidden_edge_listh
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
%
}
r
&
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
'
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
X
Graph
.
r
)
r
*
}
r
+
(
hMU
hNj
%
ubaubj
)
r
}
r
-
(
hMX
hidden_edge_listhNj
hOhRhTj
hV
}
r
.
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
/
h
X
hidden_edge_listr0
r1
}
r2
(
hMU
hNj
ubaubj
)
r3
}
r4
(
hMU
hNj
hOhRhTj
hV
}
r5
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
ubeubj
)
r6
}
r7
(
hMU
hNj
hOhRhTj
#
hV
}
r8
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r9
h
)
r
:
}
r
;
(
hMX2
Returns
a
list
with
all
hidden
edges
in
the
graph
.
r
<
hNj6
hOhRhTh
hV
}
r
=
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
>
h
X2
Returns
a
list
with
all
hidden
edges
in
the
graph
.
r
?
r
}
rA
(
hMj
<
hNj
:
ubaubaubeubeubhJ
)
rB
}
rC
(
hMU
hNhKhOhRhThUhV
}
rD
(
hX
]
hY
]
hZ
]
h
[
]
rE
hGah
^
]
rF
h7auh
K
hah
hH
]
rG
(
hc
)
rH
}
rI
(
hMX
Graph
traversalrJ
hNjB
hOhRhThghV
}
rK
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rL
h
X
Graph
traversalrM
rN
}
rO
(
hMjJ
hNjH
ubaubh
)
rP
}
rQ
(
hMU
hNjB
hOhRhTh
hV
}
rR
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
rS
(
h
X
(
out_nbrs
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
trT
auh
Nhah
hH
]
ubh
)
rU
}
rV
(
hMU
hNjB
hOhRhTh
hV
}
rW
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodrX
h
jX
uh
Nhah
hH
]
rY
(
h
)
rZ
}
r
[
(
hMX
Graph
.
out_nbrs
(
node
)
hNjU
hOhRhTh
hV
}
r
\
(
h
[
]
r
]
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
^
h
ah
X
Graph
.
out_nbrsh
X
Graphh
uh
K
hah
hH
]
r_
(
h
)
r
}
ra
(
hMX
Graph
.
hNjZ
hOhRhTh
hV
}
rb
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rc
h
X
Graph
.
rd
re
}
rf
(
hMU
hNj
ubaubj
)
rg
}
rh
(
hMX
out_nbrshNjZ
hOhRhTj
hV
}
ri
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rj
h
X
out_nbrsrk
rl
}
rm
(
hMU
hNjg
ubaubj
)
rn
}
ro
(
hMU
hNjZ
hOhRhTj
hV
}
rp
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rq
j
)
rr
}
rs
(
hMX
nodehV
}
rt
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjn
hH
]
ru
h
X
noderv
rw
}
rx
(
hMU
hNjr
ubahTj
ubaubeubj
)
ry
}
rz
(
hMU
hNjU
hOhRhTj
#
hV
}
r
{
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
|
h
)
r
}
}
r
~
(
hMX7
Return
a
list
of
all
nodes
connected
by
outgoing
edges
.
r
hNjy
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X7
Return
a
list
of
all
nodes
connected
by
outgoing
edges
.
r
r
}
r
(
hMj
hNj
}
ubaubaubeubh
)
r
}
r
(
hMU
hNjB
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
(
inc_nbrs
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjB
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
inc_nbrs
(
node
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
inc_nbrsh
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
inc_nbrshNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
inc_nbrsr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
j
)
r
}
r
(
hMX
nodehV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTj
ubaubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
)
r
}
r
(
hMX7
Return
a
list
of
all
nodes
connected
by
incoming
edges
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X7
Return
a
list
of
all
nodes
connected
by
incoming
edges
.
r
r
}
r
(
hMj
hNj
ubaubaubeubh
)
r
}
r
(
hMU
hNjB
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
(
all_nbrs
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjB
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
all_nbrs
(
node
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
all_nbrsh
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
all_nbrshNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
all_nbrsr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
j
)
r
}
r
(
hMX
nodehV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
noder
r
}
r
(
hMU
hNj
ubahTj
ubaubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
)
r
}
r
(
hMXB
Returns
a
list
of
nodes
connected
by
an
incoming
or
outgoing
edge
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
XB
Returns
a
list
of
nodes
connected
by
an
incoming
or
outgoing
edge
.
r
r
}
r
(
hMj
hNj
ubaubaubeubh
)
r
}
r
(
hMU
hNjB
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
.
forw_topo_sort
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjB
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
forw_topo_sort
(
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
forw_topo_sorth
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
forw_topo_sorthNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
forw_topo_sortr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
ubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
)
r
}
r
(
hMX
~
Return
a
list
of
nodes
where
the
successors
(
based
on
outgoing
edges
)
of
any
given
node
apear
in
the
sequence
after
that
node
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
~
Return
a
list
of
nodes
where
the
successors
(
based
on
outgoing
edges
)
of
any
given
node
apear
in
the
sequence
after
that
node
.
r
r
}
r
(
hMj
hNj
ubaubaubeubh
)
r
}
r
(
hMU
hNjB
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
.
back_topo_sort
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
!
}
r
"
(
hMU
hNjB
hOhRhTh
hV
}
r
#
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
%
(
h
)
r
&
}
r
'
(
hMX
Graph
.
back_topo_sort
(
)
hNj
!
hOhRhTh
hV
}
r
(
(
h
[
]
r
)
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
*
h
ah
X
Graph
.
back_topo_sorth
X
Graphh
uh
K
hah
hH
]
r
+
(
h
)
r
}
r
-
(
hMX
Graph
.
hNj
&
hOhRhTh
hV
}
r
.
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
/
h
X
Graph
.
r0
r1
}
r2
(
hMU
hNj
ubaubj
)
r3
}
r4
(
hMX
back_topo_sorthNj
&
hOhRhTj
hV
}
r5
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r6
h
X
back_topo_sortr7
r8
}
r9
(
hMU
hNj3
ubaubj
)
r
:
}
r
;
(
hMU
hNj
&
hOhRhTj
hV
}
r
<
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
ubeubj
)
r
=
}
r
>
(
hMU
hNj
!
hOhRhTj
#
hV
}
r
?
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
)
rA
}
rB
(
hMX
~
Return
a
list
of
nodes
where
the
successors
(
based
on
incoming
edges
)
of
any
given
node
apear
in
the
sequence
after
that
node
.
rC
hNj
=
hOhRhTh
hV
}
rD
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rE
h
X
~
Return
a
list
of
nodes
where
the
successors
(
based
on
incoming
edges
)
of
any
given
node
apear
in
the
sequence
after
that
node
.
rF
rG
}
rH
(
hMjC
hNjA
ubaubaubeubh
)
rI
}
rJ
(
hMU
hNjB
hOhRhTh
hV
}
rK
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
rL
(
h
X1
forw_bfs_subgraph
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
trM
auh
Nhah
hH
]
ubh
)
rN
}
rO
(
hMU
hNjB
hOhRhTh
hV
}
rP
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodrQ
h
jQ
uh
Nhah
hH
]
rR
(
h
)
rS
}
rT
(
hMX
!
Graph
.
forw_bfs_subgraph
(
start_id
)
hNjN
hOhRhTh
hV
}
rU
(
h
[
]
rV
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
rW
h
ah
X
Graph
.
forw_bfs_subgraphh
X
Graphh
uh
K
hah
hH
]
rX
(
h
)
rY
}
rZ
(
hMX
Graph
.
hNjS
hOhRhTh
hV
}
r
[
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
\
h
X
Graph
.
r
]
r
^
}
r_
(
hMU
hNjY
ubaubj
)
r
}
ra
(
hMX
forw_bfs_subgraphhNjS
hOhRhTj
hV
}
rb
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rc
h
X
forw_bfs_subgraphrd
re
}
rf
(
hMU
hNj
ubaubj
)
rg
}
rh
(
hMU
hNjS
hOhRhTj
hV
}
ri
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rj
j
)
rk
}
rl
(
hMX
start_idhV
}
rm
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjg
hH
]
rn
h
X
start_idro
rp
}
rq
(
hMU
hNjk
ubahTj
ubaubeubj
)
rr
}
rs
(
hMU
hNjN
hOhRhTj
#
hV
}
rt
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
ru
h
)
rv
}
rw
(
hMXp
Return
a
subgraph
consisting
of
the
breadth
first
reachable
nodes
from
*
start_id
*
based
on
their
outgoing
edges
.
hNjr
hOhRhTh
hV
}
rx
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
ry
(
h
XG
Return
a
subgraph
consisting
of
the
breadth
first
reachable
nodes
from
rz
r
{
}
r
|
(
hMXG
Return
a
subgraph
consisting
of
the
breadth
first
reachable
nodes
from
hNjv
ubh
)
r
}
}
r
~
(
hMX
*
start_id
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjv
hH
]
r
h
X
start_idr
r
}
r
(
hMU
hNj
}
ubahTh
ubh
X
based
on
their
outgoing
edges
.
r
r
}
r
(
hMX
based
on
their
outgoing
edges
.
hNjv
ubeubaubeubh
)
r
}
r
(
hMU
hNjB
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X1
back_bfs_subgraph
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
'
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjB
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
!
Graph
.
back_bfs_subgraph
(
start_id
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
'
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
'
ah
X
Graph
.
back_bfs_subgraphh
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
back_bfs_subgraphhNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
back_bfs_subgraphr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
j
)
r
}
r
(
hMX
start_idhV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
start_idr
r
}
r
(
hMU
hNj
ubahTj
ubaubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
)
r
}
r
(
hMXp
Return
a
subgraph
consisting
of
the
breadth
first
reachable
nodes
from
*
start_id
*
based
on
their
incoming
edges
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
XG
Return
a
subgraph
consisting
of
the
breadth
first
reachable
nodes
from
r
r
}
r
(
hMXG
Return
a
subgraph
consisting
of
the
breadth
first
reachable
nodes
from
hNj
ubh
)
r
}
r
(
hMX
*
start_id
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
start_idr
r
}
r
(
hMU
hNj
ubahTh
ubh
X
based
on
their
incoming
edges
.
r
r
}
r
(
hMX
based
on
their
incoming
edges
.
hNj
ubeubaubeubh
)
r
}
r
(
hMU
hNjB
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
'
iterdfs
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjB
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
&
Graph
.
iterdfs
(
start
[
end
[
forward
]
]
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
iterdfsh
X
Graphh
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
iterdfshNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
iterdfsr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
j
)
r
}
r
(
hMX
starthV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
startr
r
}
r
(
hMU
hNj
ubahTj
ubj
)
r
}
r
(
hMU
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
(
j
)
r
}
r
(
hMX
endhV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
endr
r
}
r
(
hMU
hNj
ubahTj
ubj
)
r
}
r
(
hMU
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
j
)
r
}
r
(
hMX
forwardhV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
forwardr
r
}
r
(
hMU
hNj
ubahTj
ubahTj
ubehTj
ubeubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMXD
Yield
nodes
in
a
depth
first
traversal
starting
at
the
*
start
*
node
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
X7
Yield
nodes
in
a
depth
first
traversal
starting
at
the
r
r
}
r
(
hMX7
Yield
nodes
in
a
depth
first
traversal
starting
at
the
hNj
ubh
)
r
}
r
(
hMX
*
start
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
startr
r
}
r
(
hMU
hNj
ubahTh
ubh
X
node
.
r
r
}
r
(
hMX
node
.
hNj
ubeubh
)
r
}
r
(
hMX
>
If
*
end
*
is
specified
traversal
stops
when
reaching
that
node
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
X
If
r
r
}
r
(
hMX
If
hNj
ubh
)
r
}
r
!
(
hMX
*
end
*
hV
}
r
"
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
#
h
X
endr
r
%
}
r
&
(
hMU
hNj
ubahTh
ubh
X6
is
specified
traversal
stops
when
reaching
that
node
.
r
'
r
(
}
r
)
(
hMX6
is
specified
traversal
stops
when
reaching
that
node
.
hNj
ubeubh
)
r
*
}
r
+
(
hMX
}
If
forward
is
True
(
the
default
)
edges
are
traversed
in
forward
direction
otherwise
they
are
traversed
in
reverse
direction
.
r
hNj
hOhRhTh
hV
}
r
-
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
.
h
X
}
If
forward
is
True
(
the
default
)
edges
are
traversed
in
forward
direction
otherwise
they
are
traversed
in
reverse
direction
.
r
/
r0
}
r1
(
hMj
hNj
*
ubaubeubeubh
)
r2
}
r3
(
hMU
hNjB
hOhRhTh
hV
}
r4
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r5
(
h
X
(
iterdata
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
&
U
tr6
auh
Nhah
hH
]
ubh
)
r7
}
r8
(
hMU
hNjB
hOhRhTh
hV
}
r9
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
:
h
j
:
uh
Nhah
hH
]
r
;
(
h
)
r
<
}
r
=
(
hMX4
Graph
.
iterdata
(
start
[
end
[
forward
[
condition
]
]
]
)
hNj7
hOhRhTh
hV
}
r
>
(
h
[
]
r
?
h
&
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
&
ah
X
Graph
.
iterdatah
X
Graphh
uh
K
hah
hH
]
rA
(
h
)
rB
}
rC
(
hMX
Graph
.
hNj
<
hOhRhTh
hV
}
rD
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rE
h
X
Graph
.
rF
rG
}
rH
(
hMU
hNjB
ubaubj
)
rI
}
rJ
(
hMX
iterdatahNj
<
hOhRhTj
hV
}
rK
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rL
h
X
iterdatarM
rN
}
rO
(
hMU
hNjI
ubaubj
)
rP
}
rQ
(
hMU
hNj
<
hOhRhTj
hV
}
rR
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
rS
(
j
)
rT
}
rU
(
hMX
starthV
}
rV
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjP
hH
]
rW
h
X
startrX
rY
}
rZ
(
hMU
hNjT
ubahTj
ubj
)
r
[
}
r
\
(
hMU
hV
}
r
]
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjP
hH
]
r
^
(
j
)
r_
}
r
(
hMX
endhV
}
ra
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
[
hH
]
rb
h
X
endrc
rd
}
re
(
hMU
hNj_
ubahTj
ubj
)
rf
}
rg
(
hMU
hV
}
rh
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
[
hH
]
ri
(
j
)
rj
}
rk
(
hMX
forwardhV
}
rl
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjf
hH
]
rm
h
X
forwardrn
ro
}
rp
(
hMU
hNjj
ubahTj
ubj
)
rq
}
rr
(
hMU
hV
}
rs
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjf
hH
]
rt
j
)
ru
}
rv
(
hMX
conditionhV
}
rw
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjq
hH
]
rx
h
X
conditionry
rz
}
r
{
(
hMU
hNju
ubahTj
ubahTj
ubehTj
ubehTj
ubeubeubj
)
r
|
}
r
}
(
hMU
hNj7
hOhRhTj
#
hV
}
r
~
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Yield
the
associated
data
for
nodes
in
a
depth
first
traversal
starting
at
the
*
start
*
node
.
This
method
will
not
yield
values
for
nodes
without
associated
data
.
hNj
|
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
XO
Yield
the
associated
data
for
nodes
in
a
depth
first
traversal
starting
at
the
r
r
}
r
(
hMXO
Yield
the
associated
data
for
nodes
in
a
depth
first
traversal
starting
at
the
hNj
ubh
)
r
}
r
(
hMX
*
start
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
startr
r
}
r
(
hMU
hNj
ubahTh
ubh
XK
node
.
This
method
will
not
yield
values
for
nodes
without
associated
data
.
r
r
}
r
(
hMXK
node
.
This
method
will
not
yield
values
for
nodes
without
associated
data
.
hNj
ubeubh
)
r
}
r
(
hMX
>
If
*
end
*
is
specified
traversal
stops
when
reaching
that
node
.
hNj
|
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
X
If
r
r
}
r
(
hMX
If
hNj
ubh
)
r
}
r
(
hMX
*
end
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
endr
r
}
r
(
hMU
hNj
ubahTh
ubh
X6
is
specified
traversal
stops
when
reaching
that
node
.
r
r
}
r
(
hMX6
is
specified
traversal
stops
when
reaching
that
node
.
hNj
ubeubh
)
r
}
r
(
hMX
If
*
condition
*
is
specified
and
the
condition
callable
returns
False
for
the
associated
data
this
method
will
not
yield
the
associated
data
and
will
not
follow
the
edges
for
the
node
.
hNj
|
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
X
If
r
r
}
r
(
hMX
If
hNj
ubh
)
r
}
r
(
hMX
*
condition
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
conditionr
r
}
r
(
hMU
hNj
ubahTh
ubh
X
is
specified
and
the
condition
callable
returns
False
for
the
associated
data
this
method
will
not
yield
the
associated
data
and
will
not
follow
the
edges
for
the
node
.
r
r
}
r
(
hMX
is
specified
and
the
condition
callable
returns
False
for
the
associated
data
this
method
will
not
yield
the
associated
data
and
will
not
follow
the
edges
for
the
node
.
hNj
ubeubh
)
r
}
r
(
hMX
}
If
forward
is
True
(
the
default
)
edges
are
traversed
in
forward
direction
otherwise
they
are
traversed
in
reverse
direction
.
r
hNj
|
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
h
X
}
If
forward
is
True
(
the
default
)
edges
are
traversed
in
forward
direction
otherwise
they
are
traversed
in
reverse
direction
.
r
r
}
r
(
hMj
hNj
ubaubeubeubh
)
r
}
r
(
hMU
hNjB
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
(
forw_bfs
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjB
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
forw_bfs
(
start
[
end
]
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
ah
X
Graph
.
forw_bfsh
X
Graphh
uh
M
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
forw_bfshNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
h
X
forw_bfsr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNj
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
(
j
)
r
}
r
(
hMX
starthV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
startr
r
}
r
(
hMU
hNj
ubahTj
ubj
)
r
}
r
(
hMU
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
j
)
r
}
r
(
hMX
endhV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
endr
r
}
r
(
hMU
hNj
ubahTj
ubahTj
ubeubeubj
)
r
}
r
(
hMU
hNj
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
(
h
)
r
}
r
(
hMXh
Returns
a
list
of
nodes
starting
at
*
start
*
in
some
bread
first
search
order
(
following
outgoing
edges
)
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
X
Returns
a
list
of
nodes
starting
at
r
r
}
r
(
hMX
Returns
a
list
of
nodes
starting
at
hNj
ubh
)
r
}
r
(
hMX
*
start
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
startr
r
}
r
(
hMU
hNj
ubahTh
ubh
X
=
in
some
bread
first
search
order
(
following
outgoing
edges
)
.
r
r
}
r
(
hMX
=
in
some
bread
first
search
order
(
following
outgoing
edges
)
.
hNj
ubeubh
)
r
}
r
(
hMX5
When
*
end
*
is
specified
iteration
stops
at
that
node
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
K
hah
hH
]
r
(
h
X
When
r
r
}
r
(
hMX
When
hNj
ubh
)
r
}
r
(
hMX
*
end
*
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
endr
r
}
r
(
hMU
hNj
ubahTh
ubh
X
+
is
specified
iteration
stops
at
that
node
.
r
r
}
r
(
hMX
+
is
specified
iteration
stops
at
that
node
.
hNj
ubeubeubeubh
)
r
}
r
(
hMU
hNjB
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
(
back_bfs
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
/
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNjB
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
back_bfs
(
start
[
end
]
)
hNj
hOhRhTh
hV
}
r
!
(
h
[
]
r
"
h
/
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
#
h
/
ah
X
Graph
.
back_bfsh
X
Graphh
uh
M
hah
hH
]
r
(
h
)
r
%
}
r
&
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
'
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
(
h
X
Graph
.
r
)
r
*
}
r
+
(
hMU
hNj
%
ubaubj
)
r
}
r
-
(
hMX
back_bfshNj
hOhRhTj
hV
}
r
.
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
/
h
X
back_bfsr0
r1
}
r2
(
hMU
hNj
ubaubj
)
r3
}
r4
(
hMU
hNj
hOhRhTj
hV
}
r5
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r6
(
j
)
r7
}
r8
(
hMX
starthV
}
r9
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj3
hH
]
r
:
h
X
startr
;
r
<
}
r
=
(
hMU
hNj7
ubahTj
ubj
)
r
>
}
r
?
(
hMU
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj3
hH
]
rA
j
)
rB
}
rC
(
hMX
endhV
}
rD
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
>
hH
]
rE
h
X
endrF
rG
}
rH
(
hMU
hNjB
ubahTj
ubahTj
ubeubeubj
)
rI
}
rJ
(
hMU
hNj
hOhRhTj
#
hV
}
rK
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
rL
(
h
)
rM
}
rN
(
hMXh
Returns
a
list
of
nodes
starting
at
*
start
*
in
some
bread
first
search
order
(
following
incoming
edges
)
.
hNjI
hOhRhTh
hV
}
rO
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
rP
(
h
X
Returns
a
list
of
nodes
starting
at
rQ
rR
}
rS
(
hMX
Returns
a
list
of
nodes
starting
at
hNjM
ubh
)
rT
}
rU
(
hMX
*
start
*
hV
}
rV
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjM
hH
]
rW
h
X
startrX
rY
}
rZ
(
hMU
hNjT
ubahTh
ubh
X
=
in
some
bread
first
search
order
(
following
incoming
edges
)
.
r
[
r
\
}
r
]
(
hMX
=
in
some
bread
first
search
order
(
following
incoming
edges
)
.
hNjM
ubeubh
)
r
^
}
r_
(
hMX5
When
*
end
*
is
specified
iteration
stops
at
that
node
.
hNjI
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
ra
(
h
X
When
rb
rc
}
rd
(
hMX
When
hNj
^
ubh
)
re
}
rf
(
hMX
*
end
*
hV
}
rg
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
^
hH
]
rh
h
X
endri
rj
}
rk
(
hMU
hNje
ubahTh
ubh
X
+
is
specified
iteration
stops
at
that
node
.
rl
rm
}
rn
(
hMX
+
is
specified
iteration
stops
at
that
node
.
hNj
^
ubeubeubeubh
)
ro
}
rp
(
hMU
hNjB
hOhRhTh
hV
}
rq
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
rr
(
h
X
(
get_hops
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
U
trs
auh
Nhah
hH
]
ubh
)
rt
}
ru
(
hMU
hNjB
hOhRhTh
hV
}
rv
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodrw
h
jw
uh
Nhah
hH
]
rx
(
h
)
ry
}
rz
(
hMX
'
Graph
.
get_hops
(
start
[
end
[
forward
]
]
)
hNjt
hOhRhTh
hV
}
r
{
(
h
[
]
r
|
h
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
}
h
ah
X
Graph
.
get_hopsh
X
Graphh
uh
M
hah
hH
]
r
~
(
h
)
r
}
r
(
hMX
Graph
.
hNjy
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
h
X
Graph
.
r
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMX
get_hopshNjy
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
h
X
get_hopsr
r
}
r
(
hMU
hNj
ubaubj
)
r
}
r
(
hMU
hNjy
hOhRhTj
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
(
j
)
r
}
r
(
hMX
starthV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
startr
r
}
r
(
hMU
hNj
ubahTj
ubj
)
r
}
r
(
hMU
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
(
j
)
r
}
r
(
hMX
endhV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
endr
r
}
r
(
hMU
hNj
ubahTj
ubj
)
r
}
r
(
hMU
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
j
)
r
}
r
(
hMX
forwardhV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
forwardr
r
}
r
(
hMU
hNj
ubahTj
ubahTj
ubehTj
ubeubeubj
)
r
}
r
(
hMU
hNjt
hOhRhTj
#
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
(
h
)
r
}
r
(
hMXH
Computes
the
hop
distance
to
all
nodes
centered
around
a
specified
node
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
h
XH
Computes
the
hop
distance
to
all
nodes
centered
around
a
specified
node
.
r
r
}
r
(
hMj
hNj
ubaubh
)
r
}
r
(
hMX
First
order
neighbours
are
at
hop
1
their
neigbours
are
at
hop
2
etc
.
Uses
:
py
:
meth
:
forw_bfs
or
:
py
:
meth
:
back_bfs
depending
on
the
value
of
the
forward
parameter
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
(
h
XL
First
order
neighbours
are
at
hop
1
their
neigbours
are
at
hop
2
etc
.
Uses
r
r
}
r
(
hMXL
First
order
neighbours
are
at
hop
1
their
neigbours
are
at
hop
2
etc
.
Uses
hNj
ubhj
)
r
}
r
(
hMX
:
py
:
meth
:
forw_bfs
r
hNj
hOhRhThnhV
}
r
(
U
reftypeX
methhp
hqX
forw_bfsU
refdomainX
pyr
h
[
]
hZ
]
U
refexplicit
hX
]
hY
]
h
^
]
hshthuX
Graphr
hvh
uh
M
hH
]
r
hx
)
r
}
r
(
hMj
hV
}
r
(
hX
]
hY
]
r
(
h
}
j
X
py
-
methr
ehZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
forw_bfs
(
)
r
r
}
r
(
hMU
hNj
ubahTh
ubaubh
X
or
r
r
}
r
(
hMX
or
hNj
ubhj
)
r
}
r
(
hMX
:
py
:
meth
:
back_bfs
r
hNj
hOhRhThnhV
}
r
(
U
reftypeX
methhp
hqX
back_bfsU
refdomainX
pyr
h
[
]
hZ
]
U
refexplicit
hX
]
hY
]
h
^
]
hshthuj
hvh
uh
M
hH
]
r
hx
)
r
}
r
(
hMj
hV
}
r
(
hX
]
hY
]
r
(
h
}
j
X
py
-
methr
ehZ
]
h
[
]
h
^
]
uhNj
hH
]
r
h
X
back_bfs
(
)
r
r
}
r
(
hMU
hNj
ubahTh
ubaubh
X1
depending
on
the
value
of
the
forward
parameter
.
r
r
}
r
(
hMX1
depending
on
the
value
of
the
forward
parameter
.
hNj
ubeubh
)
r
}
r
(
hMXz
If
the
distance
between
all
neighbouring
nodes
is
1
the
hop
number
corresponds
to
the
shortest
distance
between
the
nodes
.
r
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
h
Xz
If
the
distance
between
all
neighbouring
nodes
is
1
the
hop
number
corresponds
to
the
shortest
distance
between
the
nodes
.
r
r
}
r
(
hMj
hNj
ubaubh
)
r
}
r
(
hMX
Typical
usage
:
:
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
h
X
Typical
usage
:
r
r
}
r
(
hMX
Typical
usage
:
hNj
ubaubcdocutils
.
nodes
literal_block
r
)
r
}
r
(
hMX
>
>
>
print
graph
.
get_hops
(
1
8
)
>
>
>
[
(
1
0
)
(
2
1
)
(
3
1
)
(
4
2
)
(
5
3
)
(
7
4
)
(
8
5
)
]
#
node
1
is
at
0
hops
#
node
2
is
at
1
hop
#
.
.
.
#
node
8
is
at
5
hopshNj
hOhRhTU
literal_blockr
hV
}
r
(
U
xml
:
spacer
U
preserver
h
[
]
hZ
]
hX
]
hY
]
h
^
]
uh
M
hah
hH
]
r
h
X
>
>
>
print
graph
.
get_hops
(
1
8
)
>
>
>
[
(
1
0
)
(
2
1
)
(
3
1
)
(
4
2
)
(
5
3
)
(
7
4
)
(
8
5
)
]
#
node
1
is
at
0
hops
#
node
2
is
at
1
hop
#
.
.
.
#
node
8
is
at
5
hopsr
r
}
r
(
hMU
hNj
ubaubeubeubeubhJ
)
r
}
r
(
hMU
hNhKhOhRhThUhV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
r
hFah
^
]
r
h
(
auh
M
hah
hH
]
r
(
hc
)
r
}
r
(
hMX
Graph
statisticsr
hNj
hOhRhThghV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
h
X
Graph
statisticsr
r
}
r
(
hMj
hNj
ubaubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
(
h
X
)
connected
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
"
U
tr
auh
Nhah
hH
]
ubh
)
r
}
r
(
hMU
hNj
hOhRhTh
hV
}
r
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodr
h
j
uh
Nhah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
connected
(
)
hNj
hOhRhTh
hV
}
r
(
h
[
]
r
h
"
ah
h
hZ
]
hX
]
hY
]
h
^
]
r
h
"
ah
X
Graph
.
connectedh
X
Graphh
uh
M
hah
hH
]
r
(
h
)
r
}
r
(
hMX
Graph
.
hNj
hOhRhTh
hV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
!
h
X
Graph
.
r
"
r
#
}
r
(
hMU
hNj
ubaubj
)
r
%
}
r
&
(
hMX
connectedhNj
hOhRhTj
hV
}
r
'
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r
(
h
X
connectedr
)
r
*
}
r
+
(
hMU
hNj
%
ubaubj
)
r
}
r
-
(
hMU
hNj
hOhRhTj
hV
}
r
.
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
ubeubj
)
r
/
}
r0
(
hMU
hNj
hOhRhTj
#
hV
}
r1
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
hah
hH
]
r2
h
)
r3
}
r4
(
hMXN
Returns
True
iff
every
node
in
the
graph
can
be
reached
from
every
other
node
.
r5
hNj
/
hOhRhTh
hV
}
r6
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
"
hah
hH
]
r7
h
XN
Returns
True
iff
every
node
in
the
graph
can
be
reached
from
every
other
node
.
r8
r9
}
r
:
(
hMj5
hNj3
ubaubaubeubh
)
r
;
}
r
<
(
hMU
hNj
hOhRhTh
hV
}
r
=
(
h
[
]
hZ
]
hX
]
hY
]
h
^
]
U
entries
]
r
>
(
h
X
*
clust_coef
(
)
(
altgraph
.
Graph
.
Graph
method
)
h
+
U
tr
?
auh
Nhah
hH
]
ubh
)
r
}
rA
(
hMU
hNj
hOhRhTh
hV
}
rB
(
h
h
X
pyh
[
]
hZ
]
hX
]
hY
]
h
^
]
h
X
methodrC
h
jC
uh
Nhah
hH
]
rD
(
h
)
rE
}
rF
(
hMX
Graph
.
clust_coef
(
node
)
rG
hNj
hOhRhTh
hV
}
rH
(
h
[
]
rI
h
+
ah
h
hZ
]
hX
]
hY
]
h
^
]
rJ
h
+
ah
X
Graph
.
clust_coefh
X
Graphh
uh
M
+
hah
hH
]
rK
(
h
)
rL
}
rM
(
hMX
Graph
.
hNjE
hOhRhTh
hV
}
rN
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
+
hah
hH
]
rO
h
X
Graph
.
rP
rQ
}
rR
(
hMU
hNjL
ubaubj
)
rS
}
rT
(
hMX
clust_coefhNjE
hOhRhTj
hV
}
rU
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
+
hah
hH
]
rV
h
X
clust_coefrW
rX
}
rY
(
hMU
hNjS
ubaubj
)
rZ
}
r
[
(
hMU
hNjE
hOhRhTj
hV
}
r
\
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
+
hah
hH
]
r
]
j
)
r
^
}
r_
(
hMX
nodehV
}
r
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uhNjZ
hH
]
ra
h
X
noderb
rc
}
rd
(
hMU
hNj
^
ubahTj
ubaubeubj
)
re
}
rf
(
hMU
hNj
hOhRhTj
#
hV
}
rg
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
+
hah
hH
]
rh
(
h
)
ri
}
rj
(
hMX1
Returns
the
local
clustering
coefficient
of
node
.
rk
hNje
hOhRhTh
hV
}
rl
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
'
hah
hH
]
rm
h
X1
Returns
the
local
clustering
coefficient
of
node
.
rn
ro
}
rp
(
hMjk
hNji
ubaubh
)
rq
}
rr
(
hMX
The
local
cluster
coefficient
is
the
proportion
of
the
actual
number
of
edges
between
neighbours
of
node
and
the
maximum
number
of
edges
between
those
nodes
.
rs
hNje
hOhRhTh
hV
}
rt
(
hX
]
hY
]
hZ
]
h
[
]
h
^
]
uh
M
)
hah
hH
]
ru
h
X
The
local
cluster
coefficient
is
the
proportion
of
the
actual
number
of
edges
between
neighbours
of
node
and
the
maximum
number
of
edges
between
those
nodes
.
rv
rw
}
rx
(
hMjs
hNjq
ubaubeubeubeubeubahMU
U
transformerry
NU
footnote_refsrz
}
r
{
U
refnamesr
|
}
r
}
U
symbol_footnotesr
~
]
r
U
autofootnote_refsr
]
r
U
symbol_footnote_refsr
]
r
U
citationsr
]
r
hah
U
current_liner
NU
transform_messagesr
]
r
U
reporterr
NU
id_startr
K
U
autofootnotesr
]
r
U
citation_refsr
}
r
U
indirect_targetsr
]
r
U
settingsr
(
cdocutils
.
frontend
Values
r
or
}
r
(
U
footnote_backlinksr
K
U
record_dependenciesr
NU
rfc_base_urlr
U
http
:
/
/
tools
.
ietf
.
org
/
html
/
r
U
tracebackr
U
pep_referencesr
NU
strip_commentsr
NU
toc_backlinksr
U
entryr
U
language_coder
U
enr
U
datestampr
NU
report_levelr
K
U
_destinationr
NU
halt_levelr
K
U
strip_classesr
NhgNU
error_encoding_error_handlerr
U
backslashreplacer
U
debugr
NU
embed_stylesheetr
U
output_encoding_error_handlerr
U
strictr
U
sectnum_xformr
K
U
dump_transformsr
NU
docinfo_xformr
K
U
warning_streamr
NU
pep_file_url_templater
U
pep
-
%
04dr
U
exit_status_levelr
K
U
configr
NU
strict_visitorr
NU
cloak_email_addressesr
U
trim_footnote_reference_spacer
U
envr
NU
dump_pseudo_xmlr
NU
expose_internalsr
NU
sectsubtitle_xformr
U
source_linkr
NU
rfc_referencesr
NU
output_encodingr
U
utf
-
8r
U
source_urlr
NU
input_encodingr
U
utf
-
8
-
sigr
U
_disable_configr
NU
id_prefixr
U
U
tab_widthr
K
U
error_encodingr
U
UTF
-
8r
U
_sourcer
U7
/
Users
/
ronald
/
Projects
/
pyobjc
-
hg
/
altgraph
/
doc
/
graph
.
rstr
U
gettext_compactr
U
generatorr
NU
dump_internalsr
NU
smart_quotesr
U
pep_base_urlr
U
http
:
/
/
www
.
python
.
org
/
dev
/
peps
/
r
U
syntax_highlightr
U
longr
U
input_encoding_error_handlerr
j
U
auto_id_prefixr
U
idr
U
doctitle_xformr
U
strip_elements_with_classesr
NU
_config_filesr
]
U
file_insertion_enabledr
U
raw_enabledr
K
U
dump_settingsr
NubU
symbol_footnote_startr
K
U
idsr
}
r
(
hFj
h
j
h
h
h
j
h
j
hCj
h
+
jE
h
j
h
j
h
j
h
jM
h
j
h
j
h
j
h
j
h
j
h
jZ
hEhKh
j
h
jy
h
j3
h
jS
h
j
h
j
h
j
hDjZ
h
j
h
j
(
h
j
h
!
j
h
"
j
h
#
j
h
*
jl
h
-
j
h
&
j
<
h
'
j
h
)
j
h
j
&
h
/
j
h
j
h
jZ
h
.
j
h
]
cdocutils
.
nodes
target
r
)
r
}
r
(
hMU
hNhKhOhRhTU
targetr
hV
}
r
(
hX
]
h
[
]
r
h
]
ahZ
]
U
ismod
hY
]
h
^
]
uh
Nhah
hH
]
ubh0j_
h1jl
h2j
h3j2
h4j
h5jr
h6j
hGjB
h8j
h9j
uU
substitution_namesr
}
r
hThahV
}
r
(
hX
]
h
[
]
hZ
]
U
sourcehRhY
]
h
^
]
uU
footnotesr
]
r
U
refidsr
}
r
ub
.
