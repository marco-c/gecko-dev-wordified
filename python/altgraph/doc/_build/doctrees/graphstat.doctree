cdocutils
.
nodes
document
q
)
q
}
q
(
U
nametypesq
}
q
(
X
altgraph
.
GraphStat
.
degree_distq
XC
altgraph
.
graphstat
-
-
-
functions
providing
various
graph
statisticsq
NuU
substitution_defsq
}
q
U
parse_messagesq
]
q
U
current_sourceq
NU
decorationq
NU
autofootnote_startq
K
U
nameidsq
}
q
(
h
h
h
U
?
altgraph
-
graphstat
-
functions
-
providing
-
various
-
graph
-
statisticsq
uU
childrenq
]
q
cdocutils
.
nodes
section
q
)
q
}
q
(
U
rawsourceq
U
U
parentq
h
U
sourceq
cdocutils
.
nodes
reprunicode
q
X
;
/
Users
/
ronald
/
Projects
/
pyobjc
-
hg
/
altgraph
/
doc
/
graphstat
.
rstq
q
}
q
bU
tagnameq
U
sectionq
U
attributesq
}
q
!
(
U
dupnamesq
"
]
U
classesq
#
]
U
backrefsq
]
U
idsq
%
]
q
&
(
X
module
-
altgraph
.
GraphStatq
'
h
eU
namesq
(
]
q
)
h
auU
lineq
*
K
U
documentq
+
h
h
]
q
(
cdocutils
.
nodes
title
q
-
)
q
.
}
q
/
(
h
XJ
:
mod
:
altgraph
.
GraphStat
-
-
-
Functions
providing
various
graph
statisticsq0h
h
h
h
h
U
titleq1h
}
q2
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
*
K
h
+
h
h
]
q3
(
csphinx
.
addnodes
pending_xref
q4
)
q5
}
q6
(
h
X
:
mod
:
altgraph
.
GraphStat
q7h
h
.
h
h
h
U
pending_xrefq8h
}
q9
(
U
reftypeX
modU
refwarnq
:
U
reftargetq
;
X
altgraph
.
GraphStatU
refdomainX
pyq
<
h
%
]
h
]
U
refexplicit
h
"
]
h
#
]
h
(
]
U
refdocq
=
X
graphstatq
>
U
py
:
classq
?
NU
py
:
moduleq
Nuh
*
K
h
]
qAcdocutils
.
nodes
literal
qB
)
qC
}
qD
(
h
h7h
}
qE
(
h
"
]
h
#
]
qF
(
U
xrefqGh
<
X
py
-
modqHeh
]
h
%
]
h
(
]
uh
h5h
]
qIcdocutils
.
nodes
Text
qJX
altgraph
.
GraphStatqK
qL
}
qM
(
h
U
h
hCubah
U
literalqNubaubhJX1
-
-
-
Functions
providing
various
graph
statisticsqO
qP
}
qQ
(
h
X1
-
-
-
Functions
providing
various
graph
statisticsqRh
h
.
ubeubcsphinx
.
addnodes
index
qS
)
qT
}
qU
(
h
U
h
h
h
h
h
U
indexqVh
}
qW
(
h
%
]
h
]
h
"
]
h
#
]
h
(
]
U
entries
]
qX
(
U
singleqYX
altgraph
.
GraphStat
(
module
)
X
module
-
altgraph
.
GraphStatU
tqZauh
*
Nh
+
h
h
]
ubcdocutils
.
nodes
paragraph
q
[
)
q
\
}
q
]
(
h
X
The
module
:
mod
:
altgraph
.
GraphStat
provides
function
that
calculate
graph
statistics
.
Currently
there
is
only
one
such
function
more
may
be
added
later
.
h
h
h
h
h
U
paragraphq
^
h
}
q_
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
*
K
h
+
h
h
]
q
(
hJX
The
module
qa
qb
}
qc
(
h
X
The
module
h
h
\
ubh4
)
qd
}
qe
(
h
X
:
mod
:
altgraph
.
GraphStat
qfh
h
\
h
h
h
h8h
}
qg
(
U
reftypeX
modh
:
h
;
X
altgraph
.
GraphStatU
refdomainX
pyqhh
%
]
h
]
U
refexplicit
h
"
]
h
#
]
h
(
]
h
=
h
>
h
?
Nh
X
altgraph
.
GraphStatqiuh
*
K
h
]
qjhB
)
qk
}
ql
(
h
hfh
}
qm
(
h
"
]
h
#
]
qn
(
hGhhX
py
-
modqoeh
]
h
%
]
h
(
]
uh
hdh
]
qphJX
altgraph
.
GraphStatqq
qr
}
qs
(
h
U
h
hkubah
hNubaubhJXw
provides
function
that
calculate
graph
statistics
.
Currently
there
is
only
one
such
function
more
may
be
added
later
.
qt
qu
}
qv
(
h
Xw
provides
function
that
calculate
graph
statistics
.
Currently
there
is
only
one
such
function
more
may
be
added
later
.
h
h
\
ubeubhS
)
qw
}
qx
(
h
U
h
h
h
h
h
hVh
}
qy
(
h
%
]
h
]
h
"
]
h
#
]
h
(
]
U
entries
]
qz
(
hYX
degree_dist
(
)
(
in
module
altgraph
.
GraphStat
)
h
U
tq
{
auh
*
Nh
+
h
h
]
ubcsphinx
.
addnodes
desc
q
|
)
q
}
}
q
~
(
h
U
h
h
h
h
h
U
descq
h
}
q
(
U
noindexq
U
domainq
X
pyh
%
]
h
]
h
"
]
h
#
]
h
(
]
U
objtypeq
X
functionq
U
desctypeq
h
uh
*
Nh
+
h
h
]
q
(
csphinx
.
addnodes
desc_signature
q
)
q
}
q
(
h
X
/
degree_dist
(
graph
[
limits
[
bin_num
[
mode
]
]
]
)
h
h
}
h
h
h
U
desc_signatureq
h
}
q
(
h
%
]
q
h
aU
moduleq
hih
]
h
"
]
h
#
]
h
(
]
q
h
aU
fullnameq
X
degree_distq
U
classq
U
U
firstq
uh
*
K
h
+
h
h
]
q
(
csphinx
.
addnodes
desc_addname
q
)
q
}
q
(
h
X
altgraph
.
GraphStat
.
h
h
h
h
h
U
desc_addnameq
h
}
q
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
*
K
h
+
h
h
]
q
hJX
altgraph
.
GraphStat
.
q
q
}
q
(
h
U
h
h
ubaubcsphinx
.
addnodes
desc_name
q
)
q
}
q
(
h
h
h
h
h
h
h
U
desc_nameq
h
}
q
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
*
K
h
+
h
h
]
q
hJX
degree_distq
q
}
q
(
h
U
h
h
ubaubcsphinx
.
addnodes
desc_parameterlist
q
)
q
}
q
(
h
U
h
h
h
h
h
U
desc_parameterlistq
h
}
q
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
*
K
h
+
h
h
]
q
(
csphinx
.
addnodes
desc_parameter
q
)
q
}
q
(
h
X
graphh
}
q
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
h
h
]
q
hJX
graphq
q
}
q
(
h
U
h
h
ubah
U
desc_parameterq
ubcsphinx
.
addnodes
desc_optional
q
)
q
}
q
(
h
U
h
}
q
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
h
h
]
q
(
h
)
q
}
q
(
h
X
limitsh
}
q
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
h
h
]
q
hJX
limitsq
q
}
q
(
h
U
h
h
ubah
h
ubh
)
q
}
q
(
h
U
h
}
q
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
h
h
]
q
(
h
)
q
}
q
(
h
X
bin_numh
}
q
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
h
h
]
q
hJX
bin_numq
q
}
q
(
h
U
h
h
ubah
h
ubh
)
q
}
q
(
h
U
h
}
q
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
h
h
]
q
h
)
q
}
q
(
h
X
modeh
}
q
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
h
h
]
q
hJX
modeq
q
}
q
(
h
U
h
h
ubah
h
ubah
U
desc_optionalq
ubeh
h
ubeh
h
ubeubeubcsphinx
.
addnodes
desc_content
q
)
q
}
q
(
h
U
h
h
}
h
h
h
U
desc_contentq
h
}
q
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
*
K
h
+
h
h
]
q
(
h
[
)
q
}
q
(
h
X
Groups
the
number
of
edges
per
node
into
*
bin_num
*
bins
and
returns
the
list
of
those
bins
.
Every
item
in
the
result
is
a
tuple
with
the
center
of
the
bin
and
the
number
of
items
in
that
bin
.
h
h
h
h
h
h
^
h
}
q
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
*
K
h
+
h
h
]
q
(
hJX
)
Groups
the
number
of
edges
per
node
into
q
q
}
q
(
h
X
)
Groups
the
number
of
edges
per
node
into
h
h
ubcdocutils
.
nodes
emphasis
q
)
q
}
q
(
h
X
*
bin_num
*
h
}
q
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
h
h
]
q
hJX
bin_numq
q
}
q
(
h
U
h
h
ubah
U
emphasisq
ubhJX
bins
and
returns
the
list
of
those
bins
.
Every
item
in
the
result
is
a
tuple
with
the
center
of
the
bin
and
the
number
of
items
in
that
bin
.
q
q
}
q
(
h
X
bins
and
returns
the
list
of
those
bins
.
Every
item
in
the
result
is
a
tuple
with
the
center
of
the
bin
and
the
number
of
items
in
that
bin
.
h
h
ubeubh
[
)
q
}
q
(
h
X
When
the
*
limits
*
argument
is
present
it
must
be
a
tuple
with
the
mininum
and
maximum
number
of
edges
that
get
binned
(
that
is
when
*
limits
*
is
(
4
10
)
only
nodes
with
between
4
and
10
edges
get
counted
.
h
h
h
h
h
h
^
h
}
q
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
*
K
h
+
h
h
]
q
(
hJX
When
the
q
q
}
q
(
h
X
When
the
h
h
ubh
)
q
}
q
(
h
X
*
limits
*
h
}
q
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
h
h
]
q
hJX
limitsq
q
}
q
(
h
U
h
h
ubah
h
ubhJXt
argument
is
present
it
must
be
a
tuple
with
the
mininum
and
maximum
number
of
edges
that
get
binned
(
that
is
when
q
r
}
r
(
h
Xt
argument
is
present
it
must
be
a
tuple
with
the
mininum
and
maximum
number
of
edges
that
get
binned
(
that
is
when
h
h
ubh
)
r
}
r
(
h
X
*
limits
*
h
}
r
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
h
h
]
r
hJX
limitsr
r
}
r
(
h
U
h
j
ubah
h
ubhJX
is
r
r
}
r
(
h
X
is
h
h
ubhB
)
r
}
r
(
h
X
(
4
10
)
h
}
r
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
h
h
]
r
hJX
(
4
10
)
r
r
}
r
(
h
U
h
j
ubah
hNubhJX4
only
nodes
with
between
4
and
10
edges
get
counted
.
r
r
}
r
(
h
X4
only
nodes
with
between
4
and
10
edges
get
counted
.
h
h
ubeubh
[
)
r
}
r
(
h
X
The
*
mode
*
argument
is
used
to
count
incoming
(
'
inc
'
)
or
outgoing
(
'
out
'
)
edges
.
The
default
is
to
count
the
outgoing
edges
.
h
h
h
h
h
h
^
h
}
r
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
*
K
h
+
h
h
]
r
(
hJX
The
r
r
}
r
(
h
X
The
h
j
ubh
)
r
}
r
(
h
X
*
mode
*
h
}
r
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
j
h
]
r
hJX
moder
!
r
"
}
r
#
(
h
U
h
j
ubah
h
ubhJX
%
argument
is
used
to
count
incoming
(
r
r
%
}
r
&
(
h
X
%
argument
is
used
to
count
incoming
(
h
j
ubhB
)
r
'
}
r
(
(
h
X
'
inc
'
h
}
r
)
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
j
h
]
r
*
hJX
'
inc
'
r
+
r
}
r
-
(
h
U
h
j
'
ubah
hNubhJX
)
or
outgoing
(
r
.
r
/
}
r0
(
h
X
)
or
outgoing
(
h
j
ubhB
)
r1
}
r2
(
h
X
'
out
'
h
}
r3
(
h
"
]
h
#
]
h
]
h
%
]
h
(
]
uh
j
h
]
r4
hJX
'
out
'
r5
r6
}
r7
(
h
U
h
j1
ubah
hNubhJX4
)
edges
.
The
default
is
to
count
the
outgoing
edges
.
r8
r9
}
r
:
(
h
X4
)
edges
.
The
default
is
to
count
the
outgoing
edges
.
h
j
ubeubeubeubeubah
U
U
transformerr
;
NU
footnote_refsr
<
}
r
=
U
refnamesr
>
}
r
?
U
symbol_footnotesr
]
rA
U
autofootnote_refsrB
]
rC
U
symbol_footnote_refsrD
]
rE
U
citationsrF
]
rG
h
+
h
U
current_linerH
NU
transform_messagesrI
]
rJ
U
reporterrK
NU
id_startrL
K
U
autofootnotesrM
]
rN
U
citation_refsrO
}
rP
U
indirect_targetsrQ
]
rR
U
settingsrS
(
cdocutils
.
frontend
Values
rT
orU
}
rV
(
U
footnote_backlinksrW
K
U
record_dependenciesrX
NU
rfc_base_urlrY
U
http
:
/
/
tools
.
ietf
.
org
/
html
/
rZ
U
tracebackr
[
U
pep_referencesr
\
NU
strip_commentsr
]
NU
toc_backlinksr
^
U
entryr_
U
language_coder
U
enra
U
datestamprb
NU
report_levelrc
K
U
_destinationrd
NU
halt_levelre
K
U
strip_classesrf
Nh1NU
error_encoding_error_handlerrg
U
backslashreplacerh
U
debugri
NU
embed_stylesheetrj
U
output_encoding_error_handlerrk
U
strictrl
U
sectnum_xformrm
K
U
dump_transformsrn
NU
docinfo_xformro
K
U
warning_streamrp
NU
pep_file_url_templaterq
U
pep
-
%
04drr
U
exit_status_levelrs
K
U
configrt
NU
strict_visitorru
NU
cloak_email_addressesrv
U
trim_footnote_reference_spacerw
U
envrx
NU
dump_pseudo_xmlry
NU
expose_internalsrz
NU
sectsubtitle_xformr
{
U
source_linkr
|
NU
rfc_referencesr
}
NU
output_encodingr
~
U
utf
-
8r
U
source_urlr
NU
input_encodingr
U
utf
-
8
-
sigr
U
_disable_configr
NU
id_prefixr
U
U
tab_widthr
K
U
error_encodingr
U
UTF
-
8r
U
_sourcer
U
;
/
Users
/
ronald
/
Projects
/
pyobjc
-
hg
/
altgraph
/
doc
/
graphstat
.
rstr
U
gettext_compactr
U
generatorr
NU
dump_internalsr
NU
smart_quotesr
U
pep_base_urlr
U
http
:
/
/
www
.
python
.
org
/
dev
/
peps
/
r
U
syntax_highlightr
U
longr
U
input_encoding_error_handlerr
jl
U
auto_id_prefixr
U
idr
U
doctitle_xformr
U
strip_elements_with_classesr
NU
_config_filesr
]
U
file_insertion_enabledr
U
raw_enabledr
K
U
dump_settingsr
NubU
symbol_footnote_startr
K
U
idsr
}
r
(
h
h
h
h
h
'
cdocutils
.
nodes
target
r
)
r
}
r
(
h
U
h
h
h
h
h
U
targetr
h
}
r
(
h
"
]
h
%
]
r
h
'
ah
]
U
ismod
h
#
]
h
(
]
uh
*
Nh
+
h
h
]
ubuU
substitution_namesr
}
r
h
h
+
h
}
r
(
h
"
]
h
%
]
h
]
U
sourceh
h
#
]
h
(
]
uU
footnotesr
]
r
U
refidsr
}
r
ub
.
