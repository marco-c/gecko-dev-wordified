cdocutils
.
nodes
document
q
)
q
}
q
(
U
nametypesq
}
q
(
X
altgraph
.
GraphAlgo
.
dijkstraq
X
'
altgraph
.
graphalgo
-
-
-
graph
algorithmsq
NX
altgraph
.
GraphAlgo
.
shortest_pathq
uU
substitution_defsq
}
q
U
parse_messagesq
]
q
U
current_sourceq
NU
decorationq
NU
autofootnote_startq
K
U
nameidsq
}
q
(
h
h
h
U
#
altgraph
-
graphalgo
-
graph
-
algorithmsq
h
h
uU
childrenq
]
q
cdocutils
.
nodes
section
q
)
q
}
q
(
U
rawsourceq
U
U
parentq
h
U
sourceq
cdocutils
.
nodes
reprunicode
q
X
;
/
Users
/
ronald
/
Projects
/
pyobjc
-
hg
/
altgraph
/
doc
/
graphalgo
.
rstq
q
}
q
bU
tagnameq
U
sectionq
U
attributesq
!
}
q
"
(
U
dupnamesq
#
]
U
classesq
]
U
backrefsq
%
]
U
idsq
&
]
q
'
(
X
module
-
altgraph
.
GraphAlgoq
(
h
eU
namesq
)
]
q
*
h
auU
lineq
+
K
U
documentq
h
h
]
q
-
(
cdocutils
.
nodes
title
q
.
)
q
/
}
q0
(
h
X
.
:
mod
:
altgraph
.
GraphAlgo
-
-
-
Graph
algorithmsq1h
h
h
h
h
U
titleq2h
!
}
q3
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
+
K
h
h
h
]
q4
(
csphinx
.
addnodes
pending_xref
q5
)
q6
}
q7
(
h
X
:
mod
:
altgraph
.
GraphAlgo
q8h
h
/
h
h
h
U
pending_xrefq9h
!
}
q
:
(
U
reftypeX
modU
refwarnq
;
U
reftargetq
<
X
altgraph
.
GraphAlgoU
refdomainX
pyq
=
h
&
]
h
%
]
U
refexplicit
h
#
]
h
]
h
)
]
U
refdocq
>
X
graphalgoq
?
U
py
:
classq
NU
py
:
moduleqANuh
+
K
h
]
qBcdocutils
.
nodes
literal
qC
)
qD
}
qE
(
h
h8h
!
}
qF
(
h
#
]
h
]
qG
(
U
xrefqHh
=
X
py
-
modqIeh
%
]
h
&
]
h
)
]
uh
h6h
]
qJcdocutils
.
nodes
Text
qKX
altgraph
.
GraphAlgoqL
qM
}
qN
(
h
U
h
hDubah
U
literalqOubaubhKX
-
-
-
Graph
algorithmsqP
qQ
}
qR
(
h
X
-
-
-
Graph
algorithmsqSh
h
/
ubeubcsphinx
.
addnodes
index
qT
)
qU
}
qV
(
h
U
h
h
h
h
h
U
indexqWh
!
}
qX
(
h
&
]
h
%
]
h
#
]
h
]
h
)
]
U
entries
]
qY
(
U
singleqZX
altgraph
.
GraphAlgo
(
module
)
X
module
-
altgraph
.
GraphAlgoU
tq
[
auh
+
Nh
h
h
]
ubhT
)
q
\
}
q
]
(
h
U
h
h
h
Nh
hWh
!
}
q
^
(
h
&
]
h
%
]
h
#
]
h
]
h
)
]
U
entries
]
q_
(
hZX
)
dijkstra
(
)
(
in
module
altgraph
.
GraphAlgo
)
h
U
tq
auh
+
Nh
h
h
]
ubcsphinx
.
addnodes
desc
qa
)
qb
}
qc
(
h
U
h
h
h
Nh
U
descqdh
!
}
qe
(
U
noindexqf
U
domainqgX
pyh
&
]
h
%
]
h
#
]
h
]
h
)
]
U
objtypeqhX
functionqiU
desctypeqjhiuh
+
Nh
h
h
]
qk
(
csphinx
.
addnodes
desc_signature
ql
)
qm
}
qn
(
h
X
dijkstra
(
graph
start
[
end
]
)
h
hbh
h
h
U
desc_signatureqoh
!
}
qp
(
h
&
]
qqh
aU
moduleqrX
altgraph
.
GraphAlgoqsh
%
]
h
#
]
h
]
h
)
]
qth
aU
fullnamequX
dijkstraqvU
classqwU
U
firstqx
uh
+
K
h
h
h
]
qy
(
csphinx
.
addnodes
desc_addname
qz
)
q
{
}
q
|
(
h
X
altgraph
.
GraphAlgo
.
h
hmh
h
h
U
desc_addnameq
}
h
!
}
q
~
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
+
K
h
h
h
]
q
hKX
altgraph
.
GraphAlgo
.
q
q
}
q
(
h
U
h
h
{
ubaubcsphinx
.
addnodes
desc_name
q
)
q
}
q
(
h
hvh
hmh
h
h
U
desc_nameq
h
!
}
q
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
+
K
h
h
h
]
q
hKX
dijkstraq
q
}
q
(
h
U
h
h
ubaubcsphinx
.
addnodes
desc_parameterlist
q
)
q
}
q
(
h
U
h
hmh
h
h
U
desc_parameterlistq
h
!
}
q
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
+
K
h
h
h
]
q
(
csphinx
.
addnodes
desc_parameter
q
)
q
}
q
(
h
X
graphh
!
}
q
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
h
h
]
q
hKX
graphq
q
}
q
(
h
U
h
h
ubah
U
desc_parameterq
ubh
)
q
}
q
(
h
X
starth
!
}
q
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
h
h
]
q
hKX
startq
q
}
q
(
h
U
h
h
ubah
h
ubcsphinx
.
addnodes
desc_optional
q
)
q
}
q
(
h
U
h
!
}
q
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
h
h
]
q
h
)
q
}
q
(
h
X
endh
!
}
q
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
h
h
]
q
hKX
endq
q
}
q
(
h
U
h
h
ubah
h
ubah
U
desc_optionalq
ubeubeubcsphinx
.
addnodes
desc_content
q
)
q
}
q
(
h
U
h
hbh
h
h
U
desc_contentq
h
!
}
q
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
+
K
h
h
h
]
q
(
cdocutils
.
nodes
paragraph
q
)
q
}
q
(
h
X
(
Dijkstra
'
s
algorithm
for
shortest
paths
.
q
h
h
h
h
h
U
paragraphq
h
!
}
q
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
+
K
h
h
h
]
q
hKX
(
Dijkstra
'
s
algorithm
for
shortest
paths
.
q
q
}
q
(
h
h
h
h
ubaubh
)
q
}
q
(
h
X
Find
shortest
paths
from
the
start
node
to
all
nodes
nearer
than
or
equal
to
the
*
end
*
node
.
The
edge
data
is
assumed
to
be
the
edge
length
.
h
h
h
h
h
h
h
!
}
q
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
+
K
h
h
h
]
q
(
hKXR
Find
shortest
paths
from
the
start
node
to
all
nodes
nearer
than
or
equal
to
the
q
q
}
q
(
h
XR
Find
shortest
paths
from
the
start
node
to
all
nodes
nearer
than
or
equal
to
the
h
h
ubcdocutils
.
nodes
emphasis
q
)
q
}
q
(
h
X
*
end
*
h
!
}
q
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
h
h
]
q
hKX
endq
q
}
q
(
h
U
h
h
ubah
U
emphasisq
ubhKX6
node
.
The
edge
data
is
assumed
to
be
the
edge
length
.
q
q
}
q
(
h
X6
node
.
The
edge
data
is
assumed
to
be
the
edge
length
.
h
h
ubeubcdocutils
.
nodes
note
q
)
q
}
q
(
h
X
Dijkstra
'
s
algorithm
is
only
guaranteed
to
work
correctly
when
all
edge
lengths
are
positive
.
This
code
does
not
verify
this
property
for
all
edges
(
only
the
edges
examined
until
the
end
vertex
is
reached
)
but
will
correctly
compute
shortest
paths
even
for
some
graphs
with
negative
edges
and
will
raise
an
exception
if
it
discovers
that
a
negative
edge
has
caused
it
to
make
a
mistake
.
h
h
h
h
h
U
noteq
h
!
}
q
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
+
Nh
h
h
]
q
h
)
q
}
q
(
h
X
Dijkstra
'
s
algorithm
is
only
guaranteed
to
work
correctly
when
all
edge
lengths
are
positive
.
This
code
does
not
verify
this
property
for
all
edges
(
only
the
edges
examined
until
the
end
vertex
is
reached
)
but
will
correctly
compute
shortest
paths
even
for
some
graphs
with
negative
edges
and
will
raise
an
exception
if
it
discovers
that
a
negative
edge
has
caused
it
to
make
a
mistake
.
q
h
h
h
h
h
h
h
!
}
q
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
+
K
h
]
q
hKX
Dijkstra
'
s
algorithm
is
only
guaranteed
to
work
correctly
when
all
edge
lengths
are
positive
.
This
code
does
not
verify
this
property
for
all
edges
(
only
the
edges
examined
until
the
end
vertex
is
reached
)
but
will
correctly
compute
shortest
paths
even
for
some
graphs
with
negative
edges
and
will
raise
an
exception
if
it
discovers
that
a
negative
edge
has
caused
it
to
make
a
mistake
.
q
q
}
q
(
h
h
h
h
ubaubaubeubeubhT
)
q
}
q
(
h
U
h
h
h
h
h
hWh
!
}
q
(
h
&
]
h
%
]
h
#
]
h
]
h
)
]
U
entries
]
q
(
hZX
.
shortest_path
(
)
(
in
module
altgraph
.
GraphAlgo
)
h
U
tq
auh
+
Nh
h
h
]
ubha
)
q
}
q
(
h
U
h
h
h
h
h
hdh
!
}
q
(
hf
hgX
pyh
&
]
h
%
]
h
#
]
h
]
h
)
]
hhX
functionq
hjh
uh
+
Nh
h
h
]
q
(
hl
)
q
}
q
(
h
X
shortest_path
(
graph
start
end
)
h
h
h
h
h
hoh
!
}
q
(
h
&
]
q
h
ahrhsh
%
]
h
#
]
h
]
h
)
]
q
h
ahuX
shortest_pathq
hwU
hx
uh
+
K
h
h
h
]
q
(
hz
)
q
}
q
(
h
X
altgraph
.
GraphAlgo
.
h
h
h
h
h
h
}
h
!
}
q
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
+
K
h
h
h
]
q
hKX
altgraph
.
GraphAlgo
.
q
q
}
q
(
h
U
h
h
ubaubh
)
q
}
q
(
h
h
h
h
h
h
h
h
h
!
}
q
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
+
K
h
h
h
]
q
hKX
shortest_pathq
q
}
q
(
h
U
h
h
ubaubh
)
q
}
r
(
h
U
h
h
h
h
h
h
h
!
}
r
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
+
K
h
h
h
]
r
(
h
)
r
}
r
(
h
X
graphh
!
}
r
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
h
h
]
r
hKX
graphr
r
}
r
(
h
U
h
j
ubah
h
ubh
)
r
}
r
(
h
X
starth
!
}
r
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
h
h
]
r
hKX
startr
r
}
r
(
h
U
h
j
ubah
h
ubh
)
r
}
r
(
h
X
endh
!
}
r
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
h
h
]
r
hKX
endr
r
}
r
(
h
U
h
j
ubah
h
ubeubeubh
)
r
}
r
(
h
U
h
h
h
h
h
h
h
!
}
r
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
+
K
h
h
h
]
r
h
)
r
}
r
(
h
X
Find
a
single
shortest
path
from
the
given
start
node
to
the
given
end
node
.
The
input
has
the
same
conventions
as
:
func
:
dijkstra
.
The
output
is
a
list
of
the
nodes
in
order
along
the
shortest
path
.
h
j
h
h
h
h
h
!
}
r
(
h
#
]
h
]
h
%
]
h
&
]
h
)
]
uh
+
K
h
h
h
]
r
(
hKXs
Find
a
single
shortest
path
from
the
given
start
node
to
the
given
end
node
.
The
input
has
the
same
conventions
as
r
r
!
}
r
"
(
h
Xs
Find
a
single
shortest
path
from
the
given
start
node
to
the
given
end
node
.
The
input
has
the
same
conventions
as
h
j
ubh5
)
r
#
}
r
(
h
X
:
func
:
dijkstra
r
%
h
j
h
h
h
h9h
!
}
r
&
(
U
reftypeX
funch
;
h
<
X
dijkstraU
refdomainX
pyr
'
h
&
]
h
%
]
U
refexplicit
h
#
]
h
]
h
)
]
h
>
h
?
h
NhAhsuh
+
K
h
]
r
(
hC
)
r
)
}
r
*
(
h
j
%
h
!
}
r
+
(
h
#
]
h
]
r
(
hHj
'
X
py
-
funcr
-
eh
%
]
h
&
]
h
)
]
uh
j
#
h
]
r
.
hKX
dijkstra
(
)
r
/
r0
}
r1
(
h
U
h
j
)
ubah
hOubaubhKXE
.
The
output
is
a
list
of
the
nodes
in
order
along
the
shortest
path
.
r2
r3
}
r4
(
h
XE
.
The
output
is
a
list
of
the
nodes
in
order
along
the
shortest
path
.
h
j
ubeubaubeubeubah
U
U
transformerr5
NU
footnote_refsr6
}
r7
U
refnamesr8
}
r9
U
symbol_footnotesr
:
]
r
;
U
autofootnote_refsr
<
]
r
=
U
symbol_footnote_refsr
>
]
r
?
U
citationsr
]
rA
h
h
U
current_linerB
NU
transform_messagesrC
]
rD
U
reporterrE
NU
id_startrF
K
U
autofootnotesrG
]
rH
U
citation_refsrI
}
rJ
U
indirect_targetsrK
]
rL
U
settingsrM
(
cdocutils
.
frontend
Values
rN
orO
}
rP
(
U
footnote_backlinksrQ
K
U
record_dependenciesrR
NU
rfc_base_urlrS
U
http
:
/
/
tools
.
ietf
.
org
/
html
/
rT
U
tracebackrU
U
pep_referencesrV
NU
strip_commentsrW
NU
toc_backlinksrX
U
entryrY
U
language_coderZ
U
enr
[
U
datestampr
\
NU
report_levelr
]
K
U
_destinationr
^
NU
halt_levelr_
K
U
strip_classesr
Nh2NU
error_encoding_error_handlerra
U
backslashreplacerb
U
debugrc
NU
embed_stylesheetrd
U
output_encoding_error_handlerre
U
strictrf
U
sectnum_xformrg
K
U
dump_transformsrh
NU
docinfo_xformri
K
U
warning_streamrj
NU
pep_file_url_templaterk
U
pep
-
%
04drl
U
exit_status_levelrm
K
U
configrn
NU
strict_visitorro
NU
cloak_email_addressesrp
U
trim_footnote_reference_spacerq
U
envrr
NU
dump_pseudo_xmlrs
NU
expose_internalsrt
NU
sectsubtitle_xformru
U
source_linkrv
NU
rfc_referencesrw
NU
output_encodingrx
U
utf
-
8ry
U
source_urlrz
NU
input_encodingr
{
U
utf
-
8
-
sigr
|
U
_disable_configr
}
NU
id_prefixr
~
U
U
tab_widthr
K
U
error_encodingr
U
UTF
-
8r
U
_sourcer
U
;
/
Users
/
ronald
/
Projects
/
pyobjc
-
hg
/
altgraph
/
doc
/
graphalgo
.
rstr
U
gettext_compactr
U
generatorr
NU
dump_internalsr
NU
smart_quotesr
U
pep_base_urlr
U
http
:
/
/
www
.
python
.
org
/
dev
/
peps
/
r
U
syntax_highlightr
U
longr
U
input_encoding_error_handlerr
jf
U
auto_id_prefixr
U
idr
U
doctitle_xformr
U
strip_elements_with_classesr
NU
_config_filesr
]
U
file_insertion_enabledr
U
raw_enabledr
K
U
dump_settingsr
NubU
symbol_footnote_startr
K
U
idsr
}
r
(
h
(
cdocutils
.
nodes
target
r
)
r
}
r
(
h
U
h
h
h
h
h
U
targetr
h
!
}
r
(
h
#
]
h
&
]
r
h
(
ah
%
]
U
ismod
h
]
h
)
]
uh
+
Nh
h
h
]
ubh
h
h
hmh
h
uU
substitution_namesr
}
r
h
h
h
!
}
r
(
h
#
]
h
&
]
h
%
]
U
sourceh
h
]
h
)
]
uU
footnotesr
]
r
U
refidsr
}
r
ub
.
