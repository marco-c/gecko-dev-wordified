cdocutils
.
nodes
document
q
)
q
}
q
(
U
nametypesq
}
q
(
X
flexmockq
X
#
call
the
same
method
multiple
timesq
NX
gary
bernhadtq
X
'
ensure
calls
are
made
in
specific
orderq
NX
simple
mockq
NX
!
override
new
instances
of
a
classq
NX
flexmock
and
mockq
X
mocking
a
context
managerq
NX
pmockq
X
raising
exceptionsq
NX
mock
chained
methodsq
NX
fudgeq
X
python
-
mockq
X
moxq
X2
mocking
the
builtin
open
used
as
a
context
managerq
NX
minimockq
X
mockerq
X
mox
projectq
X
creating
partial
mocksq
NX
dingusq
X
simple
fake
objectq
NX
python
mock
library
comparisonq
X
kumar
mcmillanq
X
mock
issue
trackerq
X
mock
library
comparisonq
NuU
substitution_defsq
}
q
U
parse_messagesq
!
]
q
"
U
current_sourceq
#
NU
decorationq
NU
autofootnote_startq
%
K
U
nameidsq
&
}
q
'
(
h
U
flexmockq
(
h
U
#
call
-
the
-
same
-
method
-
multiple
-
timesq
)
h
U
gary
-
bernhadtq
*
h
U
'
ensure
-
calls
-
are
-
made
-
in
-
specific
-
orderq
+
h
U
simple
-
mockq
h
U
!
override
-
new
-
instances
-
of
-
a
-
classq
-
h
U
flexmock
-
and
-
mockq
.
h
U
mocking
-
a
-
context
-
managerq
/
h
U
pmockq0h
U
raising
-
exceptionsq1h
U
mock
-
chained
-
methodsq2h
U
fudgeq3h
U
python
-
mockq4h
U
moxq5h
U2mocking
-
the
-
builtin
-
open
-
used
-
as
-
a
-
context
-
managerq6h
U
minimockq7h
U
mockerq8h
U
mox
-
projectq9h
U
creating
-
partial
-
mocksq
:
h
U
dingusq
;
h
U
simple
-
fake
-
objectq
<
h
U
python
-
mock
-
library
-
comparisonq
=
h
U
kumar
-
mcmillanq
>
h
U
mock
-
issue
-
trackerq
?
h
U
mock
-
library
-
comparisonq
uU
childrenqA
]
qBcdocutils
.
nodes
section
qC
)
qD
}
qE
(
U
rawsourceqFU
U
parentqGh
U
sourceqHcdocutils
.
nodes
reprunicode
qIX
/
compile
/
mock
/
docs
/
compare
.
txtqJ
qK
}
qLbU
tagnameqMU
sectionqNU
attributesqO
}
qP
(
U
dupnamesqQ
]
qRU
classesqS
]
qTU
backrefsqU
]
qVU
idsqW
]
qXh
aU
namesqY
]
qZh
auU
lineq
[
K
U
documentq
\
h
hA
]
q
]
(
cdocutils
.
nodes
title
q
^
)
q_
}
q
(
hFX
Mock
Library
ComparisonqahGhDhHhKhMU
titleqbhO
}
qc
(
hQ
]
qdhS
]
qehU
]
qfhW
]
qghY
]
qhuh
[
K
h
\
h
hA
]
qicdocutils
.
nodes
Text
qjX
Mock
Library
Comparisonqk
ql
}
qm
(
hFhahGh_ubaubcdocutils
.
nodes
comment
qn
)
qo
}
qp
(
hFX
def
assertEqual
(
a
b
)
:
assert
a
=
=
b
(
"
%
r
!
=
%
r
"
%
(
a
b
)
)
def
assertRaises
(
Exc
func
)
:
try
:
func
(
)
except
Exc
:
return
assert
False
(
"
%
s
not
raised
"
%
Exc
)
sys
.
modules
[
'
somemodule
'
]
=
somemodule
=
mock
.
Mock
(
name
=
'
somemodule
'
)
class
SomeException
(
Exception
)
:
some_method
=
method1
=
method2
=
None
some_other_object
=
SomeObject
=
SomeExceptionqqhGhDhHhKhMU
commentqrhO
}
qs
(
U
testnodetypeqtX
testsetupquU
xml
:
spaceqvU
preserveqwhW
]
qxhU
]
qyhQ
]
qzhS
]
q
{
hY
]
q
|
U
groupsq
}
]
q
~
U
defaultq
aU
optionsq
}
q
uh
[
K
h
\
h
hA
]
q
hjX
def
assertEqual
(
a
b
)
:
assert
a
=
=
b
(
"
%
r
!
=
%
r
"
%
(
a
b
)
)
def
assertRaises
(
Exc
func
)
:
try
:
func
(
)
except
Exc
:
return
assert
False
(
"
%
s
not
raised
"
%
Exc
)
sys
.
modules
[
'
somemodule
'
]
=
somemodule
=
mock
.
Mock
(
name
=
'
somemodule
'
)
class
SomeException
(
Exception
)
:
some_method
=
method1
=
method2
=
None
some_other_object
=
SomeObject
=
SomeExceptionq
q
}
q
(
hFU
hGhoubaubcdocutils
.
nodes
paragraph
q
)
q
}
q
(
hFX
A
side
-
by
-
side
comparison
of
how
to
accomplish
some
basic
tasks
with
mock
and
some
other
popular
Python
mocking
libraries
and
frameworks
.
q
hGhDhHhKhMU
paragraphq
hO
}
q
(
hQ
]
q
hS
]
q
hU
]
q
hW
]
q
hY
]
q
uh
[
K
h
\
h
hA
]
q
hjX
A
side
-
by
-
side
comparison
of
how
to
accomplish
some
basic
tasks
with
mock
and
some
other
popular
Python
mocking
libraries
and
frameworks
.
q
q
}
q
(
hFh
hGh
ubaubh
)
q
}
q
(
hFX
These
are
:
q
hGhDhHhKhMh
hO
}
q
(
hQ
]
q
hS
]
q
hU
]
q
hW
]
q
hY
]
q
uh
[
K
h
\
h
hA
]
q
hjX
These
are
:
q
q
}
q
(
hFh
hGh
ubaubcdocutils
.
nodes
bullet_list
q
)
q
}
q
(
hFU
hGhDhHhKhMU
bullet_listq
hO
}
q
(
U
bulletq
X
*
hW
]
q
hU
]
q
hQ
]
q
hS
]
q
hY
]
q
uh
[
K
h
\
h
hA
]
q
(
cdocutils
.
nodes
list_item
q
)
q
}
q
(
hFX2
flexmock
<
http
:
/
/
pypi
.
python
.
org
/
pypi
/
flexmock
>
_q
hGh
hHhKhMU
list_itemq
hO
}
q
(
hQ
]
q
hS
]
q
hU
]
q
hW
]
q
hY
]
q
uh
[
Nh
\
h
hA
]
q
h
)
q
}
q
(
hFh
hGh
hHhKhMh
hO
}
q
(
hQ
]
q
hS
]
q
hU
]
q
hW
]
q
hY
]
q
uh
[
K
hA
]
q
(
cdocutils
.
nodes
reference
q
)
q
}
q
(
hFh
hO
}
q
(
U
nameq
X
flexmockq
U
refuriq
X
http
:
/
/
pypi
.
python
.
org
/
pypi
/
flexmockq
hW
]
q
hU
]
q
hQ
]
q
hS
]
q
hY
]
q
uhGh
hA
]
q
hjX
flexmockq
q
}
q
(
hFU
hGh
ubahMU
referenceq
ubcdocutils
.
nodes
target
q
)
q
}
q
(
hFX
'
<
http
:
/
/
pypi
.
python
.
org
/
pypi
/
flexmock
>
q
U
referencedq
K
hGh
hMU
targetq
hO
}
q
(
U
refuriq
h
hW
]
q
h
(
ahU
]
q
hQ
]
q
hS
]
q
hY
]
q
h
auhA
]
q
ubeubaubh
)
q
}
q
(
hFX
(
mox
<
http
:
/
/
pypi
.
python
.
org
/
pypi
/
mox
>
_q
hGh
hHhKhMh
hO
}
q
(
hQ
]
q
hS
]
q
hU
]
q
hW
]
q
hY
]
q
uh
[
Nh
\
h
hA
]
q
h
)
q
}
q
(
hFh
hGh
hHhKhMh
hO
}
q
(
hQ
]
q
hS
]
q
hU
]
q
hW
]
q
hY
]
q
uh
[
K
hA
]
q
(
h
)
q
}
q
(
hFh
hO
}
q
(
U
nameq
X
moxq
h
X
http
:
/
/
pypi
.
python
.
org
/
pypi
/
moxq
hW
]
q
hU
]
q
hQ
]
q
hS
]
q
hY
]
r
uhGh
hA
]
r
hjX
moxr
r
}
r
(
hFU
hGh
ubahMh
ubh
)
r
}
r
(
hFX
"
<
http
:
/
/
pypi
.
python
.
org
/
pypi
/
mox
>
r
h
K
hGh
hMh
hO
}
r
(
U
refurir
h
hW
]
r
h5ahU
]
r
hQ
]
r
hS
]
r
hY
]
r
h
auhA
]
r
ubeubaubh
)
r
}
r
(
hFX
&
Mocker
<
http
:
/
/
niemeyer
.
net
/
mocker
>
_r
hGh
hHhKhMh
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uh
[
Nh
\
h
hA
]
r
h
)
r
}
r
(
hFj
hGj
hHhKhMh
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
!
uh
[
K
hA
]
r
"
(
h
)
r
#
}
r
(
hFj
hO
}
r
%
(
U
namer
&
X
Mockerr
'
h
X
http
:
/
/
niemeyer
.
net
/
mockerr
(
hW
]
r
)
hU
]
r
*
hQ
]
r
+
hS
]
r
hY
]
r
-
uhGj
hA
]
r
.
hjX
Mockerr
/
r0
}
r1
(
hFU
hGj
#
ubahMh
ubh
)
r2
}
r3
(
hFX
<
http
:
/
/
niemeyer
.
net
/
mocker
>
r4
h
K
hGj
hMh
hO
}
r5
(
U
refurir6
j
(
hW
]
r7
h8ahU
]
r8
hQ
]
r9
hS
]
r
:
hY
]
r
;
h
auhA
]
r
<
ubeubaubh
)
r
=
}
r
>
(
hFX
.
dingus
<
http
:
/
/
pypi
.
python
.
org
/
pypi
/
dingus
>
_r
?
hGh
hHhKhMh
hO
}
r
(
hQ
]
rA
hS
]
rB
hU
]
rC
hW
]
rD
hY
]
rE
uh
[
Nh
\
h
hA
]
rF
h
)
rG
}
rH
(
hFj
?
hGj
=
hHhKhMh
hO
}
rI
(
hQ
]
rJ
hS
]
rK
hU
]
rL
hW
]
rM
hY
]
rN
uh
[
K
hA
]
rO
(
h
)
rP
}
rQ
(
hFj
?
hO
}
rR
(
U
namerS
X
dingusrT
h
X
"
http
:
/
/
pypi
.
python
.
org
/
pypi
/
dingusrU
hW
]
rV
hU
]
rW
hQ
]
rX
hS
]
rY
hY
]
rZ
uhGjG
hA
]
r
[
hjX
dingusr
\
r
]
}
r
^
(
hFU
hGjP
ubahMh
ubh
)
r_
}
r
(
hFX
%
<
http
:
/
/
pypi
.
python
.
org
/
pypi
/
dingus
>
ra
h
K
hGjG
hMh
hO
}
rb
(
U
refurirc
jU
hW
]
rd
h
;
ahU
]
re
hQ
]
rf
hS
]
rg
hY
]
rh
h
auhA
]
ri
ubeubaubh
)
rj
}
rk
(
hFX
-
fudge
<
http
:
/
/
pypi
.
python
.
org
/
pypi
/
fudge
>
_
rl
hGh
hHhKhMh
hO
}
rm
(
hQ
]
rn
hS
]
ro
hU
]
rp
hW
]
rq
hY
]
rr
uh
[
Nh
\
h
hA
]
rs
h
)
rt
}
ru
(
hFX
fudge
<
http
:
/
/
pypi
.
python
.
org
/
pypi
/
fudge
>
_rv
hGjj
hHhKhMh
hO
}
rw
(
hQ
]
rx
hS
]
ry
hU
]
rz
hW
]
r
{
hY
]
r
|
uh
[
K
!
hA
]
r
}
(
h
)
r
~
}
r
(
hFjv
hO
}
r
(
U
namer
X
fudger
h
X
!
http
:
/
/
pypi
.
python
.
org
/
pypi
/
fudger
hW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uhGjt
hA
]
r
hjX
fudger
r
}
r
(
hFU
hGj
~
ubahMh
ubh
)
r
}
r
(
hFX
<
http
:
/
/
pypi
.
python
.
org
/
pypi
/
fudge
>
r
h
K
hGjt
hMh
hO
}
r
(
U
refurir
j
hW
]
r
h3ahU
]
r
hQ
]
r
hS
]
r
hY
]
r
h
auhA
]
r
ubeubaubeubh
)
r
}
r
(
hFXv
Popular
python
mocking
frameworks
not
yet
represented
here
include
MiniMock
<
http
:
/
/
pypi
.
python
.
org
/
pypi
/
MiniMock
>
_
.
r
hGhDhHhKhMh
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uh
[
K
#
h
\
h
hA
]
r
(
hjXC
Popular
python
mocking
frameworks
not
yet
represented
here
include
r
r
}
r
(
hFXC
Popular
python
mocking
frameworks
not
yet
represented
here
include
r
hGj
ubh
)
r
}
r
(
hFX2
MiniMock
<
http
:
/
/
pypi
.
python
.
org
/
pypi
/
MiniMock
>
_r
hO
}
r
(
U
namer
X
MiniMockr
h
X
http
:
/
/
pypi
.
python
.
org
/
pypi
/
MiniMockr
hW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uhGj
hA
]
r
hjX
MiniMockr
r
}
r
(
hFU
hGj
ubahMh
ubh
)
r
}
r
(
hFX
'
<
http
:
/
/
pypi
.
python
.
org
/
pypi
/
MiniMock
>
r
h
K
hGj
hMh
hO
}
r
(
U
refurir
j
hW
]
r
h7ahU
]
r
hQ
]
r
hS
]
r
hY
]
r
h
auhA
]
r
ubhjX
.
r
}
r
(
hFX
.
hGj
ubeubh
)
r
}
r
(
hFX
pMock
<
http
:
/
/
pmock
.
sourceforge
.
net
/
>
_
(
last
release
2004
and
doesn
'
t
import
in
recent
versions
of
Python
)
and
python
-
mock
<
http
:
/
/
python
-
mock
.
sourceforge
.
net
/
>
_
(
last
release
2005
)
are
intentionally
omitted
.
r
hGhDhHhKhMh
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uh
[
K
&
h
\
h
hA
]
r
(
h
)
r
}
r
(
hFX
(
pMock
<
http
:
/
/
pmock
.
sourceforge
.
net
/
>
_r
hO
}
r
(
U
namer
X
pMockr
h
X
http
:
/
/
pmock
.
sourceforge
.
net
/
r
hW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uhGj
hA
]
r
hjX
pMockr
r
}
r
(
hFU
hGj
ubahMh
ubh
)
r
}
r
(
hFX
<
http
:
/
/
pmock
.
sourceforge
.
net
/
>
r
h
K
hGj
hMh
hO
}
r
(
U
refurir
j
hW
]
r
h0ahU
]
r
hQ
]
r
hS
]
r
hY
]
r
h
auhA
]
r
ubhjXI
(
last
release
2004
and
doesn
'
t
import
in
recent
versions
of
Python
)
and
r
r
}
r
(
hFXI
(
last
release
2004
and
doesn
'
t
import
in
recent
versions
of
Python
)
and
r
hGj
ubh
)
r
}
r
(
hFX4
python
-
mock
<
http
:
/
/
python
-
mock
.
sourceforge
.
net
/
>
_r
hO
}
r
(
U
namer
X
python
-
mockr
h
X
#
http
:
/
/
python
-
mock
.
sourceforge
.
net
/
r
hW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uhGj
hA
]
r
hjX
python
-
mockr
r
}
r
(
hFU
hGj
ubahMh
ubh
)
r
}
r
(
hFX
&
<
http
:
/
/
python
-
mock
.
sourceforge
.
net
/
>
r
h
K
hGj
hMh
hO
}
r
(
U
refurir
j
hW
]
r
h4ahU
]
r
hQ
]
r
hS
]
r
hY
]
r
h
auhA
]
r
ubhjX
/
(
last
release
2005
)
are
intentionally
omitted
.
r
r
}
r
(
hFX
/
(
last
release
2005
)
are
intentionally
omitted
.
r
hGj
ubeubcdocutils
.
nodes
note
r
)
r
}
r
(
hFX
A
more
up
to
date
and
tested
for
all
mock
libraries
(
only
the
mock
examples
on
this
page
can
be
executed
as
doctests
)
version
of
this
comparison
is
maintained
by
Gary
Bernhardt
:
*
Python
Mock
Library
Comparison
<
http
:
/
/
garybernhardt
.
github
.
com
/
python
-
mock
-
comparison
/
>
_r
hGhDhHNhMU
noter
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uh
[
Nh
\
h
hA
]
r
(
h
)
r
}
r
(
hFX
A
more
up
to
date
and
tested
for
all
mock
libraries
(
only
the
mock
examples
on
this
page
can
be
executed
as
doctests
)
version
of
this
comparison
is
maintained
by
Gary
Bernhardt
:
r
hGj
hHhKhMh
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uh
[
K
-
hA
]
r
hjX
A
more
up
to
date
and
tested
for
all
mock
libraries
(
only
the
mock
examples
on
this
page
can
be
executed
as
doctests
)
version
of
this
comparison
is
maintained
by
Gary
Bernhardt
:
r
!
r
"
}
r
#
(
hFj
hGj
ubaubh
)
r
}
r
%
(
hFU
hO
}
r
&
(
h
X
*
hW
]
r
'
hU
]
r
(
hQ
]
r
)
hS
]
r
*
hY
]
r
+
uhGj
hA
]
r
h
)
r
-
}
r
.
(
hFX
[
Python
Mock
Library
Comparison
<
http
:
/
/
garybernhardt
.
github
.
com
/
python
-
mock
-
comparison
/
>
_r
/
hO
}
r0
(
hQ
]
r1
hS
]
r2
hU
]
r3
hW
]
r4
hY
]
r5
uhGj
hA
]
r6
h
)
r7
}
r8
(
hFX
[
Python
Mock
Library
Comparison
<
http
:
/
/
garybernhardt
.
github
.
com
/
python
-
mock
-
comparison
/
>
_r9
hGj
-
hHhKhMh
hO
}
r
:
(
hQ
]
r
;
hS
]
r
<
hU
]
r
=
hW
]
r
>
hY
]
r
?
uh
[
K1hA
]
r
(
h
)
rA
}
rB
(
hFj9
hO
}
rC
(
U
namerD
X
Python
Mock
Library
ComparisonrE
h
X7
http
:
/
/
garybernhardt
.
github
.
com
/
python
-
mock
-
comparison
/
rF
hW
]
rG
hU
]
rH
hQ
]
rI
hS
]
rJ
hY
]
rK
uhGj7
hA
]
rL
hjX
Python
Mock
Library
ComparisonrM
rN
}
rO
(
hFU
hGjA
ubahMh
ubh
)
rP
}
rQ
(
hFX
:
<
http
:
/
/
garybernhardt
.
github
.
com
/
python
-
mock
-
comparison
/
>
rR
h
K
hGj7
hMh
hO
}
rS
(
U
refurirT
jF
hW
]
rU
h
=
ahU
]
rV
hQ
]
rW
hS
]
rX
hY
]
rY
h
auhA
]
rZ
ubeubahMh
ubahMh
ubeubh
)
r
[
}
r
\
(
hFX
This
comparison
is
by
no
means
complete
and
also
may
not
be
fully
idiomatic
for
all
the
libraries
represented
.
*
Please
*
contribute
corrections
missing
comparisons
or
comparisons
for
additional
libraries
to
the
mock
issue
tracker
<
https
:
/
/
code
.
google
.
com
/
p
/
mock
/
issues
/
list
>
_
.
r
]
hGhDhHhKhMh
hO
}
r
^
(
hQ
]
r_
hS
]
r
hU
]
ra
hW
]
rb
hY
]
rc
uh
[
K4h
\
h
hA
]
rd
(
hjXp
This
comparison
is
by
no
means
complete
and
also
may
not
be
fully
idiomatic
for
all
the
libraries
represented
.
re
rf
}
rg
(
hFXp
This
comparison
is
by
no
means
complete
and
also
may
not
be
fully
idiomatic
for
all
the
libraries
represented
.
rh
hGj
[
ubcdocutils
.
nodes
emphasis
ri
)
rj
}
rk
(
hFX
*
Please
*
rl
hO
}
rm
(
hQ
]
rn
hS
]
ro
hU
]
rp
hW
]
rq
hY
]
rr
uhGj
[
hA
]
rs
hjX
Pleasert
ru
}
rv
(
hFU
hGjj
ubahMU
emphasisrw
ubhjX
]
contribute
corrections
missing
comparisons
or
comparisons
for
additional
libraries
to
the
rx
ry
}
rz
(
hFX
]
contribute
corrections
missing
comparisons
or
comparisons
for
additional
libraries
to
the
r
{
hGj
[
ubh
)
r
|
}
r
}
(
hFXB
mock
issue
tracker
<
https
:
/
/
code
.
google
.
com
/
p
/
mock
/
issues
/
list
>
_r
~
hO
}
r
(
U
namer
X
mock
issue
trackerr
h
X
*
https
:
/
/
code
.
google
.
com
/
p
/
mock
/
issues
/
listr
hW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uhGj
[
hA
]
r
hjX
mock
issue
trackerr
r
}
r
(
hFU
hGj
|
ubahMh
ubh
)
r
}
r
(
hFX
-
<
https
:
/
/
code
.
google
.
com
/
p
/
mock
/
issues
/
list
>
r
h
K
hGj
[
hMh
hO
}
r
(
U
refurir
j
hW
]
r
h
?
ahU
]
r
hQ
]
r
hS
]
r
hY
]
r
h
auhA
]
r
ubhjX
.
r
}
r
(
hFX
.
hGj
[
ubeubh
)
r
}
r
(
hFX
This
comparison
page
was
originally
created
by
the
Mox
project
<
https
:
/
/
code
.
google
.
com
/
p
/
pymox
/
wiki
/
MoxComparison
>
_
and
then
extended
for
flexmock
and
mock
<
http
:
/
/
has207
.
github
.
com
/
flexmock
/
compare
.
html
>
_
by
Herman
Sheremetyev
.
Dingus
examples
written
by
Gary
Bernhadt
<
http
:
/
/
garybernhardt
.
github
.
com
/
python
-
mock
-
comparison
/
>
_
.
fudge
examples
provided
by
Kumar
McMillan
<
http
:
/
/
farmdev
.
com
/
>
_
.
r
hGhDhHhKhMh
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uh
[
K9h
\
h
hA
]
r
(
hjX3
This
comparison
page
was
originally
created
by
the
r
r
}
r
(
hFX3
This
comparison
page
was
originally
created
by
the
r
hGj
ubh
)
r
}
r
(
hFXC
Mox
project
<
https
:
/
/
code
.
google
.
com
/
p
/
pymox
/
wiki
/
MoxComparison
>
_r
hO
}
r
(
U
namer
X
Mox
projectr
h
X2
https
:
/
/
code
.
google
.
com
/
p
/
pymox
/
wiki
/
MoxComparisonr
hW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uhGj
hA
]
r
hjX
Mox
projectr
r
}
r
(
hFU
hGj
ubahMh
ubh
)
r
}
r
(
hFX5
<
https
:
/
/
code
.
google
.
com
/
p
/
pymox
/
wiki
/
MoxComparison
>
r
h
K
hGj
hMh
hO
}
r
(
U
refurir
j
hW
]
r
h9ahU
]
r
hQ
]
r
hS
]
r
hY
]
r
h
auhA
]
r
ubhjX
and
then
extended
for
r
r
}
r
(
hFX
and
then
extended
for
r
hGj
ubh
)
r
}
r
(
hFXE
flexmock
and
mock
<
http
:
/
/
has207
.
github
.
com
/
flexmock
/
compare
.
html
>
_r
hO
}
r
(
U
namer
X
flexmock
and
mockr
h
X
.
http
:
/
/
has207
.
github
.
com
/
flexmock
/
compare
.
htmlr
hW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uhGj
hA
]
r
hjX
flexmock
and
mockr
r
}
r
(
hFU
hGj
ubahMh
ubh
)
r
}
r
(
hFX1
<
http
:
/
/
has207
.
github
.
com
/
flexmock
/
compare
.
html
>
r
h
K
hGj
hMh
hO
}
r
(
U
refurir
j
hW
]
r
h
.
ahU
]
r
hQ
]
r
hS
]
r
hY
]
r
h
auhA
]
r
ubhjX3
by
Herman
Sheremetyev
.
Dingus
examples
written
by
r
r
}
r
(
hFX3
by
Herman
Sheremetyev
.
Dingus
examples
written
by
r
hGj
ubh
)
r
}
r
(
hFXJ
Gary
Bernhadt
<
http
:
/
/
garybernhardt
.
github
.
com
/
python
-
mock
-
comparison
/
>
_r
hO
}
r
(
U
namer
X
Gary
Bernhadtr
h
X7
http
:
/
/
garybernhardt
.
github
.
com
/
python
-
mock
-
comparison
/
r
hW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uhGj
hA
]
r
hjX
Gary
Bernhadtr
r
}
r
(
hFU
hGj
ubahMh
ubh
)
r
}
r
(
hFX
:
<
http
:
/
/
garybernhardt
.
github
.
com
/
python
-
mock
-
comparison
/
>
r
h
K
hGj
hMh
hO
}
r
(
U
refurir
j
hW
]
r
h
*
ahU
]
r
hQ
]
r
hS
]
r
hY
]
r
h
auhA
]
r
ubhjX
.
fudge
examples
provided
by
r
r
}
r
(
hFX
.
fudge
examples
provided
by
r
hGj
ubh
)
r
}
r
(
hFX
'
Kumar
McMillan
<
http
:
/
/
farmdev
.
com
/
>
_r
hO
}
r
(
U
namer
X
Kumar
McMillanr
h
X
http
:
/
/
farmdev
.
com
/
r
hW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uhGj
hA
]
r
hjX
Kumar
McMillanr
r
}
r
(
hFU
hGj
ubahMh
ubh
)
r
}
r
(
hFX
<
http
:
/
/
farmdev
.
com
/
>
r
h
K
hGj
hMh
hO
}
r
(
U
refurir
j
hW
]
r
h
>
ahU
]
r
hQ
]
r
hS
]
r
hY
]
r
h
auhA
]
r
ubhjX
.
r
}
r
(
hFX
.
hGj
ubeubj
)
r
!
}
r
"
(
hFX
The
examples
tasks
here
were
originally
created
by
Mox
which
is
a
mocking
*
framework
*
rather
than
a
library
like
mock
.
The
tasks
shown
naturally
exemplify
tasks
that
frameworks
are
good
at
and
not
the
ones
they
make
harder
.
In
particular
you
can
take
a
Mock
or
MagicMock
object
and
use
it
in
any
way
you
want
with
no
up
-
front
configuration
.
The
same
is
also
true
for
Dingus
.
The
examples
for
mock
here
assume
version
0
.
7
.
0
.
r
#
hGhDhHhKhMj
hO
}
r
(
hQ
]
r
%
hS
]
r
&
hU
]
r
'
hW
]
r
(
hY
]
r
)
uh
[
Nh
\
h
hA
]
r
*
(
h
)
r
+
}
r
(
hFXz
The
examples
tasks
here
were
originally
created
by
Mox
which
is
a
mocking
*
framework
*
rather
than
a
library
like
mock
.
The
tasks
shown
naturally
exemplify
tasks
that
frameworks
are
good
at
and
not
the
ones
they
make
harder
.
In
particular
you
can
take
a
Mock
or
MagicMock
object
and
use
it
in
any
way
you
want
with
no
up
-
front
configuration
.
The
same
is
also
true
for
Dingus
.
r
-
hGj
!
hHhKhMh
hO
}
r
.
(
hQ
]
r
/
hS
]
r0
hU
]
r1
hW
]
r2
hY
]
r3
uh
[
KBhA
]
r4
(
hjXJ
The
examples
tasks
here
were
originally
created
by
Mox
which
is
a
mocking
r5
r6
}
r7
(
hFXJ
The
examples
tasks
here
were
originally
created
by
Mox
which
is
a
mocking
r8
hGj
+
ubji
)
r9
}
r
:
(
hFX
*
framework
*
r
;
hO
}
r
<
(
hQ
]
r
=
hS
]
r
>
hU
]
r
?
hW
]
r
hY
]
rA
uhGj
+
hA
]
rB
hjX
frameworkrC
rD
}
rE
(
hFU
hGj9
ubahMjw
ubhjX
rather
than
a
library
like
mock
.
The
tasks
shown
naturally
exemplify
tasks
that
frameworks
are
good
at
and
not
the
ones
they
make
harder
.
In
particular
you
can
take
a
rF
rG
}
rH
(
hFX
rather
than
a
library
like
mock
.
The
tasks
shown
naturally
exemplify
tasks
that
frameworks
are
good
at
and
not
the
ones
they
make
harder
.
In
particular
you
can
take
a
rI
hGj
+
ubcdocutils
.
nodes
title_reference
rJ
)
rK
}
rL
(
hFX
Mock
rM
hO
}
rN
(
hQ
]
rO
hS
]
rP
hU
]
rQ
hW
]
rR
hY
]
rS
uhGj
+
hA
]
rT
hjX
MockrU
rV
}
rW
(
hFU
hGjK
ubahMU
title_referencerX
ubhjX
or
rY
rZ
}
r
[
(
hFX
or
r
\
hGj
+
ubjJ
)
r
]
}
r
^
(
hFX
MagicMock
r_
hO
}
r
(
hQ
]
ra
hS
]
rb
hU
]
rc
hW
]
rd
hY
]
re
uhGj
+
hA
]
rf
hjX
MagicMockrg
rh
}
ri
(
hFU
hGj
]
ubahMjX
ubhjXh
object
and
use
it
in
any
way
you
want
with
no
up
-
front
configuration
.
The
same
is
also
true
for
Dingus
.
rj
rk
}
rl
(
hFXh
object
and
use
it
in
any
way
you
want
with
no
up
-
front
configuration
.
The
same
is
also
true
for
Dingus
.
rm
hGj
+
ubeubh
)
rn
}
ro
(
hFX0
The
examples
for
mock
here
assume
version
0
.
7
.
0
.
rp
hGj
!
hHhKhMh
hO
}
rq
(
hQ
]
rr
hS
]
rs
hU
]
rt
hW
]
ru
hY
]
rv
uh
[
KIhA
]
rw
hjX0
The
examples
for
mock
here
assume
version
0
.
7
.
0
.
rx
ry
}
rz
(
hFjp
hGjn
ubaubeubhC
)
r
{
}
r
|
(
hFU
hGhDhHhKhMhNhO
}
r
}
(
hQ
]
r
~
hS
]
r
hU
]
r
hW
]
r
h
<
ahY
]
r
h
auh
[
KMh
\
h
hA
]
r
(
h
^
)
r
}
r
(
hFX
Simple
fake
objectr
hGj
{
hHhKhMhbhO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uh
[
KMh
\
h
hA
]
r
hjX
Simple
fake
objectr
r
}
r
(
hFj
hGj
ubaubcdocutils
.
nodes
literal_block
r
)
r
}
r
(
hFX
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
Mock
(
)
>
>
>
my_mock
.
some_method
.
return_value
=
"
calculated
value
"
>
>
>
my_mock
.
some_attribute
=
"
value
"
>
>
>
assertEqual
(
"
calculated
value
"
my_mock
.
some_method
(
)
)
>
>
>
assertEqual
(
"
value
"
my_mock
.
some_attribute
)
r
hGj
{
hHhKhMU
literal_blockr
hO
}
r
(
U
testnodetyper
X
doctestr
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
U
groupsr
]
r
h
ah
}
r
uh
[
KOh
\
h
hA
]
r
hjX
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
Mock
(
)
>
>
>
my_mock
.
some_method
.
return_value
=
"
calculated
value
"
>
>
>
my_mock
.
some_attribute
=
"
value
"
>
>
>
assertEqual
(
"
calculated
value
"
my_mock
.
some_method
(
)
)
>
>
>
assertEqual
(
"
value
"
my_mock
.
some_attribute
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFXw
#
Flexmock
mock
=
flexmock
(
some_method
=
lambda
:
"
calculated
value
"
some_attribute
=
"
value
"
)
assertEqual
(
"
calculated
value
"
mock
.
some_method
(
)
)
assertEqual
(
"
value
"
mock
.
some_attribute
)
#
Mox
mock
=
mox
.
MockAnything
(
)
mock
.
some_method
(
)
.
AndReturn
(
"
calculated
value
"
)
mock
.
some_attribute
=
"
value
"
mox
.
Replay
(
mock
)
assertEqual
(
"
calculated
value
"
mock
.
some_method
(
)
)
assertEqual
(
"
value
"
mock
.
some_attribute
)
#
Mocker
mock
=
mocker
.
mock
(
)
mock
.
some_method
(
)
mocker
.
result
(
"
calculated
value
"
)
mocker
.
replay
(
)
mock
.
some_attribute
=
"
value
"
assertEqual
(
"
calculated
value
"
mock
.
some_method
(
)
)
assertEqual
(
"
value
"
mock
.
some_attribute
)
r
hGj
{
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
KZh
\
h
hA
]
r
hjXw
#
Flexmock
mock
=
flexmock
(
some_method
=
lambda
:
"
calculated
value
"
some_attribute
=
"
value
"
)
assertEqual
(
"
calculated
value
"
mock
.
some_method
(
)
)
assertEqual
(
"
value
"
mock
.
some_attribute
)
#
Mox
mock
=
mox
.
MockAnything
(
)
mock
.
some_method
(
)
.
AndReturn
(
"
calculated
value
"
)
mock
.
some_attribute
=
"
value
"
mox
.
Replay
(
mock
)
assertEqual
(
"
calculated
value
"
mock
.
some_method
(
)
)
assertEqual
(
"
value
"
mock
.
some_attribute
)
#
Mocker
mock
=
mocker
.
mock
(
)
mock
.
some_method
(
)
mocker
.
result
(
"
calculated
value
"
)
mocker
.
replay
(
)
mock
.
some_attribute
=
"
value
"
assertEqual
(
"
calculated
value
"
mock
.
some_method
(
)
)
assertEqual
(
"
value
"
mock
.
some_attribute
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFX
>
>
>
#
Dingus
>
>
>
my_dingus
=
dingus
.
Dingus
(
some_attribute
=
"
value
"
.
.
.
some_method__returns
=
"
calculated
value
"
)
>
>
>
assertEqual
(
"
calculated
value
"
my_dingus
.
some_method
(
)
)
>
>
>
assertEqual
(
"
value
"
my_dingus
.
some_attribute
)
r
hGj
{
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
Krh
\
h
hA
]
r
hjX
>
>
>
#
Dingus
>
>
>
my_dingus
=
dingus
.
Dingus
(
some_attribute
=
"
value
"
.
.
.
some_method__returns
=
"
calculated
value
"
)
>
>
>
assertEqual
(
"
calculated
value
"
my_dingus
.
some_method
(
)
)
>
>
>
assertEqual
(
"
value
"
my_dingus
.
some_attribute
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFX
>
>
>
#
fudge
>
>
>
my_fake
=
(
fudge
.
Fake
(
)
.
.
.
.
provides
(
'
some_method
'
)
.
.
.
.
returns
(
"
calculated
value
"
)
.
.
.
.
has_attr
(
some_attribute
=
"
value
"
)
)
.
.
.
>
>
>
assertEqual
(
"
calculated
value
"
my_fake
.
some_method
(
)
)
>
>
>
assertEqual
(
"
value
"
my_fake
.
some_attribute
)
r
hGj
{
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
Kzh
\
h
hA
]
r
hjX
>
>
>
#
fudge
>
>
>
my_fake
=
(
fudge
.
Fake
(
)
.
.
.
.
provides
(
'
some_method
'
)
.
.
.
.
returns
(
"
calculated
value
"
)
.
.
.
.
has_attr
(
some_attribute
=
"
value
"
)
)
.
.
.
>
>
>
assertEqual
(
"
calculated
value
"
my_fake
.
some_method
(
)
)
>
>
>
assertEqual
(
"
value
"
my_fake
.
some_attribute
)
r
r
}
r
(
hFU
hGj
ubaubeubhC
)
r
}
r
(
hFU
hGhDhHhKhMhNhO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
h
ahY
]
r
h
auh
[
K
h
\
h
hA
]
r
(
h
^
)
r
}
r
(
hFX
Simple
mockr
hGj
hHhKhMhbhO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uh
[
K
h
\
h
hA
]
r
hjX
Simple
mockr
r
}
r
(
hFj
hGj
ubaubj
)
r
}
r
(
hFX
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
Mock
(
)
>
>
>
my_mock
.
some_method
.
return_value
=
"
value
"
>
>
>
assertEqual
(
"
value
"
my_mock
.
some_method
(
)
)
>
>
>
my_mock
.
some_method
.
assert_called_once_with
(
)
r
hGj
hHhKhMj
hO
}
r
(
U
testnodetyper
X
doctestr
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
U
groupsr
]
r
h
ah
}
r
uh
[
K
h
\
h
hA
]
r
hjX
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
Mock
(
)
>
>
>
my_mock
.
some_method
.
return_value
=
"
value
"
>
>
>
assertEqual
(
"
value
"
my_mock
.
some_method
(
)
)
>
>
>
my_mock
.
some_method
.
assert_called_once_with
(
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFX
#
Flexmock
mock
=
flexmock
(
)
mock
.
should_receive
(
"
some_method
"
)
.
and_return
(
"
value
"
)
.
once
assertEqual
(
"
value
"
mock
.
some_method
(
)
)
#
Mox
mock
=
mox
.
MockAnything
(
)
mock
.
some_method
(
)
.
AndReturn
(
"
value
"
)
mox
.
Replay
(
mock
)
assertEqual
(
"
value
"
mock
.
some_method
(
)
)
mox
.
Verify
(
mock
)
#
Mocker
mock
=
mocker
.
mock
(
)
mock
.
some_method
(
)
mocker
.
result
(
"
value
"
)
mocker
.
replay
(
)
assertEqual
(
"
value
"
mock
.
some_method
(
)
)
mocker
.
verify
(
)
r
hGj
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
K
h
\
h
hA
]
r
hjX
#
Flexmock
mock
=
flexmock
(
)
mock
.
should_receive
(
"
some_method
"
)
.
and_return
(
"
value
"
)
.
once
assertEqual
(
"
value
"
mock
.
some_method
(
)
)
#
Mox
mock
=
mox
.
MockAnything
(
)
mock
.
some_method
(
)
.
AndReturn
(
"
value
"
)
mox
.
Replay
(
mock
)
assertEqual
(
"
value
"
mock
.
some_method
(
)
)
mox
.
Verify
(
mock
)
#
Mocker
mock
=
mocker
.
mock
(
)
mock
.
some_method
(
)
mocker
.
result
(
"
value
"
)
mocker
.
replay
(
)
assertEqual
(
"
value
"
mock
.
some_method
(
)
)
mocker
.
verify
(
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFX
>
>
>
#
Dingus
>
>
>
my_dingus
=
dingus
.
Dingus
(
some_method__returns
=
"
value
"
)
>
>
>
assertEqual
(
"
value
"
my_dingus
.
some_method
(
)
)
>
>
>
assert
my_dingus
.
some_method
.
calls
(
)
.
once
(
)
r
hGj
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
K
h
\
h
hA
]
r
hjX
>
>
>
#
Dingus
>
>
>
my_dingus
=
dingus
.
Dingus
(
some_method__returns
=
"
value
"
)
>
>
>
assertEqual
(
"
value
"
my_dingus
.
some_method
(
)
)
>
>
>
assert
my_dingus
.
some_method
.
calls
(
)
.
once
(
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFX0
>
>
>
#
fudge
>
>
>
fudge
.
test
.
.
.
def
test
(
)
:
.
.
.
my_fake
=
(
fudge
.
Fake
(
)
.
.
.
.
expects
(
'
some_method
'
)
.
.
.
.
returns
(
"
value
"
)
.
.
.
.
times_called
(
1
)
)
.
.
.
>
>
>
test
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
AssertionError
:
fake
:
my_fake
.
some_method
(
)
was
not
calledr
hGj
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
K
h
\
h
hA
]
r
hjX0
>
>
>
#
fudge
>
>
>
fudge
.
test
.
.
.
def
test
(
)
:
.
.
.
my_fake
=
(
fudge
.
Fake
(
)
.
.
.
.
expects
(
'
some_method
'
)
.
.
.
.
returns
(
"
value
"
)
.
.
.
.
times_called
(
1
)
)
.
.
.
>
>
>
test
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
AssertionError
:
fake
:
my_fake
.
some_method
(
)
was
not
calledr
r
}
r
(
hFU
hGj
ubaubeubhC
)
r
}
r
(
hFU
hGhDhHhKhMhNhO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
!
h
:
ahY
]
r
"
h
auh
[
K
h
\
h
hA
]
r
#
(
h
^
)
r
}
r
%
(
hFX
Creating
partial
mocksr
&
hGj
hHhKhMhbhO
}
r
'
(
hQ
]
r
(
hS
]
r
)
hU
]
r
*
hW
]
r
+
hY
]
r
uh
[
K
h
\
h
hA
]
r
-
hjX
Creating
partial
mocksr
.
r
/
}
r0
(
hFj
&
hGj
ubaubj
)
r1
}
r2
(
hFXz
>
>
>
#
mock
>
>
>
SomeObject
.
some_method
=
mock
.
Mock
(
return_value
=
'
value
'
)
>
>
>
assertEqual
(
"
value
"
SomeObject
.
some_method
(
)
)
r3
hGj
hHhKhMj
hO
}
r4
(
U
testnodetyper5
X
doctestr6
hvhwhW
]
r7
hU
]
r8
hQ
]
r9
hS
]
r
:
hY
]
r
;
U
groupsr
<
]
r
=
h
ah
}
r
>
uh
[
K
h
\
h
hA
]
r
?
hjXz
>
>
>
#
mock
>
>
>
SomeObject
.
some_method
=
mock
.
Mock
(
return_value
=
'
value
'
)
>
>
>
assertEqual
(
"
value
"
SomeObject
.
some_method
(
)
)
r
rA
}
rB
(
hFU
hGj1
ubaubj
)
rC
}
rD
(
hFX
#
Flexmock
flexmock
(
SomeObject
)
.
should_receive
(
"
some_method
"
)
.
and_return
(
'
value
'
)
assertEqual
(
"
value
"
mock
.
some_method
(
)
)
#
Mox
mock
=
mox
.
MockObject
(
SomeObject
)
mock
.
some_method
(
)
.
AndReturn
(
"
value
"
)
mox
.
Replay
(
mock
)
assertEqual
(
"
value
"
mock
.
some_method
(
)
)
mox
.
Verify
(
mock
)
#
Mocker
mock
=
mocker
.
mock
(
SomeObject
)
mock
.
Get
(
)
mocker
.
result
(
"
value
"
)
mocker
.
replay
(
)
assertEqual
(
"
value
"
mock
.
some_method
(
)
)
mocker
.
verify
(
)
rE
hGj
hHhKhMj
hO
}
rF
(
hvhwhW
]
rG
hU
]
rH
hQ
]
rI
hS
]
rJ
hY
]
rK
uh
[
K
h
\
h
hA
]
rL
hjX
#
Flexmock
flexmock
(
SomeObject
)
.
should_receive
(
"
some_method
"
)
.
and_return
(
'
value
'
)
assertEqual
(
"
value
"
mock
.
some_method
(
)
)
#
Mox
mock
=
mox
.
MockObject
(
SomeObject
)
mock
.
some_method
(
)
.
AndReturn
(
"
value
"
)
mox
.
Replay
(
mock
)
assertEqual
(
"
value
"
mock
.
some_method
(
)
)
mox
.
Verify
(
mock
)
#
Mocker
mock
=
mocker
.
mock
(
SomeObject
)
mock
.
Get
(
)
mocker
.
result
(
"
value
"
)
mocker
.
replay
(
)
assertEqual
(
"
value
"
mock
.
some_method
(
)
)
mocker
.
verify
(
)
rM
rN
}
rO
(
hFU
hGjC
ubaubj
)
rP
}
rQ
(
hFX
>
>
>
#
Dingus
>
>
>
object
=
SomeObject
>
>
>
object
.
some_method
=
dingus
.
Dingus
(
return_value
=
"
value
"
)
>
>
>
assertEqual
(
"
value
"
object
.
some_method
(
)
)
rR
hGj
hHhKhMj
hO
}
rS
(
hvhwhW
]
rT
hU
]
rU
hQ
]
rV
hS
]
rW
hY
]
rX
uh
[
K
h
\
h
hA
]
rY
hjX
>
>
>
#
Dingus
>
>
>
object
=
SomeObject
>
>
>
object
.
some_method
=
dingus
.
Dingus
(
return_value
=
"
value
"
)
>
>
>
assertEqual
(
"
value
"
object
.
some_method
(
)
)
rZ
r
[
}
r
\
(
hFU
hGjP
ubaubj
)
r
]
}
r
^
(
hFX
>
>
>
#
fudge
>
>
>
fake
=
fudge
.
Fake
(
)
.
is_callable
(
)
.
returns
(
"
<
fudge
-
value
>
"
)
>
>
>
with
fudge
.
patched_context
(
SomeObject
'
some_method
'
fake
)
:
.
.
.
s
=
SomeObject
(
)
.
.
.
assertEqual
(
"
<
fudge
-
value
>
"
s
.
some_method
(
)
)
.
.
.
r_
hGj
hHhKhMj
hO
}
r
(
hvhwhW
]
ra
hU
]
rb
hQ
]
rc
hS
]
rd
hY
]
re
uh
[
K
h
\
h
hA
]
rf
hjX
>
>
>
#
fudge
>
>
>
fake
=
fudge
.
Fake
(
)
.
is_callable
(
)
.
returns
(
"
<
fudge
-
value
>
"
)
>
>
>
with
fudge
.
patched_context
(
SomeObject
'
some_method
'
fake
)
:
.
.
.
s
=
SomeObject
(
)
.
.
.
assertEqual
(
"
<
fudge
-
value
>
"
s
.
some_method
(
)
)
.
.
.
rg
rh
}
ri
(
hFU
hGj
]
ubaubeubhC
)
rj
}
rk
(
hFU
hGhDhHhKhMhNhO
}
rl
(
hQ
]
rm
hS
]
rn
hU
]
ro
hW
]
rp
h
+
ahY
]
rq
h
auh
[
K
h
\
h
hA
]
rr
(
h
^
)
rs
}
rt
(
hFX
'
Ensure
calls
are
made
in
specific
orderru
hGjj
hHhKhMhbhO
}
rv
(
hQ
]
rw
hS
]
rx
hU
]
ry
hW
]
rz
hY
]
r
{
uh
[
K
h
\
h
hA
]
r
|
hjX
'
Ensure
calls
are
made
in
specific
orderr
}
r
~
}
r
(
hFju
hGjs
ubaubj
)
r
}
r
(
hFX
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
Mock
(
spec
=
SomeObject
)
>
>
>
my_mock
.
method1
(
)
<
Mock
name
=
'
mock
.
method1
(
)
'
id
=
'
.
.
.
'
>
>
>
>
my_mock
.
method2
(
)
<
Mock
name
=
'
mock
.
method2
(
)
'
id
=
'
.
.
.
'
>
>
>
>
assertEqual
(
my_mock
.
mock_calls
[
call
.
method1
(
)
call
.
method2
(
)
]
)
r
hGjj
hHhKhMj
hO
}
r
(
U
testnodetyper
X
doctestr
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
U
groupsr
]
r
h
ah
}
r
uh
[
K
h
\
h
hA
]
r
hjX
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
Mock
(
spec
=
SomeObject
)
>
>
>
my_mock
.
method1
(
)
<
Mock
name
=
'
mock
.
method1
(
)
'
id
=
'
.
.
.
'
>
>
>
>
my_mock
.
method2
(
)
<
Mock
name
=
'
mock
.
method2
(
)
'
id
=
'
.
.
.
'
>
>
>
>
assertEqual
(
my_mock
.
mock_calls
[
call
.
method1
(
)
call
.
method2
(
)
]
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFX
#
Flexmock
mock
=
flexmock
(
SomeObject
)
mock
.
should_receive
(
'
method1
'
)
.
once
.
ordered
.
and_return
(
'
first
thing
'
)
mock
.
should_receive
(
'
method2
'
)
.
once
.
ordered
.
and_return
(
'
second
thing
'
)
#
Mox
mock
=
mox
.
MockObject
(
SomeObject
)
mock
.
method1
(
)
.
AndReturn
(
'
first
thing
'
)
mock
.
method2
(
)
.
AndReturn
(
'
second
thing
'
)
mox
.
Replay
(
mock
)
mox
.
Verify
(
mock
)
#
Mocker
mock
=
mocker
.
mock
(
)
with
mocker
.
order
(
)
:
mock
.
method1
(
)
mocker
.
result
(
'
first
thing
'
)
mock
.
method2
(
)
mocker
.
result
(
'
second
thing
'
)
mocker
.
replay
(
)
mocker
.
verify
(
)
r
hGjj
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
K
h
\
h
hA
]
r
hjX
#
Flexmock
mock
=
flexmock
(
SomeObject
)
mock
.
should_receive
(
'
method1
'
)
.
once
.
ordered
.
and_return
(
'
first
thing
'
)
mock
.
should_receive
(
'
method2
'
)
.
once
.
ordered
.
and_return
(
'
second
thing
'
)
#
Mox
mock
=
mox
.
MockObject
(
SomeObject
)
mock
.
method1
(
)
.
AndReturn
(
'
first
thing
'
)
mock
.
method2
(
)
.
AndReturn
(
'
second
thing
'
)
mox
.
Replay
(
mock
)
mox
.
Verify
(
mock
)
#
Mocker
mock
=
mocker
.
mock
(
)
with
mocker
.
order
(
)
:
mock
.
method1
(
)
mocker
.
result
(
'
first
thing
'
)
mock
.
method2
(
)
mocker
.
result
(
'
second
thing
'
)
mocker
.
replay
(
)
mocker
.
verify
(
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFX
>
>
>
#
Dingus
>
>
>
my_dingus
=
dingus
.
Dingus
(
)
>
>
>
my_dingus
.
method1
(
)
<
Dingus
.
.
.
>
>
>
>
my_dingus
.
method2
(
)
<
Dingus
.
.
.
>
>
>
>
assertEqual
(
[
'
method1
'
'
method2
'
]
[
call
.
name
for
call
in
my_dingus
.
calls
]
)
r
hGjj
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
M
h
\
h
hA
]
r
hjX
>
>
>
#
Dingus
>
>
>
my_dingus
=
dingus
.
Dingus
(
)
>
>
>
my_dingus
.
method1
(
)
<
Dingus
.
.
.
>
>
>
>
my_dingus
.
method2
(
)
<
Dingus
.
.
.
>
>
>
>
assertEqual
(
[
'
method1
'
'
method2
'
]
[
call
.
name
for
call
in
my_dingus
.
calls
]
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFX
>
>
>
#
fudge
>
>
>
fudge
.
test
.
.
.
def
test
(
)
:
.
.
.
my_fake
=
(
fudge
.
Fake
(
)
.
.
.
.
remember_order
(
)
.
.
.
.
expects
(
'
method1
'
)
.
.
.
.
expects
(
'
method2
'
)
)
.
.
.
my_fake
.
method2
(
)
.
.
.
my_fake
.
method1
(
)
.
.
.
>
>
>
test
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
AssertionError
:
Call
#
1
was
fake
:
my_fake
.
method2
(
)
;
Expected
:
#
1
fake
:
my_fake
.
method1
(
)
#
2
fake
:
my_fake
.
method2
(
)
endr
hGjj
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
M
h
\
h
hA
]
r
hjX
>
>
>
#
fudge
>
>
>
fudge
.
test
.
.
.
def
test
(
)
:
.
.
.
my_fake
=
(
fudge
.
Fake
(
)
.
.
.
.
remember_order
(
)
.
.
.
.
expects
(
'
method1
'
)
.
.
.
.
expects
(
'
method2
'
)
)
.
.
.
my_fake
.
method2
(
)
.
.
.
my_fake
.
method1
(
)
.
.
.
>
>
>
test
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
AssertionError
:
Call
#
1
was
fake
:
my_fake
.
method2
(
)
;
Expected
:
#
1
fake
:
my_fake
.
method1
(
)
#
2
fake
:
my_fake
.
method2
(
)
endr
r
}
r
(
hFU
hGj
ubaubeubhC
)
r
}
r
(
hFU
hGhDhHhKhMhNhO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
h1ahY
]
r
h
auh
[
M
-
h
\
h
hA
]
r
(
h
^
)
r
}
r
(
hFX
Raising
exceptionsr
hGj
hHhKhMhbhO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uh
[
M
-
h
\
h
hA
]
r
hjX
Raising
exceptionsr
r
}
r
(
hFj
hGj
ubaubj
)
r
}
r
(
hFX
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
Mock
(
)
>
>
>
my_mock
.
some_method
.
side_effect
=
SomeException
(
"
message
"
)
>
>
>
assertRaises
(
SomeException
my_mock
.
some_method
)
r
hGj
hHhKhMj
hO
}
r
(
U
testnodetyper
X
doctestr
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
U
groupsr
]
r
h
ah
}
r
uh
[
M
/
h
\
h
hA
]
r
hjX
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
Mock
(
)
>
>
>
my_mock
.
some_method
.
side_effect
=
SomeException
(
"
message
"
)
>
>
>
assertRaises
(
SomeException
my_mock
.
some_method
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFX
#
Flexmock
mock
=
flexmock
(
)
mock
.
should_receive
(
"
some_method
"
)
.
and_raise
(
SomeException
(
"
message
"
)
)
assertRaises
(
SomeException
mock
.
some_method
)
#
Mox
mock
=
mox
.
MockAnything
(
)
mock
.
some_method
(
)
.
AndRaise
(
SomeException
(
"
message
"
)
)
mox
.
Replay
(
mock
)
assertRaises
(
SomeException
mock
.
some_method
)
mox
.
Verify
(
mock
)
#
Mocker
mock
=
mocker
.
mock
(
)
mock
.
some_method
(
)
mocker
.
throw
(
SomeException
(
"
message
"
)
)
mocker
.
replay
(
)
assertRaises
(
SomeException
mock
.
some_method
)
mocker
.
verify
(
)
r
hGj
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
M8
h
\
h
hA
]
r
hjX
#
Flexmock
mock
=
flexmock
(
)
mock
.
should_receive
(
"
some_method
"
)
.
and_raise
(
SomeException
(
"
message
"
)
)
assertRaises
(
SomeException
mock
.
some_method
)
#
Mox
mock
=
mox
.
MockAnything
(
)
mock
.
some_method
(
)
.
AndRaise
(
SomeException
(
"
message
"
)
)
mox
.
Replay
(
mock
)
assertRaises
(
SomeException
mock
.
some_method
)
mox
.
Verify
(
mock
)
#
Mocker
mock
=
mocker
.
mock
(
)
mock
.
some_method
(
)
mocker
.
throw
(
SomeException
(
"
message
"
)
)
mocker
.
replay
(
)
assertRaises
(
SomeException
mock
.
some_method
)
mocker
.
verify
(
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFX
>
>
>
#
Dingus
>
>
>
my_dingus
=
dingus
.
Dingus
(
)
>
>
>
my_dingus
.
some_method
=
dingus
.
exception_raiser
(
SomeException
)
>
>
>
assertRaises
(
SomeException
my_dingus
.
some_method
)
r
hGj
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
MN
h
\
h
hA
]
r
hjX
>
>
>
#
Dingus
>
>
>
my_dingus
=
dingus
.
Dingus
(
)
>
>
>
my_dingus
.
some_method
=
dingus
.
exception_raiser
(
SomeException
)
>
>
>
assertRaises
(
SomeException
my_dingus
.
some_method
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFX
>
>
>
#
fudge
>
>
>
my_fake
=
(
fudge
.
Fake
(
)
.
.
.
.
is_callable
(
)
.
.
.
.
raises
(
SomeException
(
"
message
"
)
)
)
.
.
.
>
>
>
my_fake
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
SomeException
:
messager
hGj
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
MU
h
\
h
hA
]
r
hjX
>
>
>
#
fudge
>
>
>
my_fake
=
(
fudge
.
Fake
(
)
.
.
.
.
is_callable
(
)
.
.
.
.
raises
(
SomeException
(
"
message
"
)
)
)
.
.
.
>
>
>
my_fake
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
SomeException
:
messager
r
}
r
(
hFU
hGj
ubaubeubhC
)
r
}
r
(
hFU
hGhDhHhKhMhNhO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
h
-
ahY
]
r
h
auh
[
Ma
h
\
h
hA
]
r
(
h
^
)
r
}
r
(
hFX
!
Override
new
instances
of
a
classr
hGj
hHhKhMhbhO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uh
[
Ma
h
\
h
hA
]
r
hjX
!
Override
new
instances
of
a
classr
r
}
r
(
hFj
hGj
ubaubj
)
r
}
r
(
hFX
>
>
>
#
mock
>
>
>
with
mock
.
patch
(
'
somemodule
.
Someclass
'
)
as
MockClass
:
.
.
.
MockClass
.
return_value
=
some_other_object
.
.
.
assertEqual
(
some_other_object
somemodule
.
Someclass
(
)
)
.
.
.
r
hGj
hHhKhMj
hO
}
r
!
(
U
testnodetyper
"
X
doctestr
#
hvhwhW
]
r
hU
]
r
%
hQ
]
r
&
hS
]
r
'
hY
]
r
(
U
groupsr
)
]
r
*
h
ah
}
r
+
uh
[
Mc
h
\
h
hA
]
r
hjX
>
>
>
#
mock
>
>
>
with
mock
.
patch
(
'
somemodule
.
Someclass
'
)
as
MockClass
:
.
.
.
MockClass
.
return_value
=
some_other_object
.
.
.
assertEqual
(
some_other_object
somemodule
.
Someclass
(
)
)
.
.
.
r
-
r
.
}
r
/
(
hFU
hGj
ubaubj
)
r0
}
r1
(
hFX
#
Flexmock
flexmock
(
some_module
.
SomeClass
new_instances
=
some_other_object
)
assertEqual
(
some_other_object
some_module
.
SomeClass
(
)
)
#
Mox
#
(
you
will
probably
have
mox
.
Mox
(
)
available
as
self
.
mox
in
a
real
test
)
mox
.
Mox
(
)
.
StubOutWithMock
(
some_module
'
SomeClass
'
use_mock_anything
=
True
)
some_module
.
SomeClass
(
)
.
AndReturn
(
some_other_object
)
mox
.
ReplayAll
(
)
assertEqual
(
some_other_object
some_module
.
SomeClass
(
)
)
#
Mocker
instance
=
mocker
.
mock
(
)
klass
=
mocker
.
replace
(
SomeClass
spec
=
None
)
klass
(
'
expected
'
'
args
'
)
mocker
.
result
(
instance
)
r2
hGj
hHhKhMj
hO
}
r3
(
hvhwhW
]
r4
hU
]
r5
hQ
]
r6
hS
]
r7
hY
]
r8
uh
[
Mn
h
\
h
hA
]
r9
hjX
#
Flexmock
flexmock
(
some_module
.
SomeClass
new_instances
=
some_other_object
)
assertEqual
(
some_other_object
some_module
.
SomeClass
(
)
)
#
Mox
#
(
you
will
probably
have
mox
.
Mox
(
)
available
as
self
.
mox
in
a
real
test
)
mox
.
Mox
(
)
.
StubOutWithMock
(
some_module
'
SomeClass
'
use_mock_anything
=
True
)
some_module
.
SomeClass
(
)
.
AndReturn
(
some_other_object
)
mox
.
ReplayAll
(
)
assertEqual
(
some_other_object
some_module
.
SomeClass
(
)
)
#
Mocker
instance
=
mocker
.
mock
(
)
klass
=
mocker
.
replace
(
SomeClass
spec
=
None
)
klass
(
'
expected
'
'
args
'
)
mocker
.
result
(
instance
)
r
:
r
;
}
r
<
(
hFU
hGj0
ubaubj
)
r
=
}
r
>
(
hFX
>
>
>
#
Dingus
>
>
>
MockClass
=
dingus
.
Dingus
(
return_value
=
some_other_object
)
>
>
>
with
dingus
.
patch
(
'
somemodule
.
SomeClass
'
MockClass
)
:
.
.
.
assertEqual
(
some_other_object
somemodule
.
SomeClass
(
)
)
.
.
.
r
?
hGj
hHhKhMj
hO
}
r
(
hvhwhW
]
rA
hU
]
rB
hQ
]
rC
hS
]
rD
hY
]
rE
uh
[
M
h
\
h
hA
]
rF
hjX
>
>
>
#
Dingus
>
>
>
MockClass
=
dingus
.
Dingus
(
return_value
=
some_other_object
)
>
>
>
with
dingus
.
patch
(
'
somemodule
.
SomeClass
'
MockClass
)
:
.
.
.
assertEqual
(
some_other_object
somemodule
.
SomeClass
(
)
)
.
.
.
rG
rH
}
rI
(
hFU
hGj
=
ubaubj
)
rJ
}
rK
(
hFX
>
>
>
#
fudge
>
>
>
fudge
.
patch
(
'
somemodule
.
SomeClass
'
)
.
.
.
def
test
(
FakeClass
)
:
.
.
.
FakeClass
.
is_callable
(
)
.
returns
(
some_other_object
)
.
.
.
assertEqual
(
some_other_object
somemodule
.
SomeClass
(
)
)
.
.
.
>
>
>
test
(
)
rL
hGj
hHhKhMj
hO
}
rM
(
hvhwhW
]
rN
hU
]
rO
hQ
]
rP
hS
]
rQ
hY
]
rR
uh
[
M
h
\
h
hA
]
rS
hjX
>
>
>
#
fudge
>
>
>
fudge
.
patch
(
'
somemodule
.
SomeClass
'
)
.
.
.
def
test
(
FakeClass
)
:
.
.
.
FakeClass
.
is_callable
(
)
.
returns
(
some_other_object
)
.
.
.
assertEqual
(
some_other_object
somemodule
.
SomeClass
(
)
)
.
.
.
>
>
>
test
(
)
rT
rU
}
rV
(
hFU
hGjJ
ubaubeubhC
)
rW
}
rX
(
hFU
hGhDhHhKhMhNhO
}
rY
(
hQ
]
rZ
hS
]
r
[
hU
]
r
\
hW
]
r
]
h
)
ahY
]
r
^
h
auh
[
M
h
\
h
hA
]
r_
(
h
^
)
r
}
ra
(
hFX
#
Call
the
same
method
multiple
timesrb
hGjW
hHhKhMhbhO
}
rc
(
hQ
]
rd
hS
]
re
hU
]
rf
hW
]
rg
hY
]
rh
uh
[
M
h
\
h
hA
]
ri
hjX
#
Call
the
same
method
multiple
timesrj
rk
}
rl
(
hFjb
hGj
ubaubj
)
rm
}
rn
(
hFX
You
don
'
t
need
to
do
*
any
*
configuration
to
call
mock
.
Mock
(
)
methods
multiple
times
.
Attributes
like
call_count
call_args_list
and
method_calls
provide
various
different
ways
of
making
assertions
about
how
the
mock
was
used
.
ro
hGjW
hHhKhMj
hO
}
rp
(
hQ
]
rq
hS
]
rr
hU
]
rs
hW
]
rt
hY
]
ru
uh
[
Nh
\
h
hA
]
rv
h
)
rw
}
rx
(
hFX
You
don
'
t
need
to
do
*
any
*
configuration
to
call
mock
.
Mock
(
)
methods
multiple
times
.
Attributes
like
call_count
call_args_list
and
method_calls
provide
various
different
ways
of
making
assertions
about
how
the
mock
was
used
.
ry
hGjm
hHhKhMh
hO
}
rz
(
hQ
]
r
{
hS
]
r
|
hU
]
r
}
hW
]
r
~
hY
]
r
uh
[
M
hA
]
r
(
hjX
You
don
'
t
need
to
do
r
r
}
r
(
hFX
You
don
'
t
need
to
do
r
hGjw
ubji
)
r
}
r
(
hFX
*
any
*
r
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uhGjw
hA
]
r
hjX
anyr
r
}
r
(
hFU
hGj
ubahMjw
ubhjX
configuration
to
call
r
r
}
r
(
hFX
configuration
to
call
r
hGjw
ubjJ
)
r
}
r
(
hFX
mock
.
Mock
(
)
r
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uhGjw
hA
]
r
hjX
mock
.
Mock
(
)
r
r
}
r
(
hFU
hGj
ubahMjX
ubhjX
)
methods
multiple
times
.
Attributes
like
r
r
}
r
(
hFX
)
methods
multiple
times
.
Attributes
like
r
hGjw
ubjJ
)
r
}
r
(
hFX
call_count
r
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uhGjw
hA
]
r
hjX
call_countr
r
}
r
(
hFU
hGj
ubahMjX
ubhjX
r
r
}
r
(
hFX
r
hGjw
ubjJ
)
r
}
r
(
hFX
call_args_list
r
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uhGjw
hA
]
r
hjX
call_args_listr
r
}
r
(
hFU
hGj
ubahMjX
ubhjX
and
r
r
}
r
(
hFX
and
r
hGjw
ubjJ
)
r
}
r
(
hFX
method_calls
r
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uhGjw
hA
]
r
hjX
method_callsr
r
}
r
(
hFU
hGj
ubahMjX
ubhjXQ
provide
various
different
ways
of
making
assertions
about
how
the
mock
was
used
.
r
r
}
r
(
hFXQ
provide
various
different
ways
of
making
assertions
about
how
the
mock
was
used
.
r
hGjw
ubeubaubj
)
r
}
r
(
hFX
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
Mock
(
)
>
>
>
my_mock
.
some_method
(
)
<
Mock
name
=
'
mock
.
some_method
(
)
'
id
=
'
.
.
.
'
>
>
>
>
my_mock
.
some_method
(
)
<
Mock
name
=
'
mock
.
some_method
(
)
'
id
=
'
.
.
.
'
>
>
>
>
assert
my_mock
.
some_method
.
call_count
>
=
2r
hGjW
hHhKhMj
hO
}
r
(
U
testnodetyper
X
doctestr
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
U
groupsr
]
r
h
ah
}
r
uh
[
M
h
\
h
hA
]
r
hjX
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
Mock
(
)
>
>
>
my_mock
.
some_method
(
)
<
Mock
name
=
'
mock
.
some_method
(
)
'
id
=
'
.
.
.
'
>
>
>
>
my_mock
.
some_method
(
)
<
Mock
name
=
'
mock
.
some_method
(
)
'
id
=
'
.
.
.
'
>
>
>
>
assert
my_mock
.
some_method
.
call_count
>
=
2r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFX
#
Flexmock
#
(
verifies
that
the
method
gets
called
at
least
twice
)
flexmock
(
some_object
)
.
should_receive
(
'
some_method
'
)
.
at_least
.
twice
#
Mox
#
(
does
not
support
variable
number
of
calls
so
you
need
to
create
a
new
entry
for
each
explicit
call
)
mock
=
mox
.
MockObject
(
some_object
)
mock
.
some_method
(
mox
.
IgnoreArg
(
)
mox
.
IgnoreArg
(
)
)
mock
.
some_method
(
mox
.
IgnoreArg
(
)
mox
.
IgnoreArg
(
)
)
mox
.
Replay
(
mock
)
mox
.
Verify
(
mock
)
#
Mocker
#
(
TODO
)
r
hGjW
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
M
h
\
h
hA
]
r
hjX
#
Flexmock
#
(
verifies
that
the
method
gets
called
at
least
twice
)
flexmock
(
some_object
)
.
should_receive
(
'
some_method
'
)
.
at_least
.
twice
#
Mox
#
(
does
not
support
variable
number
of
calls
so
you
need
to
create
a
new
entry
for
each
explicit
call
)
mock
=
mox
.
MockObject
(
some_object
)
mock
.
some_method
(
mox
.
IgnoreArg
(
)
mox
.
IgnoreArg
(
)
)
mock
.
some_method
(
mox
.
IgnoreArg
(
)
mox
.
IgnoreArg
(
)
)
mox
.
Replay
(
mock
)
mox
.
Verify
(
mock
)
#
Mocker
#
(
TODO
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFX
>
>
>
#
Dingus
>
>
>
my_dingus
=
dingus
.
Dingus
(
)
>
>
>
my_dingus
.
some_method
(
)
<
Dingus
.
.
.
>
>
>
>
my_dingus
.
some_method
(
)
<
Dingus
.
.
.
>
>
>
>
assert
len
(
my_dingus
.
calls
(
'
some_method
'
)
)
=
=
2r
hGjW
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
M
h
\
h
hA
]
r
hjX
>
>
>
#
Dingus
>
>
>
my_dingus
=
dingus
.
Dingus
(
)
>
>
>
my_dingus
.
some_method
(
)
<
Dingus
.
.
.
>
>
>
>
my_dingus
.
some_method
(
)
<
Dingus
.
.
.
>
>
>
>
assert
len
(
my_dingus
.
calls
(
'
some_method
'
)
)
=
=
2r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFX
>
>
>
#
fudge
>
>
>
fudge
.
test
.
.
.
def
test
(
)
:
.
.
.
my_fake
=
fudge
.
Fake
(
)
.
expects
(
'
some_method
'
)
.
times_called
(
2
)
.
.
.
my_fake
.
some_method
(
)
.
.
.
>
>
>
test
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
AssertionError
:
fake
:
my_fake
.
some_method
(
)
was
called
1
time
(
s
)
.
Expected
2
.
r
hGjW
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
M
h
\
h
hA
]
r
hjX
>
>
>
#
fudge
>
>
>
fudge
.
test
.
.
.
def
test
(
)
:
.
.
.
my_fake
=
fudge
.
Fake
(
)
.
expects
(
'
some_method
'
)
.
times_called
(
2
)
.
.
.
my_fake
.
some_method
(
)
.
.
.
>
>
>
test
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
AssertionError
:
fake
:
my_fake
.
some_method
(
)
was
called
1
time
(
s
)
.
Expected
2
.
r
r
}
r
(
hFU
hGj
ubaubeubhC
)
r
}
r
(
hFU
hGhDhHhKhMhNhO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
h2ahY
]
r
h
auh
[
M
h
\
h
hA
]
r
(
h
^
)
r
}
r
(
hFX
Mock
chained
methodsr
hGj
hHhKhMhbhO
}
r
(
hQ
]
r
hS
]
r
!
hU
]
r
"
hW
]
r
#
hY
]
r
uh
[
M
h
\
h
hA
]
r
%
hjX
Mock
chained
methodsr
&
r
'
}
r
(
(
hFj
hGj
ubaubj
)
r
)
}
r
*
(
hFX
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
Mock
(
)
>
>
>
method3
=
my_mock
.
method1
.
return_value
.
method2
.
return_value
.
method3
>
>
>
method3
.
return_value
=
'
some
value
'
>
>
>
assertEqual
(
'
some
value
'
my_mock
.
method1
(
)
.
method2
(
)
.
method3
(
1
2
)
)
>
>
>
method3
.
assert_called_once_with
(
1
2
)
r
+
hGj
hHhKhMj
hO
}
r
(
U
testnodetyper
-
X
doctestr
.
hvhwhW
]
r
/
hU
]
r0
hQ
]
r1
hS
]
r2
hY
]
r3
U
groupsr4
]
r5
h
ah
}
r6
uh
[
M
h
\
h
hA
]
r7
hjX
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
Mock
(
)
>
>
>
method3
=
my_mock
.
method1
.
return_value
.
method2
.
return_value
.
method3
>
>
>
method3
.
return_value
=
'
some
value
'
>
>
>
assertEqual
(
'
some
value
'
my_mock
.
method1
(
)
.
method2
(
)
.
method3
(
1
2
)
)
>
>
>
method3
.
assert_called_once_with
(
1
2
)
r8
r9
}
r
:
(
hFU
hGj
)
ubaubj
)
r
;
}
r
<
(
hFXH
#
Flexmock
#
(
intermediate
method
calls
are
automatically
assigned
to
temporary
fake
objects
#
and
can
be
called
with
any
arguments
)
flexmock
(
some_object
)
.
should_receive
(
'
method1
.
method2
.
method3
'
)
.
with_args
(
arg1
arg2
)
.
and_return
(
'
some
value
'
)
assertEqual
(
'
some_value
'
some_object
.
method1
(
)
.
method2
(
)
.
method3
(
arg1
arg2
)
)
r
=
hGj
hHhKhMj
hO
}
r
>
(
hvhwhW
]
r
?
hU
]
r
hQ
]
rA
hS
]
rB
hY
]
rC
uh
[
M
h
\
h
hA
]
rD
hjXH
#
Flexmock
#
(
intermediate
method
calls
are
automatically
assigned
to
temporary
fake
objects
#
and
can
be
called
with
any
arguments
)
flexmock
(
some_object
)
.
should_receive
(
'
method1
.
method2
.
method3
'
)
.
with_args
(
arg1
arg2
)
.
and_return
(
'
some
value
'
)
assertEqual
(
'
some_value
'
some_object
.
method1
(
)
.
method2
(
)
.
method3
(
arg1
arg2
)
)
rE
rF
}
rG
(
hFU
hGj
;
ubaubj
)
rH
}
rI
(
hFX
]
#
Mox
mock
=
mox
.
MockObject
(
some_object
)
mock2
=
mox
.
MockAnything
(
)
mock3
=
mox
.
MockAnything
(
)
mock
.
method1
(
)
.
AndReturn
(
mock1
)
mock2
.
method2
(
)
.
AndReturn
(
mock2
)
mock3
.
method3
(
arg1
arg2
)
.
AndReturn
(
'
some_value
'
)
self
.
mox
.
ReplayAll
(
)
assertEqual
(
"
some_value
"
some_object
.
method1
(
)
.
method2
(
)
.
method3
(
arg1
arg2
)
)
self
.
mox
.
VerifyAll
(
)
#
Mocker
#
(
TODO
)
rJ
hGj
hHhKhMj
hO
}
rK
(
hvhwhW
]
rL
hU
]
rM
hQ
]
rN
hS
]
rO
hY
]
rP
uh
[
M
h
\
h
hA
]
rQ
hjX
]
#
Mox
mock
=
mox
.
MockObject
(
some_object
)
mock2
=
mox
.
MockAnything
(
)
mock3
=
mox
.
MockAnything
(
)
mock
.
method1
(
)
.
AndReturn
(
mock1
)
mock2
.
method2
(
)
.
AndReturn
(
mock2
)
mock3
.
method3
(
arg1
arg2
)
.
AndReturn
(
'
some_value
'
)
self
.
mox
.
ReplayAll
(
)
assertEqual
(
"
some_value
"
some_object
.
method1
(
)
.
method2
(
)
.
method3
(
arg1
arg2
)
)
self
.
mox
.
VerifyAll
(
)
#
Mocker
#
(
TODO
)
rR
rS
}
rT
(
hFU
hGjH
ubaubj
)
rU
}
rV
(
hFX
>
>
>
#
Dingus
>
>
>
my_dingus
=
dingus
.
Dingus
(
)
>
>
>
method3
=
my_dingus
.
method1
.
return_value
.
method2
.
return_value
.
method3
>
>
>
method3
.
return_value
=
'
some
value
'
>
>
>
assertEqual
(
'
some
value
'
my_dingus
.
method1
(
)
.
method2
(
)
.
method3
(
1
2
)
)
>
>
>
assert
method3
.
calls
(
'
(
)
'
1
2
)
.
once
(
)
rW
hGj
hHhKhMj
hO
}
rX
(
hvhwhW
]
rY
hU
]
rZ
hQ
]
r
[
hS
]
r
\
hY
]
r
]
uh
[
M
h
\
h
hA
]
r
^
hjX
>
>
>
#
Dingus
>
>
>
my_dingus
=
dingus
.
Dingus
(
)
>
>
>
method3
=
my_dingus
.
method1
.
return_value
.
method2
.
return_value
.
method3
>
>
>
method3
.
return_value
=
'
some
value
'
>
>
>
assertEqual
(
'
some
value
'
my_dingus
.
method1
(
)
.
method2
(
)
.
method3
(
1
2
)
)
>
>
>
assert
method3
.
calls
(
'
(
)
'
1
2
)
.
once
(
)
r_
r
}
ra
(
hFU
hGjU
ubaubj
)
rb
}
rc
(
hFX
{
>
>
>
#
fudge
>
>
>
fudge
.
test
.
.
.
def
test
(
)
:
.
.
.
my_fake
=
fudge
.
Fake
(
)
.
.
.
(
my_fake
.
.
.
.
expects
(
'
method1
'
)
.
.
.
.
returns_fake
(
)
.
.
.
.
expects
(
'
method2
'
)
.
.
.
.
returns_fake
(
)
.
.
.
.
expects
(
'
method3
'
)
.
.
.
.
with_args
(
1
2
)
.
.
.
.
returns
(
'
some
value
'
)
)
.
.
.
assertEqual
(
'
some
value
'
my_fake
.
method1
(
)
.
method2
(
)
.
method3
(
1
2
)
)
.
.
.
>
>
>
test
(
)
rd
hGj
hHhKhMj
hO
}
re
(
hvhwhW
]
rf
hU
]
rg
hQ
]
rh
hS
]
ri
hY
]
rj
uh
[
M
h
\
h
hA
]
rk
hjX
{
>
>
>
#
fudge
>
>
>
fudge
.
test
.
.
.
def
test
(
)
:
.
.
.
my_fake
=
fudge
.
Fake
(
)
.
.
.
(
my_fake
.
.
.
.
expects
(
'
method1
'
)
.
.
.
.
returns_fake
(
)
.
.
.
.
expects
(
'
method2
'
)
.
.
.
.
returns_fake
(
)
.
.
.
.
expects
(
'
method3
'
)
.
.
.
.
with_args
(
1
2
)
.
.
.
.
returns
(
'
some
value
'
)
)
.
.
.
assertEqual
(
'
some
value
'
my_fake
.
method1
(
)
.
method2
(
)
.
method3
(
1
2
)
)
.
.
.
>
>
>
test
(
)
rl
rm
}
rn
(
hFU
hGjb
ubaubeubhC
)
ro
}
rp
(
hFU
hGhDhHhKhMhNhO
}
rq
(
hQ
]
rr
hS
]
rs
hU
]
rt
hW
]
ru
h
/
ahY
]
rv
h
auh
[
M
h
\
h
hA
]
rw
(
h
^
)
rx
}
ry
(
hFX
Mocking
a
context
managerrz
hGjo
hHhKhMhbhO
}
r
{
(
hQ
]
r
|
hS
]
r
}
hU
]
r
~
hW
]
r
hY
]
r
uh
[
M
h
\
h
hA
]
r
hjX
Mocking
a
context
managerr
r
}
r
(
hFjz
hGjx
ubaubh
)
r
}
r
(
hFX2
Examples
for
mock
Dingus
and
fudge
only
(
so
far
)
:
r
hGjo
hHhKhMh
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uh
[
M
h
\
h
hA
]
r
hjX2
Examples
for
mock
Dingus
and
fudge
only
(
so
far
)
:
r
r
}
r
(
hFj
hGj
ubaubj
)
r
}
r
(
hFX
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
MagicMock
(
)
>
>
>
with
my_mock
:
.
.
.
pass
.
.
.
>
>
>
my_mock
.
__enter__
.
assert_called_with
(
)
>
>
>
my_mock
.
__exit__
.
assert_called_with
(
None
None
None
)
r
hGjo
hHhKhMj
hO
}
r
(
U
testnodetyper
X
doctestr
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
U
groupsr
]
r
h
ah
}
r
uh
[
M
h
\
h
hA
]
r
hjX
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
MagicMock
(
)
>
>
>
with
my_mock
:
.
.
.
pass
.
.
.
>
>
>
my_mock
.
__enter__
.
assert_called_with
(
)
>
>
>
my_mock
.
__exit__
.
assert_called_with
(
None
None
None
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFX
>
>
>
#
Dingus
(
nothing
special
here
;
all
dinguses
are
"
magic
mocks
"
)
>
>
>
my_dingus
=
dingus
.
Dingus
(
)
>
>
>
with
my_dingus
:
.
.
.
pass
.
.
.
>
>
>
assert
my_dingus
.
__enter__
.
calls
(
)
>
>
>
assert
my_dingus
.
__exit__
.
calls
(
'
(
)
'
None
None
None
)
r
hGjo
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
M
"
h
\
h
hA
]
r
hjX
>
>
>
#
Dingus
(
nothing
special
here
;
all
dinguses
are
"
magic
mocks
"
)
>
>
>
my_dingus
=
dingus
.
Dingus
(
)
>
>
>
with
my_dingus
:
.
.
.
pass
.
.
.
>
>
>
assert
my_dingus
.
__enter__
.
calls
(
)
>
>
>
assert
my_dingus
.
__exit__
.
calls
(
'
(
)
'
None
None
None
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFXt
>
>
>
#
fudge
>
>
>
my_fake
=
fudge
.
Fake
(
)
.
provides
(
'
__enter__
'
)
.
provides
(
'
__exit__
'
)
>
>
>
with
my_fake
:
.
.
.
pass
.
.
.
r
hGjo
hHhKhMj
hO
}
r
(
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
uh
[
M
h
\
h
hA
]
r
hjXt
>
>
>
#
fudge
>
>
>
my_fake
=
fudge
.
Fake
(
)
.
provides
(
'
__enter__
'
)
.
provides
(
'
__exit__
'
)
>
>
>
with
my_fake
:
.
.
.
pass
.
.
.
r
r
}
r
(
hFU
hGj
ubaubeubhC
)
r
}
r
(
hFU
hGhDhHhKhMhNhO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
h6ahY
]
r
h
auh
[
M4
h
\
h
hA
]
r
(
h
^
)
r
}
r
(
hFX2
Mocking
the
builtin
open
used
as
a
context
managerr
hGj
hHhKhMhbhO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uh
[
M4
h
\
h
hA
]
r
hjX2
Mocking
the
builtin
open
used
as
a
context
managerr
r
}
r
(
hFj
hGj
ubaubh
)
r
}
r
(
hFX
Example
for
mock
only
(
so
far
)
:
r
hGj
hHhKhMh
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uh
[
M6
h
\
h
hA
]
r
hjX
Example
for
mock
only
(
so
far
)
:
r
r
}
r
(
hFj
hGj
ubaubj
)
r
}
r
(
hFXH
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
MagicMock
(
)
>
>
>
with
mock
.
patch
(
'
__builtin__
.
open
'
my_mock
)
:
.
.
.
manager
=
my_mock
.
return_value
.
__enter__
.
return_value
.
.
.
manager
.
read
.
return_value
=
'
some
data
'
.
.
.
with
open
(
'
foo
'
)
as
h
:
.
.
.
data
=
h
.
read
(
)
.
.
.
>
>
>
data
'
some
data
'
>
>
>
my_mock
.
assert_called_once_with
(
'
foo
'
)
r
hGj
hHhKhMj
hO
}
r
(
U
testnodetyper
X
doctestr
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
U
groupsr
]
r
h
ah
}
r
uh
[
M8
h
\
h
hA
]
r
hjXH
>
>
>
#
mock
>
>
>
my_mock
=
mock
.
MagicMock
(
)
>
>
>
with
mock
.
patch
(
'
__builtin__
.
open
'
my_mock
)
:
.
.
.
manager
=
my_mock
.
return_value
.
__enter__
.
return_value
.
.
.
manager
.
read
.
return_value
=
'
some
data
'
.
.
.
with
open
(
'
foo
'
)
as
h
:
.
.
.
data
=
h
.
read
(
)
.
.
.
>
>
>
data
'
some
data
'
>
>
>
my_mock
.
assert_called_once_with
(
'
foo
'
)
r
r
}
r
(
hFU
hGj
ubaubh
)
r
}
r
(
hFX
*
or
*
:
r
hGj
hHhKhMh
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uh
[
MF
h
\
h
hA
]
r
(
ji
)
r
}
r
(
hFX
*
or
*
r
hO
}
r
(
hQ
]
r
hS
]
r
hU
]
r
hW
]
r
hY
]
r
uhGj
hA
]
r
hjX
orr
r
}
r
(
hFU
hGj
ubahMjw
ubhjX
:
r
}
r
(
hFX
:
hGj
ubeubj
)
r
}
r
(
hFXc
>
>
>
#
mock
>
>
>
with
mock
.
patch
(
'
__builtin__
.
open
'
)
as
my_mock
:
.
.
.
my_mock
.
return_value
.
__enter__
=
lambda
s
:
s
.
.
.
my_mock
.
return_value
.
__exit__
=
mock
.
Mock
(
)
.
.
.
my_mock
.
return_value
.
read
.
return_value
=
'
some
data
'
.
.
.
with
open
(
'
foo
'
)
as
h
:
.
.
.
data
=
h
.
read
(
)
.
.
.
>
>
>
data
'
some
data
'
>
>
>
my_mock
.
assert_called_once_with
(
'
foo
'
)
r
hGj
hHhKhMj
hO
}
r
(
U
testnodetyper
X
doctestr
hvhwhW
]
r
hU
]
r
hQ
]
r
hS
]
r
hY
]
r
U
groupsr
]
r
h
ah
}
r
uh
[
MH
h
\
h
hA
]
r
hjXc
>
>
>
#
mock
>
>
>
with
mock
.
patch
(
'
__builtin__
.
open
'
)
as
my_mock
:
.
.
.
my_mock
.
return_value
.
__enter__
=
lambda
s
:
s
.
.
.
my_mock
.
return_value
.
__exit__
=
mock
.
Mock
(
)
.
.
.
my_mock
.
return_value
.
read
.
return_value
=
'
some
data
'
.
.
.
with
open
(
'
foo
'
)
as
h
:
.
.
.
data
=
h
.
read
(
)
.
.
.
>
>
>
data
'
some
data
'
>
>
>
my_mock
.
assert_called_once_with
(
'
foo
'
)
r
r
}
r
(
hFU
hGj
ubaubj
)
r
}
r
(
hFXL
>
>
>
#
Dingus
>
>
>
my_dingus
=
dingus
.
Dingus
(
)
>
>
>
with
dingus
.
patch
(
'
__builtin__
.
open
'
my_dingus
)
:
.
.
.
file_
=
open
.
return_value
.
__enter__
.
return_value
.
.
.
file_
.
read
.
return_value
=
'
some
data
'
.
.
.
with
open
(
'
foo
'
)
as
h
:
.
.
.
data
=
f
.
read
(
)
.
.
.
>
>
>
data
'
some
data
'
>
>
>
assert
my_dingus
.
calls
(
'
(
)
'
'
foo
'
)
.
once
(
)
r
hGj
hHhKhMj
hO
}
r
!
(
hvhwhW
]
r
"
hU
]
r
#
hQ
]
r
hS
]
r
%
hY
]
r
&
uh
[
MX
h
\
h
hA
]
r
'
hjXL
>
>
>
#
Dingus
>
>
>
my_dingus
=
dingus
.
Dingus
(
)
>
>
>
with
dingus
.
patch
(
'
__builtin__
.
open
'
my_dingus
)
:
.
.
.
file_
=
open
.
return_value
.
__enter__
.
return_value
.
.
.
file_
.
read
.
return_value
=
'
some
data
'
.
.
.
with
open
(
'
foo
'
)
as
h
:
.
.
.
data
=
f
.
read
(
)
.
.
.
>
>
>
data
'
some
data
'
>
>
>
assert
my_dingus
.
calls
(
'
(
)
'
'
foo
'
)
.
once
(
)
r
(
r
)
}
r
*
(
hFU
hGj
ubaubj
)
r
+
}
r
(
hFX
>
>
>
#
fudge
>
>
>
from
contextlib
import
contextmanager
>
>
>
from
StringIO
import
StringIO
>
>
>
contextmanager
.
.
.
def
fake_file
(
filename
)
:
.
.
.
yield
StringIO
(
'
sekrets
'
)
.
.
.
>
>
>
with
fudge
.
patch
(
'
__builtin__
.
open
'
)
as
fake_open
:
.
.
.
fake_open
.
is_callable
(
)
.
calls
(
fake_file
)
.
.
.
with
open
(
'
/
etc
/
password
'
)
as
f
:
.
.
.
data
=
f
.
read
(
)
.
.
.
fake
:
__builtin__
.
open
>
>
>
data
'
sekrets
'
r
-
hGj
hHhKhMj
hO
}
r
.
(
hvhwhW
]
r
/
hU
]
r0
hQ
]
r1
hS
]
r2
hY
]
r3
uh
[
Mf
h
\
h
hA
]
r4
hjX
>
>
>
#
fudge
>
>
>
from
contextlib
import
contextmanager
>
>
>
from
StringIO
import
StringIO
>
>
>
contextmanager
.
.
.
def
fake_file
(
filename
)
:
.
.
.
yield
StringIO
(
'
sekrets
'
)
.
.
.
>
>
>
with
fudge
.
patch
(
'
__builtin__
.
open
'
)
as
fake_open
:
.
.
.
fake_open
.
is_callable
(
)
.
calls
(
fake_file
)
.
.
.
with
open
(
'
/
etc
/
password
'
)
as
f
:
.
.
.
data
=
f
.
read
(
)
.
.
.
fake
:
__builtin__
.
open
>
>
>
data
'
sekrets
'
r5
r6
}
r7
(
hFU
hGj
+
ubaubeubeubahFU
U
transformerr8
NU
footnote_refsr9
}
r
:
U
refnamesr
;
}
r
<
U
symbol_footnotesr
=
]
r
>
U
autofootnote_refsr
?
]
r
U
symbol_footnote_refsrA
]
rB
U
citationsrC
]
rD
h
\
h
U
current_linerE
NU
transform_messagesrF
]
rG
U
reporterrH
NU
id_startrI
K
U
autofootnotesrJ
]
rK
U
citation_refsrL
}
rM
U
indirect_targetsrN
]
rO
U
settingsrP
(
cdocutils
.
frontend
Values
rQ
orR
}
rS
(
U
footnote_backlinksrT
K
U
record_dependenciesrU
NU
rfc_base_urlrV
U
http
:
/
/
tools
.
ietf
.
org
/
html
/
rW
U
tracebackrX
U
pep_referencesrY
NU
strip_commentsrZ
NU
toc_backlinksr
[
U
entryr
\
U
language_coder
]
U
enr
^
U
datestampr_
NU
report_levelr
K
U
_destinationra
NU
halt_levelrb
K
U
strip_classesrc
NhbNU
error_encoding_error_handlerrd
U
backslashreplacere
U
debugrf
NU
embed_stylesheetrg
U
output_encoding_error_handlerrh
U
strictri
U
sectnum_xformrj
K
U
dump_transformsrk
NU
docinfo_xformrl
K
U
warning_streamrm
NU
pep_file_url_templatern
U
pep
-
%
04dro
U
exit_status_levelrp
K
U
configrq
NU
strict_visitorrr
NU
cloak_email_addressesrs
U
trim_footnote_reference_spacert
U
envru
NU
dump_pseudo_xmlrv
NU
expose_internalsrw
NU
sectsubtitle_xformrx
U
source_linkry
NU
rfc_referencesrz
NU
output_encodingr
{
U
utf
-
8r
|
U
source_urlr
}
NU
input_encodingr
~
U
utf
-
8
-
sigr
U
_disable_configr
NU
id_prefixr
U
U
tab_widthr
K
U
error_encodingr
U
mac
-
romanr
U
_sourcer
U
/
compile
/
mock
/
docs
/
compare
.
txtr
U
gettext_compactr
U
generatorr
NU
dump_internalsr
NU
pep_base_urlr
U
http
:
/
/
www
.
python
.
org
/
dev
/
peps
/
r
U
syntax_highlightr
U
shortr
U
input_encoding_error_handlerr
ji
U
auto_id_prefixr
U
idr
U
doctitle_xformr
U
strip_elements_with_classesr
NU
_config_filesr
]
r
U
file_insertion_enabledr
K
U
raw_enabledr
K
U
dump_settingsr
NubU
symbol_footnote_startr
K
U
idsr
}
r
(
h
>
j
h
j
h
?
j
h9j
h
-
j
h
(
h
h
/
jo
h
*
j
h0j
h
hDh3j
h
:
j
h4j
h5j
h1j
h7j
h
+
jj
h
<
j
{
h
)
jW
h8j2
h
.
j
h
;
j_
h2j
h
=
jP
h6j
uU
substitution_namesr
}
r
hMh
\
hO
}
r
(
hQ
]
r
hW
]
r
hU
]
r
U
sourcer
hKhS
]
r
hY
]
r
uU
footnotesr
]
r
U
refidsr
}
r
ub
.
