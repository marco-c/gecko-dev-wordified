cdocutils
.
nodes
document
q
)
q
}
q
(
U
nametypesq
}
q
(
X
#
mocksignature
with
callable
objectsq
NX
example
useq
NX
mocksignature
with
classesq
NX
inspectq
K
X
mocksignature
apiq
NX
basic
useq
NX
mocksignatureq
NX
mock
.
mocksignatureq
K
X
mocking
methods
and
selfq
NX
keyword
argumentsq
NX
mocksignature
argument
to
patchq
NuU
substitution_defsq
}
q
U
parse_messagesq
]
q
U
current_sourceq
NU
decorationq
NU
autofootnote_startq
K
U
nameidsq
}
q
(
h
U
#
mocksignature
-
with
-
callable
-
objectsq
h
U
example
-
useq
h
U
mocksignature
-
with
-
classesq
h
U
inspectq
h
U
mocksignature
-
apiq
h
U
basic
-
useq
h
U
mocksignatureq
h
h
h
U
mocking
-
methods
-
and
-
selfq
!
h
U
keyword
-
argumentsq
"
h
U
mocksignature
-
argument
-
to
-
patchq
#
uU
childrenq
]
q
%
cdocutils
.
nodes
section
q
&
)
q
'
}
q
(
(
U
rawsourceq
)
U
U
parentq
*
h
U
sourceq
+
cdocutils
.
nodes
reprunicode
q
X
/
compile
/
mock
/
docs
/
mocksignature
.
txtq
-
q
.
}
q
/
bU
tagnameq0U
sectionq1U
attributesq2
}
q3
(
U
dupnamesq4
]
U
classesq5
]
U
backrefsq6
]
U
idsq7
]
q8h
aU
namesq9
]
q
:
h
auU
lineq
;
K
U
documentq
<
h
h
]
q
=
(
cdocutils
.
nodes
title
q
>
)
q
?
}
q
(
h
)
X
mocksignatureqAh
*
h
'
h
+
h
.
h0U
titleqBh2
}
qC
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
qDcdocutils
.
nodes
Text
qEX
mocksignatureqF
qG
}
qH
(
h
)
hAh
*
h
?
ubaubcdocutils
.
nodes
note
qI
)
qJ
}
qK
(
h
)
X
:
ref
:
auto
-
speccing
added
in
mock
0
.
8
is
a
more
advanced
version
of
mocksignature
and
can
be
used
for
many
of
the
same
use
cases
.
h
*
h
'
h
+
h
.
h0U
noteqLh2
}
qM
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
Nh
<
h
h
]
qNcdocutils
.
nodes
paragraph
qO
)
qP
}
qQ
(
h
)
X
:
ref
:
auto
-
speccing
added
in
mock
0
.
8
is
a
more
advanced
version
of
mocksignature
and
can
be
used
for
many
of
the
same
use
cases
.
h
*
hJh
+
h
.
h0U
paragraphqRh2
}
qS
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
]
qT
(
csphinx
.
addnodes
pending_xref
qU
)
qV
}
qW
(
h
)
X
:
ref
:
auto
-
speccing
qXh
*
hPh
+
h
.
h0U
pending_xrefqYh2
}
qZ
(
U
reftypeX
refU
refwarnq
[
U
reftargetq
\
X
auto
-
speccingU
refdomainX
stdq
]
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
U
refdocq
^
U
mocksignatureq_uh
;
K
h
]
q
cdocutils
.
nodes
emphasis
qa
)
qb
}
qc
(
h
)
hXh2
}
qd
(
h4
]
h5
]
qe
(
U
xrefqfh
]
X
std
-
refqgeh6
]
h7
]
h9
]
uh
*
hVh
]
qhhEX
auto
-
speccingqi
qj
}
qk
(
h
)
U
h
*
hbubah0U
emphasisqlubaubhEX3
added
in
mock
0
.
8
is
a
more
advanced
version
of
qm
qn
}
qo
(
h
)
X3
added
in
mock
0
.
8
is
a
more
advanced
version
of
h
*
hPubcdocutils
.
nodes
title_reference
qp
)
qq
}
qr
(
h
)
X
mocksignature
h2
}
qs
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
hPh
]
qthEX
mocksignaturequ
qv
}
qw
(
h
)
U
h
*
hqubah0U
title_referenceqxubhEX0
and
can
be
used
for
many
of
the
same
use
cases
.
qy
qz
}
q
{
(
h
)
X0
and
can
be
used
for
many
of
the
same
use
cases
.
h
*
hPubeubaubhO
)
q
|
}
q
}
(
h
)
XJ
A
problem
with
using
mock
objects
to
replace
real
objects
in
your
tests
is
that
:
class
:
Mock
can
be
*
too
*
flexible
.
Your
code
can
treat
the
mock
objects
in
any
way
and
you
have
to
manually
check
that
they
were
called
correctly
.
If
your
code
calls
functions
or
methods
with
the
wrong
number
of
arguments
then
mocks
don
'
t
complain
.
h
*
h
'
h
+
h
.
h0hRh2
}
q
~
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
q
(
hEXP
A
problem
with
using
mock
objects
to
replace
real
objects
in
your
tests
is
that
q
q
}
q
(
h
)
XP
A
problem
with
using
mock
objects
to
replace
real
objects
in
your
tests
is
that
h
*
h
|
ubhU
)
q
}
q
(
h
)
X
:
class
:
Mock
q
h
*
h
|
h
+
h
.
h0hYh2
}
q
(
U
reftypeX
classh
[
h
\
X
MockU
refdomainX
pyq
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_U
py
:
classq
NU
py
:
moduleq
X
mockq
uh
;
K
h
]
q
cdocutils
.
nodes
literal
q
)
q
}
q
(
h
)
h
h2
}
q
(
h4
]
h5
]
q
(
hfh
X
py
-
classq
eh6
]
h7
]
h9
]
uh
*
h
h
]
q
hEX
Mockq
q
}
q
(
h
)
U
h
*
h
ubah0U
literalq
ubaubhEX
can
be
q
q
}
q
(
h
)
X
can
be
h
*
h
|
ubha
)
q
}
q
(
h
)
X
*
too
*
h2
}
q
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
h
|
h
]
q
hEX
tooq
q
}
q
(
h
)
U
h
*
h
ubah0hlubhEX
flexible
.
Your
code
can
treat
the
mock
objects
in
any
way
and
you
have
to
manually
check
that
they
were
called
correctly
.
If
your
code
calls
functions
or
methods
with
the
wrong
number
of
arguments
then
mocks
don
'
t
complain
.
q
q
}
q
(
h
)
X
flexible
.
Your
code
can
treat
the
mock
objects
in
any
way
and
you
have
to
manually
check
that
they
were
called
correctly
.
If
your
code
calls
functions
or
methods
with
the
wrong
number
of
arguments
then
mocks
don
'
t
complain
.
h
*
h
|
ubeubhO
)
q
}
q
(
h
)
Xh
The
solution
to
this
is
mocksignature
which
creates
functions
with
the
same
signature
as
the
original
but
delegating
to
a
mock
.
You
can
interrogate
the
mock
in
the
usual
way
to
check
it
has
been
called
with
the
*
right
*
arguments
but
if
it
is
called
with
the
wrong
number
of
arguments
it
will
raise
a
TypeError
in
the
same
way
your
production
code
would
.
h
*
h
'
h
+
h
.
h0hRh2
}
q
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
q
(
hEX
The
solution
to
this
is
q
q
}
q
(
h
)
X
The
solution
to
this
is
h
*
h
ubhp
)
q
}
q
(
h
)
X
mocksignature
h2
}
q
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
h
h
]
q
hEX
mocksignatureq
q
}
q
(
h
)
U
h
*
h
ubah0hxubhEX
which
creates
functions
with
the
same
signature
as
the
original
but
delegating
to
a
mock
.
You
can
interrogate
the
mock
in
the
usual
way
to
check
it
has
been
called
with
the
q
q
}
q
(
h
)
X
which
creates
functions
with
the
same
signature
as
the
original
but
delegating
to
a
mock
.
You
can
interrogate
the
mock
in
the
usual
way
to
check
it
has
been
called
with
the
h
*
h
ubha
)
q
}
q
(
h
)
X
*
right
*
h2
}
q
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
h
h
]
q
hEX
rightq
q
}
q
(
h
)
U
h
*
h
ubah0hlubhEXS
arguments
but
if
it
is
called
with
the
wrong
number
of
arguments
it
will
raise
a
q
q
}
q
(
h
)
XS
arguments
but
if
it
is
called
with
the
wrong
number
of
arguments
it
will
raise
a
h
*
h
ubhp
)
q
}
q
(
h
)
X
TypeError
h2
}
q
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
h
h
]
q
hEX
TypeErrorq
q
}
q
(
h
)
U
h
*
h
ubah0hxubhEX
in
the
same
way
your
production
code
would
.
q
q
}
q
(
h
)
X
in
the
same
way
your
production
code
would
.
h
*
h
ubeubhO
)
q
}
q
(
h
)
X
Another
advantage
is
that
your
mocked
objects
are
real
functions
which
can
be
useful
when
your
code
uses
inspect
<
http
:
/
/
docs
.
python
.
org
/
library
/
inspect
.
html
>
_
or
depends
on
functions
being
function
objects
.
h
*
h
'
h
+
h
.
h0hRh2
}
q
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
q
(
hEXj
Another
advantage
is
that
your
mocked
objects
are
real
functions
which
can
be
useful
when
your
code
uses
q
q
}
q
(
h
)
Xj
Another
advantage
is
that
your
mocked
objects
are
real
functions
which
can
be
useful
when
your
code
uses
h
*
h
ubcdocutils
.
nodes
reference
q
)
q
}
q
(
h
)
X8
inspect
<
http
:
/
/
docs
.
python
.
org
/
library
/
inspect
.
html
>
_h2
}
q
(
U
nameh
U
refuriq
X
+
http
:
/
/
docs
.
python
.
org
/
library
/
inspect
.
htmlq
h7
]
h6
]
h4
]
h5
]
h9
]
uh
*
h
h
]
q
hEX
inspectq
q
}
q
(
h
)
U
h
*
h
ubah0U
referenceq
ubcdocutils
.
nodes
target
q
)
q
}
q
(
h
)
X
.
<
http
:
/
/
docs
.
python
.
org
/
library
/
inspect
.
html
>
h2
}
q
(
U
refurih
h7
]
q
h
ah6
]
h4
]
h5
]
h9
]
q
h
auh
*
h
h
]
h0U
targetq
ubhEX0
or
depends
on
functions
being
function
objects
.
q
q
}
q
(
h
)
X0
or
depends
on
functions
being
function
objects
.
h
*
h
ubeubcsphinx
.
addnodes
index
q
)
q
}
q
(
h
)
U
h
*
h
'
h
+
h
.
h0U
indexq
h2
}
q
(
h7
]
h6
]
h4
]
h5
]
h9
]
U
entries
]
q
(
U
singleq
X
mocksignature
(
)
(
in
module
mock
)
h
U
tq
auh
;
Nh
<
h
h
]
ubcsphinx
.
addnodes
desc
q
)
q
}
q
(
h
)
U
h
*
h
'
h
+
h
.
h0U
descq
h2
}
q
(
U
noindexq
U
domainq
X
pyh7
]
h6
]
h4
]
h5
]
h9
]
U
objtypeq
X
functionq
U
desctypeq
h
uh
;
Nh
<
h
h
]
q
(
csphinx
.
addnodes
desc_signature
q
)
q
}
q
(
h
)
X
/
mocksignature
(
func
mock
=
None
skipfirst
=
False
)
h
*
h
h
+
h
.
h0U
desc_signatureq
h2
}
q
(
h7
]
q
h
aU
moduleq
h
h6
]
h4
]
h5
]
h9
]
q
h
aU
fullnamer
X
mocksignaturer
U
classr
U
U
firstr
uh
;
K
/
h
<
h
h
]
r
(
csphinx
.
addnodes
desc_name
r
)
r
}
r
(
h
)
j
h
*
h
h
+
h
.
h0U
desc_namer
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
/
h
<
h
h
]
r
hEX
mocksignaturer
r
}
r
(
h
)
U
h
*
j
ubaubcsphinx
.
addnodes
desc_parameterlist
r
)
r
}
r
(
h
)
U
h
*
h
h
+
h
.
h0U
desc_parameterlistr
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
/
h
<
h
h
]
r
(
csphinx
.
addnodes
desc_parameter
r
)
r
}
r
(
h
)
X
funch2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
funcr
r
}
r
(
h
)
U
h
*
j
ubah0U
desc_parameterr
ubj
)
r
}
r
(
h
)
X
mock
=
Noneh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
mock
=
Noner
!
r
"
}
r
#
(
h
)
U
h
*
j
ubah0j
ubj
)
r
}
r
%
(
h
)
X
skipfirst
=
Falseh2
}
r
&
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
'
hEX
skipfirst
=
Falser
(
r
)
}
r
*
(
h
)
U
h
*
j
ubah0j
ubeubeubcsphinx
.
addnodes
desc_content
r
+
)
r
}
r
-
(
h
)
U
h
*
h
h
+
h
.
h0U
desc_contentr
.
h2
}
r
/
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
/
h
<
h
h
]
r0
(
hO
)
r1
}
r2
(
h
)
X
Create
a
new
function
with
the
same
signature
as
func
that
delegates
to
mock
.
If
skipfirst
is
True
the
first
argument
is
skipped
useful
for
methods
where
self
needs
to
be
omitted
from
the
new
function
.
h
*
j
h
+
h
.
h0hRh2
}
r3
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
r4
(
hEX1
Create
a
new
function
with
the
same
signature
as
r5
r6
}
r7
(
h
)
X1
Create
a
new
function
with
the
same
signature
as
h
*
j1
ubhp
)
r8
}
r9
(
h
)
X
func
h2
}
r
:
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j1
h
]
r
;
hEX
funcr
<
r
=
}
r
>
(
h
)
U
h
*
j8
ubah0hxubhEX
that
delegates
to
r
?
r
}
rA
(
h
)
X
that
delegates
to
h
*
j1
ubhp
)
rB
}
rC
(
h
)
X
mock
h2
}
rD
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j1
h
]
rE
hEX
mockrF
rG
}
rH
(
h
)
U
h
*
jB
ubah0hxubhEX
.
If
rI
rJ
}
rK
(
h
)
X
.
If
h
*
j1
ubhp
)
rL
}
rM
(
h
)
X
skipfirst
h2
}
rN
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j1
h
]
rO
hEX
skipfirstrP
rQ
}
rR
(
h
)
U
h
*
jL
ubah0hxubhEXA
is
True
the
first
argument
is
skipped
useful
for
methods
where
rS
rT
}
rU
(
h
)
XA
is
True
the
first
argument
is
skipped
useful
for
methods
where
h
*
j1
ubhp
)
rV
}
rW
(
h
)
X
self
h2
}
rX
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j1
h
]
rY
hEX
selfrZ
r
[
}
r
\
(
h
)
U
h
*
jV
ubah0hxubhEX
+
needs
to
be
omitted
from
the
new
function
.
r
]
r
^
}
r_
(
h
)
X
+
needs
to
be
omitted
from
the
new
function
.
h
*
j1
ubeubhO
)
r
}
ra
(
h
)
X
?
If
you
don
'
t
pass
in
a
mock
then
one
will
be
created
for
you
.
h
*
j
h
+
h
.
h0hRh2
}
rb
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
"
h
<
h
h
]
rc
(
hEX
If
you
don
'
t
pass
in
a
rd
re
}
rf
(
h
)
X
If
you
don
'
t
pass
in
a
h
*
j
ubhp
)
rg
}
rh
(
h
)
X
mock
h2
}
ri
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
rj
hEX
mockrk
rl
}
rm
(
h
)
U
h
*
jg
ubah0hxubhEX
"
then
one
will
be
created
for
you
.
rn
ro
}
rp
(
h
)
X
"
then
one
will
be
created
for
you
.
h
*
j
ubeubhO
)
rq
}
rr
(
h
)
Xk
Functions
returned
by
mocksignature
have
many
of
the
same
attributes
and
assert
methods
as
a
mock
object
.
h
*
j
h
+
h
.
h0hRh2
}
rs
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
rt
(
hEX
Functions
returned
by
ru
rv
}
rw
(
h
)
X
Functions
returned
by
h
*
jq
ubhp
)
rx
}
ry
(
h
)
X
mocksignature
h2
}
rz
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
jq
h
]
r
{
hEX
mocksignaturer
|
r
}
}
r
~
(
h
)
U
h
*
jx
ubah0hxubhEXF
have
many
of
the
same
attributes
and
assert
methods
as
a
mock
object
.
r
r
}
r
(
h
)
XF
have
many
of
the
same
attributes
and
assert
methods
as
a
mock
object
.
h
*
jq
ubeubhO
)
r
}
r
(
h
)
XQ
The
mock
is
set
as
the
mock
attribute
of
the
returned
function
for
easy
access
.
h
*
j
h
+
h
.
h0hRh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
'
h
<
h
h
]
r
(
hEX
The
mock
is
set
as
the
r
r
}
r
(
h
)
X
The
mock
is
set
as
the
h
*
j
ubhp
)
r
}
r
(
h
)
X
mock
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
mockr
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX4
attribute
of
the
returned
function
for
easy
access
.
r
r
}
r
(
h
)
X4
attribute
of
the
returned
function
for
easy
access
.
h
*
j
ubeubhO
)
r
}
r
(
h
)
X
mocksignature
can
also
be
used
with
classes
.
It
copies
the
signature
of
the
__init__
method
.
h
*
j
h
+
h
.
h0hRh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
*
h
<
h
h
]
r
(
hp
)
r
}
r
(
h
)
X
mocksignature
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
mocksignaturer
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
?
can
also
be
used
with
classes
.
It
copies
the
signature
of
the
r
r
}
r
(
h
)
X
?
can
also
be
used
with
classes
.
It
copies
the
signature
of
the
h
*
j
ubhp
)
r
}
r
(
h
)
X
__init__
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
__init__r
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
method
.
r
r
}
r
(
h
)
X
method
.
h
*
j
ubeubhO
)
r
}
r
(
h
)
X
]
When
used
with
callable
objects
(
instances
)
it
copies
the
signature
of
the
__call__
method
.
h
*
j
h
+
h
.
h0hRh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
-
h
<
h
h
]
r
(
hEXK
When
used
with
callable
objects
(
instances
)
it
copies
the
signature
of
the
r
r
}
r
(
h
)
XK
When
used
with
callable
objects
(
instances
)
it
copies
the
signature
of
the
h
*
j
ubhp
)
r
}
r
(
h
)
X
__call__
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
__call__r
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
method
.
r
r
}
r
(
h
)
X
method
.
h
*
j
ubeubeubeubhO
)
r
}
r
(
h
)
X
mocksignature
will
work
out
if
it
is
mocking
the
signature
of
a
method
on
an
instance
or
a
method
on
a
class
and
do
the
"
right
thing
"
with
the
self
argument
in
both
cases
.
h
*
h
'
h
+
h
.
h0hRh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K0h
<
h
h
]
r
(
hp
)
r
}
r
(
h
)
X
mocksignature
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
mocksignaturer
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
will
work
out
if
it
is
mocking
the
signature
of
a
method
on
an
instance
or
a
method
on
a
class
and
do
the
"
right
thing
"
with
the
r
r
}
r
(
h
)
X
will
work
out
if
it
is
mocking
the
signature
of
a
method
on
an
instance
or
a
method
on
a
class
and
do
the
"
right
thing
"
with
the
h
*
j
ubhp
)
r
}
r
(
h
)
X
self
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
selfr
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
argument
in
both
cases
.
r
r
}
r
(
h
)
X
argument
in
both
cases
.
h
*
j
ubeubhO
)
r
}
r
(
h
)
X
Because
of
a
limitation
in
the
way
that
arguments
are
collected
by
functions
created
by
mocksignature
they
are
*
always
*
passed
as
positional
arguments
(
including
defaults
)
and
not
keyword
arguments
.
h
*
h
'
h
+
h
.
h0hRh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K4h
<
h
h
]
r
(
hEXX
Because
of
a
limitation
in
the
way
that
arguments
are
collected
by
functions
created
by
r
r
}
r
(
h
)
XX
Because
of
a
limitation
in
the
way
that
arguments
are
collected
by
functions
created
by
h
*
j
ubhp
)
r
}
r
(
h
)
X
mocksignature
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
mocksignaturer
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
they
are
r
r
}
r
(
h
)
X
they
are
h
*
j
ubha
)
r
}
r
(
h
)
X
*
always
*
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
alwaysr
r
}
r
(
h
)
U
h
*
j
ubah0hlubhEXO
passed
as
positional
arguments
(
including
defaults
)
and
not
keyword
arguments
.
r
r
}
r
(
h
)
XO
passed
as
positional
arguments
(
including
defaults
)
and
not
keyword
arguments
.
h
*
j
ubeubh
&
)
r
}
r
(
h
)
U
h
*
h
'
h
+
h
.
h0h1h2
}
r
(
h4
]
h5
]
h6
]
h7
]
r
h
ah9
]
r
h
auh
;
K
:
h
<
h
h
]
r
(
h
>
)
r
}
r
(
h
)
X
mocksignature
apir
h
*
j
h
+
h
.
h0hBh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
:
h
<
h
h
]
r
hEX
mocksignature
apir
r
}
r
(
h
)
j
h
*
j
ubaubhO
)
r
}
r
(
h
)
X
Although
the
objects
returned
by
mocksignature
api
are
real
function
objects
they
have
much
of
the
same
api
as
the
:
class
:
Mock
class
.
This
includes
the
assert
methods
:
h
*
j
h
+
h
.
h0hRh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
<
h
<
h
h
]
r
(
hEX
!
Although
the
objects
returned
by
r
r
}
r
(
h
)
X
!
Although
the
objects
returned
by
h
*
j
ubhp
)
r
}
r
(
h
)
X
mocksignature
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
mocksignaturer
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEXF
api
are
real
function
objects
they
have
much
of
the
same
api
as
the
r
r
}
r
(
h
)
XF
api
are
real
function
objects
they
have
much
of
the
same
api
as
the
h
*
j
ubhU
)
r
}
r
(
h
)
X
:
class
:
Mock
r
h
*
j
h
+
h
.
h0hYh2
}
r
(
U
reftypeX
classh
[
h
\
X
MockU
refdomainX
pyr
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
K
<
h
]
r
h
)
r
}
r
(
h
)
j
h2
}
r
(
h4
]
h5
]
r
(
hfj
X
py
-
classr
eh6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
Mockr
r
}
r
(
h
)
U
h
*
j
ubah0h
ubaubhEX
)
class
.
This
includes
the
assert
methods
:
r
r
}
r
(
h
)
X
)
class
.
This
includes
the
assert
methods
:
h
*
j
ubeubcdocutils
.
nodes
literal_block
r
)
r
!
}
r
"
(
h
)
X
>
>
>
def
func
(
a
b
c
)
:
.
.
.
pass
.
.
.
>
>
>
func2
=
mocksignature
(
func
)
>
>
>
func2
.
called
False
>
>
>
func2
.
return_value
=
3
>
>
>
func2
(
1
2
3
)
3
>
>
>
func2
.
called
True
>
>
>
func2
.
assert_called_once_with
(
1
2
3
)
>
>
>
func2
.
assert_called_with
(
1
2
4
)
Traceback
(
most
recent
call
last
)
:
.
.
.
AssertionError
:
Expected
call
:
mock
(
1
2
4
)
Actual
call
:
mock
(
1
2
3
)
>
>
>
func2
.
call_count
1
>
>
>
func2
.
side_effect
=
IndexError
>
>
>
func2
(
4
5
6
)
Traceback
(
most
recent
call
last
)
:
.
.
.
IndexErrorh
*
j
h
+
h
.
h0U
literal_blockr
#
h2
}
r
(
U
testnodetypeX
doctestU
xml
:
spacer
%
U
preserver
&
h7
]
h6
]
h4
]
h5
]
h9
]
U
groups
]
r
'
U
defaultr
(
aU
optionsr
)
}
uh
;
K
h
<
h
h
]
r
*
hEX
>
>
>
def
func
(
a
b
c
)
:
.
.
.
pass
.
.
.
>
>
>
func2
=
mocksignature
(
func
)
>
>
>
func2
.
called
False
>
>
>
func2
.
return_value
=
3
>
>
>
func2
(
1
2
3
)
3
>
>
>
func2
.
called
True
>
>
>
func2
.
assert_called_once_with
(
1
2
3
)
>
>
>
func2
.
assert_called_with
(
1
2
4
)
Traceback
(
most
recent
call
last
)
:
.
.
.
AssertionError
:
Expected
call
:
mock
(
1
2
4
)
Actual
call
:
mock
(
1
2
3
)
>
>
>
func2
.
call_count
1
>
>
>
func2
.
side_effect
=
IndexError
>
>
>
func2
(
4
5
6
)
Traceback
(
most
recent
call
last
)
:
.
.
.
IndexErrorr
+
r
}
r
-
(
h
)
U
h
*
j
!
ubaubhO
)
r
.
}
r
/
(
h
)
X
{
The
mock
object
that
is
being
delegated
to
is
available
as
the
mock
attribute
of
the
function
created
by
mocksignature
.
h
*
j
h
+
h
.
h0hRh2
}
r0
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
[
h
<
h
h
]
r1
(
hEX
?
The
mock
object
that
is
being
delegated
to
is
available
as
the
r2
r3
}
r4
(
h
)
X
?
The
mock
object
that
is
being
delegated
to
is
available
as
the
h
*
j
.
ubhp
)
r5
}
r6
(
h
)
X
mock
h2
}
r7
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
.
h
]
r8
hEX
mockr9
r
:
}
r
;
(
h
)
U
h
*
j5
ubah0hxubhEX
&
attribute
of
the
function
created
by
r
<
r
=
}
r
>
(
h
)
X
&
attribute
of
the
function
created
by
h
*
j
.
ubhp
)
r
?
}
r
(
h
)
X
mocksignature
h2
}
rA
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
.
h
]
rB
hEX
mocksignaturerC
rD
}
rE
(
h
)
U
h
*
j
?
ubah0hxubhEX
.
rF
}
rG
(
h
)
X
.
h
*
j
.
ubeubj
)
rH
}
rI
(
h
)
X8
>
>
>
func2
.
mock
.
mock_calls
[
call
(
1
2
3
)
call
(
4
5
6
)
]
h
*
j
h
+
h
.
h0j
#
h2
}
rJ
(
U
testnodetypeX
doctestj
%
j
&
h7
]
h6
]
h4
]
h5
]
h9
]
U
groups
]
rK
j
(
aj
)
}
uh
;
K
^
h
<
h
h
]
rL
hEX8
>
>
>
func2
.
mock
.
mock_calls
[
call
(
1
2
3
)
call
(
4
5
6
)
]
rM
rN
}
rO
(
h
)
U
h
*
jH
ubaubhO
)
rP
}
rQ
(
h
)
XR
The
methods
and
attributes
available
on
functions
returned
by
mocksignature
are
:
h
*
j
h
+
h
.
h0hRh2
}
rR
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
Kch
<
h
h
]
rS
(
hEX
>
The
methods
and
attributes
available
on
functions
returned
by
rT
rU
}
rV
(
h
)
X
>
The
methods
and
attributes
available
on
functions
returned
by
h
*
jP
ubhp
)
rW
}
rX
(
h
)
X
mocksignature
h2
}
rY
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
jP
h
]
rZ
hEX
mocksignaturer
[
r
\
}
r
]
(
h
)
U
h
*
jW
ubah0hxubhEX
are
:
r
^
r_
}
r
(
h
)
X
are
:
h
*
jP
ubeubcdocutils
.
nodes
block_quote
ra
)
rb
}
rc
(
h
)
U
h
*
j
h
+
h
.
h0U
block_quoterd
h2
}
re
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
Nh
<
h
h
]
rf
hO
)
rg
}
rh
(
h
)
X
:
meth
:
~
Mock
.
assert_any_call
:
meth
:
~
Mock
.
assert_called_once_with
:
meth
:
~
Mock
.
assert_called_with
:
meth
:
~
Mock
.
assert_has_calls
:
attr
:
~
Mock
.
call_args
:
attr
:
~
Mock
.
call_args_list
:
attr
:
~
Mock
.
call_count
:
attr
:
~
Mock
.
called
:
attr
:
~
Mock
.
method_calls
mock
:
attr
:
~
Mock
.
mock_calls
:
meth
:
~
Mock
.
reset_mock
:
attr
:
~
Mock
.
return_value
and
:
attr
:
~
Mock
.
side_effect
.
h
*
jb
h
+
h
.
h0hRh2
}
ri
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
Kfh
]
rj
(
hU
)
rk
}
rl
(
h
)
X
:
meth
:
~
Mock
.
assert_any_call
rm
h
*
jg
h
+
h
.
h0hYh2
}
rn
(
U
reftypeX
methh
[
h
\
X
Mock
.
assert_any_callU
refdomainX
pyro
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
Kfh
]
rp
h
)
rq
}
rr
(
h
)
jm
h2
}
rs
(
h4
]
h5
]
rt
(
hfjo
X
py
-
methru
eh6
]
h7
]
h9
]
uh
*
jk
h
]
rv
hEX
assert_any_call
(
)
rw
rx
}
ry
(
h
)
U
h
*
jq
ubah0h
ubaubhEX
rz
r
{
}
r
|
(
h
)
X
h
*
jg
ubhU
)
r
}
}
r
~
(
h
)
X
%
:
meth
:
~
Mock
.
assert_called_once_with
r
h
*
jg
h
+
h
.
h0hYh2
}
r
(
U
reftypeX
methh
[
h
\
X
Mock
.
assert_called_once_withU
refdomainX
pyr
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
Kfh
]
r
h
)
r
}
r
(
h
)
j
h2
}
r
(
h4
]
h5
]
r
(
hfj
X
py
-
methr
eh6
]
h7
]
h9
]
uh
*
j
}
h
]
r
hEX
assert_called_once_with
(
)
r
r
}
r
(
h
)
U
h
*
j
ubah0h
ubaubhEX
r
r
}
r
(
h
)
X
h
*
jg
ubhU
)
r
}
r
(
h
)
X
:
meth
:
~
Mock
.
assert_called_with
r
h
*
jg
h
+
h
.
h0hYh2
}
r
(
U
reftypeX
methh
[
h
\
X
Mock
.
assert_called_withU
refdomainX
pyr
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
Kfh
]
r
h
)
r
}
r
(
h
)
j
h2
}
r
(
h4
]
h5
]
r
(
hfj
X
py
-
methr
eh6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
assert_called_with
(
)
r
r
}
r
(
h
)
U
h
*
j
ubah0h
ubaubhEX
r
r
}
r
(
h
)
X
h
*
jg
ubhU
)
r
}
r
(
h
)
X
:
meth
:
~
Mock
.
assert_has_calls
r
h
*
jg
h
+
h
.
h0hYh2
}
r
(
U
reftypeX
methh
[
h
\
X
Mock
.
assert_has_callsU
refdomainX
pyr
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
Kfh
]
r
h
)
r
}
r
(
h
)
j
h2
}
r
(
h4
]
h5
]
r
(
hfj
X
py
-
methr
eh6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
assert_has_calls
(
)
r
r
}
r
(
h
)
U
h
*
j
ubah0h
ubaubhEX
r
r
}
r
(
h
)
X
h
*
jg
ubhU
)
r
}
r
(
h
)
X
:
attr
:
~
Mock
.
call_args
r
h
*
jg
h
+
h
.
h0hYh2
}
r
(
U
reftypeX
attrh
[
h
\
X
Mock
.
call_argsU
refdomainX
pyr
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
Kfh
]
r
h
)
r
}
r
(
h
)
j
h2
}
r
(
h4
]
h5
]
r
(
hfj
X
py
-
attrr
eh6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
call_argsr
r
}
r
(
h
)
U
h
*
j
ubah0h
ubaubhEX
r
r
}
r
(
h
)
X
h
*
jg
ubhU
)
r
}
r
(
h
)
X
:
attr
:
~
Mock
.
call_args_list
r
h
*
jg
h
+
h
.
h0hYh2
}
r
(
U
reftypeX
attrh
[
h
\
X
Mock
.
call_args_listU
refdomainX
pyr
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
Kfh
]
r
h
)
r
}
r
(
h
)
j
h2
}
r
(
h4
]
h5
]
r
(
hfj
X
py
-
attrr
eh6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
call_args_listr
r
}
r
(
h
)
U
h
*
j
ubah0h
ubaubhEX
r
r
}
r
(
h
)
X
h
*
jg
ubhU
)
r
}
r
(
h
)
X
:
attr
:
~
Mock
.
call_count
r
h
*
jg
h
+
h
.
h0hYh2
}
r
(
U
reftypeX
attrh
[
h
\
X
Mock
.
call_countU
refdomainX
pyr
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
Kfh
]
r
h
)
r
}
r
(
h
)
j
h2
}
r
(
h4
]
h5
]
r
(
hfj
X
py
-
attrr
eh6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
call_countr
r
}
r
(
h
)
U
h
*
j
ubah0h
ubaubhEX
r
r
}
r
(
h
)
X
h
*
jg
ubhU
)
r
}
r
(
h
)
X
:
attr
:
~
Mock
.
called
r
h
*
jg
h
+
h
.
h0hYh2
}
r
(
U
reftypeX
attrh
[
h
\
X
Mock
.
calledU
refdomainX
pyr
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
Kfh
]
r
h
)
r
}
r
(
h
)
j
h2
}
r
(
h4
]
h5
]
r
(
hfj
X
py
-
attrr
eh6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
calledr
r
}
r
(
h
)
U
h
*
j
ubah0h
ubaubhEX
r
r
}
r
(
h
)
X
h
*
jg
ubhU
)
r
}
r
(
h
)
X
:
attr
:
~
Mock
.
method_calls
r
h
*
jg
h
+
h
.
h0hYh2
}
r
(
U
reftypeX
attrh
[
h
\
X
Mock
.
method_callsU
refdomainX
pyr
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
Kfh
]
r
h
)
r
}
r
(
h
)
j
h2
}
r
(
h4
]
h5
]
r
(
hfj
X
py
-
attrr
eh6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
method_callsr
r
}
r
(
h
)
U
h
*
j
ubah0h
ubaubhEX
r
r
}
r
(
h
)
X
h
*
jg
ubhp
)
r
}
r
(
h
)
X
mock
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
jg
h
]
r
hEX
mockr
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
r
r
}
r
(
h
)
X
h
*
jg
ubhU
)
r
}
r
(
h
)
X
:
attr
:
~
Mock
.
mock_calls
r
h
*
jg
h
+
h
.
h0hYh2
}
r
(
U
reftypeX
attrh
[
h
\
X
Mock
.
mock_callsU
refdomainX
pyr
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
Kfh
]
r
h
)
r
}
r
(
h
)
j
h2
}
r
(
h4
]
h5
]
r
(
hfj
X
py
-
attrr
!
eh6
]
h7
]
h9
]
uh
*
j
h
]
r
"
hEX
mock_callsr
#
r
}
r
%
(
h
)
U
h
*
j
ubah0h
ubaubhEX
r
&
r
'
}
r
(
(
h
)
X
h
*
jg
ubhU
)
r
)
}
r
*
(
h
)
X
:
meth
:
~
Mock
.
reset_mock
r
+
h
*
jg
h
+
h
.
h0hYh2
}
r
(
U
reftypeX
methh
[
h
\
X
Mock
.
reset_mockU
refdomainX
pyr
-
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
Kfh
]
r
.
h
)
r
/
}
r0
(
h
)
j
+
h2
}
r1
(
h4
]
h5
]
r2
(
hfj
-
X
py
-
methr3
eh6
]
h7
]
h9
]
uh
*
j
)
h
]
r4
hEX
reset_mock
(
)
r5
r6
}
r7
(
h
)
U
h
*
j
/
ubah0h
ubaubhEX
r8
r9
}
r
:
(
h
)
X
h
*
jg
ubhU
)
r
;
}
r
<
(
h
)
X
:
attr
:
~
Mock
.
return_value
r
=
h
*
jg
h
+
h
.
h0hYh2
}
r
>
(
U
reftypeX
attrh
[
h
\
X
Mock
.
return_valueU
refdomainX
pyr
?
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
Kfh
]
r
h
)
rA
}
rB
(
h
)
j
=
h2
}
rC
(
h4
]
h5
]
rD
(
hfj
?
X
py
-
attrrE
eh6
]
h7
]
h9
]
uh
*
j
;
h
]
rF
hEX
return_valuerG
rH
}
rI
(
h
)
U
h
*
jA
ubah0h
ubaubhEX
and
rJ
rK
}
rL
(
h
)
X
and
h
*
jg
ubhU
)
rM
}
rN
(
h
)
X
:
attr
:
~
Mock
.
side_effect
rO
h
*
jg
h
+
h
.
h0hYh2
}
rP
(
U
reftypeX
attrh
[
h
\
X
Mock
.
side_effectU
refdomainX
pyrQ
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
Kfh
]
rR
h
)
rS
}
rT
(
h
)
jO
h2
}
rU
(
h4
]
h5
]
rV
(
hfjQ
X
py
-
attrrW
eh6
]
h7
]
h9
]
uh
*
jM
h
]
rX
hEX
side_effectrY
rZ
}
r
[
(
h
)
U
h
*
jS
ubah0h
ubaubhEX
.
r
\
}
r
]
(
h
)
X
.
h
*
jg
ubeubaubeubh
&
)
r
^
}
r_
(
h
)
U
h
*
h
'
h
+
h
.
h0h1h2
}
r
(
h4
]
h5
]
h6
]
h7
]
ra
h
ah9
]
rb
h
auh
;
Kph
<
h
h
]
rc
(
h
>
)
rd
}
re
(
h
)
X
Example
userf
h
*
j
^
h
+
h
.
h0hBh2
}
rg
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
Kph
<
h
h
]
rh
hEX
Example
useri
rj
}
rk
(
h
)
jf
h
*
jd
ubaubh
&
)
rl
}
rm
(
h
)
U
h
*
j
^
h
+
h
.
h0h1h2
}
rn
(
h4
]
h5
]
h6
]
h7
]
ro
h
ah9
]
rp
h
auh
;
Ksh
<
h
h
]
rq
(
h
>
)
rr
}
rs
(
h
)
X
Basic
usert
h
*
jl
h
+
h
.
h0hBh2
}
ru
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
Ksh
<
h
h
]
rv
hEX
Basic
userw
rx
}
ry
(
h
)
jt
h
*
jr
ubaubj
)
rz
}
r
{
(
h
)
X_
>
>
>
def
function
(
a
b
c
=
None
)
:
.
.
.
pass
.
.
.
>
>
>
mock
=
Mock
(
)
>
>
>
function
=
mocksignature
(
function
mock
)
>
>
>
function
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
TypeError
:
<
lambda
>
(
)
takes
at
least
2
arguments
(
0
given
)
>
>
>
function
.
return_value
=
'
some
value
'
>
>
>
function
(
1
2
'
foo
'
)
'
some
value
'
>
>
>
function
.
assert_called_with
(
1
2
'
foo
'
)
h
*
jl
h
+
h
.
h0j
#
h2
}
r
|
(
U
testnodetypeX
doctestj
%
j
&
h7
]
h6
]
h4
]
h5
]
h9
]
U
groups
]
r
}
j
(
aj
)
}
uh
;
Kuh
<
h
h
]
r
~
hEX_
>
>
>
def
function
(
a
b
c
=
None
)
:
.
.
.
pass
.
.
.
>
>
>
mock
=
Mock
(
)
>
>
>
function
=
mocksignature
(
function
mock
)
>
>
>
function
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
TypeError
:
<
lambda
>
(
)
takes
at
least
2
arguments
(
0
given
)
>
>
>
function
.
return_value
=
'
some
value
'
>
>
>
function
(
1
2
'
foo
'
)
'
some
value
'
>
>
>
function
.
assert_called_with
(
1
2
'
foo
'
)
r
r
}
r
(
h
)
U
h
*
jz
ubaubeubh
&
)
r
}
r
(
h
)
U
h
*
j
^
h
+
h
.
h0h1h2
}
r
(
h4
]
h5
]
h6
]
h7
]
r
h
"
ah9
]
r
h
auh
;
K
h
<
h
h
]
r
(
h
>
)
r
}
r
(
h
)
X
Keyword
argumentsr
h
*
j
h
+
h
.
h0hBh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
r
hEX
Keyword
argumentsr
r
}
r
(
h
)
j
h
*
j
ubaubhO
)
r
}
r
(
h
)
X
Note
that
arguments
to
functions
created
by
mocksignature
are
always
passed
in
to
the
underlying
mock
by
position
even
when
called
with
keywords
:
h
*
j
h
+
h
.
h0hRh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
r
(
hEX
Note
that
arguments
to
functions
created
by
r
r
}
r
(
h
)
X
Note
that
arguments
to
functions
created
by
h
*
j
ubhp
)
r
}
r
(
h
)
X
mocksignature
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
mocksignaturer
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEXX
are
always
passed
in
to
the
underlying
mock
by
position
even
when
called
with
keywords
:
r
r
}
r
(
h
)
XX
are
always
passed
in
to
the
underlying
mock
by
position
even
when
called
with
keywords
:
h
*
j
ubeubj
)
r
}
r
(
h
)
X
>
>
>
def
function
(
a
b
c
=
None
)
:
.
.
.
pass
.
.
.
>
>
>
function
=
mocksignature
(
function
)
>
>
>
function
.
return_value
=
None
>
>
>
function
(
1
2
)
>
>
>
function
.
assert_called_with
(
1
2
None
)
h
*
j
h
+
h
.
h0j
#
h2
}
r
(
U
testnodetypeX
doctestj
%
j
&
h7
]
h6
]
h4
]
h5
]
h9
]
U
groups
]
r
j
(
aj
)
}
uh
;
K
h
<
h
h
]
r
hEX
>
>
>
def
function
(
a
b
c
=
None
)
:
.
.
.
pass
.
.
.
>
>
>
function
=
mocksignature
(
function
)
>
>
>
function
.
return_value
=
None
>
>
>
function
(
1
2
)
>
>
>
function
.
assert_called_with
(
1
2
None
)
r
r
}
r
(
h
)
U
h
*
j
ubaubeubh
&
)
r
}
r
(
h
)
U
h
*
j
^
h
+
h
.
h0h1h2
}
r
(
h4
]
h5
]
h6
]
h7
]
r
h
!
ah9
]
r
h
auh
;
K
h
<
h
h
]
r
(
h
>
)
r
}
r
(
h
)
X
Mocking
methods
and
selfr
h
*
j
h
+
h
.
h0hBh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
r
hEX
Mocking
methods
and
selfr
r
}
r
(
h
)
j
h
*
j
ubaubhO
)
r
}
r
(
h
)
X
When
you
use
mocksignature
to
replace
a
method
on
a
class
then
self
will
be
included
in
the
method
signature
-
and
you
will
need
to
include
the
instance
when
you
do
your
asserts
.
h
*
j
h
+
h
.
h0hRh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
r
(
hEX
When
you
use
r
r
}
r
(
h
)
X
When
you
use
h
*
j
ubhp
)
r
}
r
(
h
)
X
mocksignature
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
mocksignaturer
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
%
to
replace
a
method
on
a
class
then
r
r
}
r
(
h
)
X
%
to
replace
a
method
on
a
class
then
h
*
j
ubhp
)
r
}
r
(
h
)
X
self
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
selfr
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEXo
will
be
included
in
the
method
signature
-
and
you
will
need
to
include
the
instance
when
you
do
your
asserts
.
r
r
}
r
(
h
)
Xo
will
be
included
in
the
method
signature
-
and
you
will
need
to
include
the
instance
when
you
do
your
asserts
.
h
*
j
ubeubhO
)
r
}
r
(
h
)
X
As
a
curious
factor
of
the
way
Python
(
2
)
wraps
methods
fetched
from
a
class
we
can
*
get
*
the
return_value
from
a
function
set
on
a
class
but
we
can
'
t
set
it
.
We
have
to
do
this
through
the
exposed
mock
attribute
instead
:
h
*
j
h
+
h
.
h0hRh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
r
(
hEXU
As
a
curious
factor
of
the
way
Python
(
2
)
wraps
methods
fetched
from
a
class
we
can
r
r
}
r
(
h
)
XU
As
a
curious
factor
of
the
way
Python
(
2
)
wraps
methods
fetched
from
a
class
we
can
h
*
j
ubha
)
r
}
r
(
h
)
X
*
get
*
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
getr
r
}
r
(
h
)
U
h
*
j
ubah0hlubhEX
the
r
r
}
r
(
h
)
X
the
h
*
j
ubhp
)
r
}
r
(
h
)
X
return_value
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
return_valuer
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
]
from
a
function
set
on
a
class
but
we
can
'
t
set
it
.
We
have
to
do
this
through
the
exposed
r
r
}
r
(
h
)
X
]
from
a
function
set
on
a
class
but
we
can
'
t
set
it
.
We
have
to
do
this
through
the
exposed
h
*
j
ubhp
)
r
}
r
(
h
)
X
mock
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
mockr
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
attribute
instead
:
r
r
}
r
(
h
)
X
attribute
instead
:
h
*
j
ubeubj
)
r
}
r
(
h
)
X
>
>
>
class
SomeClass
(
object
)
:
.
.
.
def
method
(
self
a
b
c
=
None
)
:
.
.
.
pass
.
.
.
>
>
>
SomeClass
.
method
=
mocksignature
(
SomeClass
.
method
)
>
>
>
SomeClass
.
method
.
mock
.
return_value
=
None
>
>
>
instance
=
SomeClass
(
)
>
>
>
instance
.
method
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
TypeError
:
<
lambda
>
(
)
takes
at
least
4
arguments
(
1
given
)
>
>
>
instance
.
method
(
1
2
3
)
>
>
>
instance
.
method
.
assert_called_with
(
instance
1
2
3
)
h
*
j
h
+
h
.
h0j
#
h2
}
r
(
U
testnodetypeX
doctestj
%
j
&
h7
]
h6
]
h4
]
h5
]
h9
]
U
groups
]
r
j
(
aj
)
}
uh
;
K
h
<
h
h
]
r
hEX
>
>
>
class
SomeClass
(
object
)
:
.
.
.
def
method
(
self
a
b
c
=
None
)
:
.
.
.
pass
.
.
.
>
>
>
SomeClass
.
method
=
mocksignature
(
SomeClass
.
method
)
>
>
>
SomeClass
.
method
.
mock
.
return_value
=
None
>
>
>
instance
=
SomeClass
(
)
>
>
>
instance
.
method
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
TypeError
:
<
lambda
>
(
)
takes
at
least
4
arguments
(
1
given
)
>
>
>
instance
.
method
(
1
2
3
)
>
>
>
instance
.
method
.
assert_called_with
(
instance
1
2
3
)
r
r
}
r
(
h
)
U
h
*
j
ubaubhO
)
r
}
r
(
h
)
Xx
When
you
use
mocksignature
on
instance
methods
self
isn
'
t
included
(
and
we
can
set
the
return_value
etc
directly
)
:
h
*
j
h
+
h
.
h0hRh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
r
(
hEX
When
you
use
r
r
}
r
(
h
)
X
When
you
use
h
*
j
ubhp
)
r
}
r
(
h
)
X
mocksignature
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
mocksignaturer
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
on
instance
methods
r
r
}
r
(
h
)
X
on
instance
methods
h
*
j
ubhp
)
r
}
r
(
h
)
X
self
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
selfr
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
isn
'
t
included
(
and
we
can
set
the
r
r
}
r
(
h
)
X
isn
'
t
included
(
and
we
can
set
the
h
*
j
ubhp
)
r
}
r
(
h
)
X
return_value
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
return_valuer
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
etc
directly
)
:
r
!
r
"
}
r
#
(
h
)
X
etc
directly
)
:
h
*
j
ubeubj
)
r
}
r
%
(
h
)
X
>
>
>
class
SomeClass
(
object
)
:
.
.
.
def
method
(
self
a
b
c
=
None
)
:
.
.
.
pass
.
.
.
>
>
>
instance
=
SomeClass
(
)
>
>
>
instance
.
method
=
mocksignature
(
instance
.
method
)
>
>
>
instance
.
method
.
return_value
=
None
>
>
>
instance
.
method
(
1
2
3
)
>
>
>
instance
.
method
.
assert_called_with
(
1
2
3
)
h
*
j
h
+
h
.
h0j
#
h2
}
r
&
(
U
testnodetypeX
doctestj
%
j
&
h7
]
h6
]
h4
]
h5
]
h9
]
U
groups
]
r
'
j
(
aj
)
}
uh
;
K
h
<
h
h
]
r
(
hEX
>
>
>
class
SomeClass
(
object
)
:
.
.
.
def
method
(
self
a
b
c
=
None
)
:
.
.
.
pass
.
.
.
>
>
>
instance
=
SomeClass
(
)
>
>
>
instance
.
method
=
mocksignature
(
instance
.
method
)
>
>
>
instance
.
method
.
return_value
=
None
>
>
>
instance
.
method
(
1
2
3
)
>
>
>
instance
.
method
.
assert_called_with
(
1
2
3
)
r
)
r
*
}
r
+
(
h
)
U
h
*
j
ubaubeubh
&
)
r
}
r
-
(
h
)
U
h
*
j
^
h
+
h
.
h0h1h2
}
r
.
(
h4
]
h5
]
h6
]
h7
]
r
/
h
ah9
]
r0
h
auh
;
K
h
<
h
h
]
r1
(
h
>
)
r2
}
r3
(
h
)
X
mocksignature
with
classesr4
h
*
j
h
+
h
.
h0hBh2
}
r5
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
r6
hEX
mocksignature
with
classesr7
r8
}
r9
(
h
)
j4
h
*
j2
ubaubhO
)
r
:
}
r
;
(
h
)
XU
When
used
with
a
class
mocksignature
copies
the
signature
of
the
__init__
method
.
h
*
j
h
+
h
.
h0hRh2
}
r
<
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
r
=
(
hEX
When
used
with
a
class
r
>
r
?
}
r
(
h
)
X
When
used
with
a
class
h
*
j
:
ubhp
)
rA
}
rB
(
h
)
X
mocksignature
h2
}
rC
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
:
h
]
rD
hEX
mocksignaturerE
rF
}
rG
(
h
)
U
h
*
jA
ubah0hxubhEX
copies
the
signature
of
the
rH
rI
}
rJ
(
h
)
X
copies
the
signature
of
the
h
*
j
:
ubhp
)
rK
}
rL
(
h
)
X
__init__
h2
}
rM
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
:
h
]
rN
hEX
__init__rO
rP
}
rQ
(
h
)
U
h
*
jK
ubah0hxubhEX
method
.
rR
rS
}
rT
(
h
)
X
method
.
h
*
j
:
ubeubj
)
rU
}
rV
(
h
)
X
~
>
>
>
class
Something
(
object
)
:
.
.
.
def
__init__
(
self
foo
bar
)
:
.
.
.
pass
.
.
.
>
>
>
MockSomething
=
mocksignature
(
Something
)
>
>
>
instance
=
MockSomething
(
10
9
)
>
>
>
assert
instance
is
MockSomething
.
return_value
>
>
>
MockSomething
.
assert_called_with
(
10
9
)
>
>
>
MockSomething
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
TypeError
:
<
lambda
>
(
)
takes
at
least
2
arguments
(
0
given
)
h
*
j
h
+
h
.
h0j
#
h2
}
rW
(
U
testnodetypeX
doctestj
%
j
&
h7
]
h6
]
h4
]
h5
]
h9
]
U
groups
]
rX
j
(
aj
)
}
uh
;
K
h
<
h
h
]
rY
hEX
~
>
>
>
class
Something
(
object
)
:
.
.
.
def
__init__
(
self
foo
bar
)
:
.
.
.
pass
.
.
.
>
>
>
MockSomething
=
mocksignature
(
Something
)
>
>
>
instance
=
MockSomething
(
10
9
)
>
>
>
assert
instance
is
MockSomething
.
return_value
>
>
>
MockSomething
.
assert_called_with
(
10
9
)
>
>
>
MockSomething
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
TypeError
:
<
lambda
>
(
)
takes
at
least
2
arguments
(
0
given
)
rZ
r
[
}
r
\
(
h
)
U
h
*
jU
ubaubhO
)
r
]
}
r
^
(
h
)
X
Because
the
object
returned
by
mocksignature
is
a
function
rather
than
a
Mock
you
lose
the
other
capabilities
of
Mock
like
dynamic
attribute
creation
.
h
*
j
h
+
h
.
h0hRh2
}
r_
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
r
(
hEX
Because
the
object
returned
by
ra
rb
}
rc
(
h
)
X
Because
the
object
returned
by
h
*
j
]
ubhp
)
rd
}
re
(
h
)
X
mocksignature
h2
}
rf
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
]
h
]
rg
hEX
mocksignaturerh
ri
}
rj
(
h
)
U
h
*
jd
ubah0hxubhEX
is
a
function
rather
than
a
rk
rl
}
rm
(
h
)
X
is
a
function
rather
than
a
h
*
j
]
ubhp
)
rn
}
ro
(
h
)
X
Mock
h2
}
rp
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
]
h
]
rq
hEX
Mockrr
rs
}
rt
(
h
)
U
h
*
jn
ubah0hxubhEX
you
lose
the
other
capabilities
of
ru
rv
}
rw
(
h
)
X
you
lose
the
other
capabilities
of
h
*
j
]
ubhp
)
rx
}
ry
(
h
)
X
Mock
h2
}
rz
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
]
h
]
r
{
hEX
Mockr
|
r
}
}
r
~
(
h
)
U
h
*
jx
ubah0hxubhEX
"
like
dynamic
attribute
creation
.
r
r
}
r
(
h
)
X
"
like
dynamic
attribute
creation
.
h
*
j
]
ubeubeubh
&
)
r
}
r
(
h
)
U
h
*
j
^
h
+
h
.
h0h1h2
}
r
(
h4
]
h5
]
h6
]
h7
]
r
h
ah9
]
r
h
auh
;
K
h
<
h
h
]
r
(
h
>
)
r
}
r
(
h
)
X
#
mocksignature
with
callable
objectsr
h
*
j
h
+
h
.
h0hBh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
r
hEX
#
mocksignature
with
callable
objectsr
r
}
r
(
h
)
j
h
*
j
ubaubhO
)
r
}
r
(
h
)
X_
When
used
with
a
callable
object
mocksignature
copies
the
signature
of
the
__call__
method
.
h
*
j
h
+
h
.
h0hRh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
r
(
hEX
!
When
used
with
a
callable
object
r
r
}
r
(
h
)
X
!
When
used
with
a
callable
object
h
*
j
ubhp
)
r
}
r
(
h
)
X
mocksignature
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
mocksignaturer
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
copies
the
signature
of
the
r
r
}
r
(
h
)
X
copies
the
signature
of
the
h
*
j
ubhp
)
r
}
r
(
h
)
X
__call__
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
__call__r
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
method
.
r
r
}
r
(
h
)
X
method
.
h
*
j
ubeubj
)
r
}
r
(
h
)
Xl
>
>
>
class
Something
(
object
)
:
.
.
.
def
__call__
(
self
spam
eggs
)
:
.
.
.
pass
.
.
.
>
>
>
something
=
Something
(
)
>
>
>
mock_something
=
mocksignature
(
something
)
>
>
>
result
=
mock_something
(
10
9
)
>
>
>
mock_something
.
assert_called_with
(
10
9
)
>
>
>
mock_something
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
TypeError
:
<
lambda
>
(
)
takes
at
least
2
arguments
(
0
given
)
h
*
j
h
+
h
.
h0j
#
h2
}
r
(
U
testnodetypeX
doctestj
%
j
&
h7
]
h6
]
h4
]
h5
]
h9
]
U
groups
]
r
j
(
aj
)
}
uh
;
K
h
<
h
h
]
r
hEXl
>
>
>
class
Something
(
object
)
:
.
.
.
def
__call__
(
self
spam
eggs
)
:
.
.
.
pass
.
.
.
>
>
>
something
=
Something
(
)
>
>
>
mock_something
=
mocksignature
(
something
)
>
>
>
result
=
mock_something
(
10
9
)
>
>
>
mock_something
.
assert_called_with
(
10
9
)
>
>
>
mock_something
(
)
Traceback
(
most
recent
call
last
)
:
.
.
.
TypeError
:
<
lambda
>
(
)
takes
at
least
2
arguments
(
0
given
)
r
r
}
r
(
h
)
U
h
*
j
ubaubeubeubh
&
)
r
}
r
(
h
)
U
h
*
h
'
h
+
h
.
h0h1h2
}
r
(
h4
]
h5
]
h6
]
h7
]
r
h
#
ah9
]
r
h
auh
;
K
h
<
h
h
]
r
(
h
>
)
r
}
r
(
h
)
X
mocksignature
argument
to
patchr
h
*
j
h
+
h
.
h0hBh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
r
hEX
mocksignature
argument
to
patchr
r
}
r
(
h
)
j
h
*
j
ubaubhO
)
r
}
r
(
h
)
X
mocksignature
is
available
as
a
keyword
argument
to
:
func
:
patch
or
:
func
:
patch
.
object
.
It
can
be
used
with
functions
/
methods
/
classes
and
callable
objects
.
h
*
j
h
+
h
.
h0hRh2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
;
K
h
<
h
h
]
r
(
hp
)
r
}
r
(
h
)
X
mocksignature
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
mocksignaturer
r
}
r
(
h
)
U
h
*
j
ubah0hxubhEX
'
is
available
as
a
keyword
argument
to
r
r
}
r
(
h
)
X
'
is
available
as
a
keyword
argument
to
h
*
j
ubhU
)
r
}
r
(
h
)
X
:
func
:
patch
r
h
*
j
h
+
h
.
h0hYh2
}
r
(
U
reftypeX
funch
[
h
\
X
patchU
refdomainX
pyr
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
K
h
]
r
h
)
r
}
r
(
h
)
j
h2
}
r
(
h4
]
h5
]
r
(
hfj
X
py
-
funcr
eh6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
patch
(
)
r
r
}
r
(
h
)
U
h
*
j
ubah0h
ubaubhEX
or
r
r
}
r
(
h
)
X
or
h
*
j
ubhU
)
r
}
r
(
h
)
X
:
func
:
patch
.
object
r
h
*
j
h
+
h
.
h0hYh2
}
r
(
U
reftypeX
funch
[
h
\
X
patch
.
objectU
refdomainX
pyr
h7
]
h6
]
U
refexplicit
h4
]
h5
]
h9
]
h
^
h_h
Nh
h
uh
;
K
h
]
r
h
)
r
}
r
(
h
)
j
h2
}
r
(
h4
]
h5
]
r
(
hfj
X
py
-
funcr
eh6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
patch
.
object
(
)
r
r
}
r
(
h
)
U
h
*
j
ubah0h
ubaubhEXI
.
It
can
be
used
with
functions
/
methods
/
classes
and
callable
objects
.
r
r
}
r
(
h
)
XI
.
It
can
be
used
with
functions
/
methods
/
classes
and
callable
objects
.
h
*
j
ubeubj
)
r
}
r
(
h
)
X
>
>
>
class
SomeClass
(
object
)
:
.
.
.
def
method
(
self
a
b
c
=
None
)
:
.
.
.
pass
.
.
.
>
>
>
patch
.
object
(
SomeClass
'
method
'
mocksignature
=
True
)
.
.
.
def
test
(
mock_method
)
:
.
.
.
instance
=
SomeClass
(
)
.
.
.
mock_method
.
return_value
=
None
.
.
.
instance
.
method
(
1
2
)
.
.
.
mock_method
.
assert_called_with
(
instance
1
2
None
)
.
.
.
>
>
>
test
(
)
h
*
j
h
+
h
.
h0j
#
h2
}
r
(
U
testnodetypeX
doctestj
%
j
&
h7
]
h6
]
h4
]
h5
]
h9
]
U
groups
]
r
j
(
aj
)
}
uh
;
K
h
<
h
h
]
r
hEX
>
>
>
class
SomeClass
(
object
)
:
.
.
.
def
method
(
self
a
b
c
=
None
)
:
.
.
.
pass
.
.
.
>
>
>
patch
.
object
(
SomeClass
'
method
'
mocksignature
=
True
)
.
.
.
def
test
(
mock_method
)
:
.
.
.
instance
=
SomeClass
(
)
.
.
.
mock_method
.
return_value
=
None
.
.
.
instance
.
method
(
1
2
)
.
.
.
mock_method
.
assert_called_with
(
instance
1
2
None
)
.
.
.
>
>
>
test
(
)
r
r
}
r
(
h
)
U
h
*
j
ubaubeubeubah
)
U
U
transformerr
NU
footnote_refsr
}
r
U
refnamesr
}
r
U
symbol_footnotesr
]
r
U
autofootnote_refsr
]
r
U
symbol_footnote_refsr
]
r
U
citationsr
]
r
h
<
h
U
current_liner
NU
transform_messagesr
]
r
cdocutils
.
nodes
system_message
r
)
r
}
r
(
h
)
U
h2
}
r
(
h4
]
U
levelK
h7
]
h6
]
U
sourceh
.
h5
]
h9
]
U
lineK
U
typeU
INFOr
uh
]
r
hO
)
r
}
r
(
h
)
U
h2
}
r
(
h4
]
h5
]
h6
]
h7
]
h9
]
uh
*
j
h
]
r
hEX
-
Hyperlink
target
"
inspect
"
is
not
referenced
.
r
r
}
r
(
h
)
U
h
*
j
ubah0hRubah0U
system_messager
ubaU
reporterr
NU
id_startr
K
U
autofootnotesr
]
r
U
citation_refsr
}
r
U
indirect_targetsr
]
r
U
settingsr
!
(
cdocutils
.
frontend
Values
r
"
or
#
}
r
(
U
footnote_backlinksr
%
K
U
record_dependenciesr
&
NU
rfc_base_urlr
'
U
http
:
/
/
tools
.
ietf
.
org
/
html
/
r
(
U
tracebackr
)
K
U
pep_referencesr
*
NU
strip_commentsr
+
NU
toc_backlinksr
U
entryr
-
U
language_coder
.
U
enr
/
U
datestampr0
NU
report_levelr1
K
U
_destinationr2
NU
halt_levelr3
K
U
strip_classesr4
NhBNU
error_encoding_error_handlerr5
U
backslashreplacer6
U
debugr7
NU
embed_stylesheetr8
U
output_encoding_error_handlerr9
U
strictr
:
U
sectnum_xformr
;
K
U
dump_transformsr
<
NU
docinfo_xformr
=
K
U
warning_streamr
>
NU
pep_file_url_templater
?
U
pep
-
%
04dr
U
exit_status_levelrA
K
U
configrB
NU
strict_visitorrC
NU
cloak_email_addressesrD
U
trim_footnote_reference_spacerE
U
envrF
NU
dump_pseudo_xmlrG
NU
expose_internalsrH
NU
sectsubtitle_xformrI
U
source_linkrJ
NU
rfc_referencesrK
NU
output_encodingrL
U
utf
-
8rM
U
source_urlrN
NU
input_encodingrO
U
utf
-
8
-
sigrP
U
_disable_configrQ
NU
id_prefixrR
U
U
tab_widthrS
K
U
error_encodingrT
U
UTF
-
8rU
U
_sourcerV
U
/
compile
/
mock
/
docs
/
mocksignature
.
txtrW
U
gettext_compactrX
U
generatorrY
NU
dump_internalsrZ
NU
pep_base_urlr
[
U
http
:
/
/
www
.
python
.
org
/
dev
/
peps
/
r
\
U
input_encoding_error_handlerr
]
j
:
U
auto_id_prefixr
^
U
idr_
U
doctitle_xformr
U
strip_elements_with_classesra
NU
_config_filesrb
]
U
file_insertion_enabledrc
K
U
raw_enabledrd
K
U
dump_settingsre
NubU
symbol_footnote_startrf
K
U
idsrg
}
rh
(
h
j
h
j
h
jl
h
h
h
#
j
h
h
h
h
'
h
j
h
"
j
h
j
^
h
!
j
uU
substitution_namesri
}
rj
h0h
<
h2
}
rk
(
h4
]
h7
]
h6
]
U
sourceh
.
h5
]
h9
]
uU
footnotesrl
]
rm
U
refidsrn
}
ro
ub
.
