/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
20
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
mozilla
/
layers
/
CompositorManagerChild
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
CompositorManagerParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
/
/
for
ContentChild
#
include
"
mozilla
/
dom
/
TabChild
.
h
"
/
/
for
TabChild
#
include
"
mozilla
/
dom
/
TabGroup
.
h
"
/
/
for
TabGroup
namespace
mozilla
{
namespace
layers
{
StaticRefPtr
<
CompositorManagerChild
>
CompositorManagerChild
:
:
sInstance
;
/
*
static
*
/
bool
CompositorManagerChild
:
:
IsInitialized
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
sInstance
&
&
sInstance
-
>
CanSend
(
)
;
}
/
*
static
*
/
bool
CompositorManagerChild
:
:
InitSameProcess
(
uint32_t
aNamespace
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
NS_WARN_IF
(
sInstance
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Already
initialized
"
)
;
return
false
;
}
RefPtr
<
CompositorManagerParent
>
parent
=
CompositorManagerParent
:
:
CreateSameProcess
(
)
;
sInstance
=
new
CompositorManagerChild
(
parent
aNamespace
)
;
return
true
;
}
/
*
static
*
/
bool
CompositorManagerChild
:
:
Init
(
Endpoint
<
PCompositorManagerChild
>
&
&
aEndpoint
uint32_t
aNamespace
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sInstance
)
{
MOZ_ASSERT
(
sInstance
-
>
mNamespace
!
=
aNamespace
)
;
MOZ_RELEASE_ASSERT
(
!
sInstance
-
>
CanSend
(
)
)
;
}
sInstance
=
new
CompositorManagerChild
(
Move
(
aEndpoint
)
aNamespace
)
;
return
sInstance
-
>
CanSend
(
)
;
}
/
*
static
*
/
void
CompositorManagerChild
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
CompositorBridgeChild
:
:
ShutDown
(
)
;
if
(
!
sInstance
)
{
return
;
}
sInstance
-
>
Close
(
)
;
sInstance
=
nullptr
;
}
CompositorManagerChild
:
:
CompositorManagerChild
(
CompositorManagerParent
*
aParent
uint32_t
aNamespace
)
:
mCanSend
(
false
)
mNamespace
(
aNamespace
)
mResourceId
(
0
)
{
MOZ_ASSERT
(
aParent
)
;
SetOtherProcessId
(
base
:
:
GetCurrentProcId
(
)
)
;
MessageLoop
*
loop
=
CompositorThreadHolder
:
:
Loop
(
)
;
ipc
:
:
MessageChannel
*
channel
=
aParent
-
>
GetIPCChannel
(
)
;
if
(
NS_WARN_IF
(
!
Open
(
channel
loop
ipc
:
:
ChildSide
)
)
)
{
return
;
}
mCanSend
=
true
;
AddRef
(
)
;
}
CompositorManagerChild
:
:
CompositorManagerChild
(
Endpoint
<
PCompositorManagerChild
>
&
&
aEndpoint
uint32_t
aNamespace
)
:
mCanSend
(
false
)
mNamespace
(
aNamespace
)
mResourceId
(
0
)
{
if
(
NS_WARN_IF
(
!
aEndpoint
.
Bind
(
this
)
)
)
{
return
;
}
mCanSend
=
true
;
AddRef
(
)
;
}
void
CompositorManagerChild
:
:
DeallocPCompositorManagerChild
(
)
{
MOZ_ASSERT
(
!
mCanSend
)
;
Release
(
)
;
}
void
CompositorManagerChild
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
mCanSend
=
false
;
}
void
CompositorManagerChild
:
:
HandleFatalError
(
const
char
*
aName
const
char
*
aMsg
)
const
{
dom
:
:
ContentChild
:
:
FatalErrorIfNotUsingGPUProcess
(
aName
aMsg
OtherPid
(
)
)
;
}
void
CompositorManagerChild
:
:
ProcessingError
(
Result
aCode
const
char
*
aReason
)
{
if
(
aCode
!
=
MsgDropped
)
{
gfxDevCrash
(
gfx
:
:
LogReason
:
:
ProcessingError
)
<
<
"
Processing
error
in
CompositorBridgeChild
:
"
<
<
int
(
aCode
)
;
}
}
already_AddRefed
<
nsIEventTarget
>
CompositorManagerChild
:
:
GetSpecificMessageEventTarget
(
const
Message
&
aMsg
)
{
if
(
aMsg
.
type
(
)
!
=
PCompositorBridge
:
:
Msg_DidComposite__ID
)
{
return
nullptr
;
}
uint64_t
layersId
;
PickleIterator
iter
(
aMsg
)
;
if
(
!
IPC
:
:
ReadParam
(
&
aMsg
&
iter
&
layersId
)
)
{
return
nullptr
;
}
TabChild
*
tabChild
=
TabChild
:
:
GetFrom
(
layersId
)
;
if
(
!
tabChild
)
{
return
nullptr
;
}
return
do_AddRef
(
tabChild
-
>
TabGroup
(
)
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
)
;
}
}
/
/
namespace
layers
}
/
/
namespace
mozilla
