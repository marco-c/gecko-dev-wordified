(
function
(
)
{
const
env
=
{
"
NODE_ENV
"
:
"
production
"
}
;
try
{
if
(
process
)
{
process
.
env
=
Object
.
assign
(
{
}
process
.
env
)
;
Object
.
assign
(
process
.
env
env
)
;
return
;
}
}
catch
(
e
)
{
}
/
/
avoid
ReferenceError
:
process
is
not
defined
globalThis
.
process
=
{
env
:
env
}
;
}
)
(
)
;
function
createCommonjsModule
(
fn
module
)
{
return
module
=
{
exports
:
{
}
}
fn
(
module
module
.
exports
)
module
.
exports
;
}
var
b
=
"
function
"
=
=
=
typeof
Symbol
&
&
Symbol
.
for
c
=
b
?
Symbol
.
for
(
"
react
.
element
"
)
:
60103
d
=
b
?
Symbol
.
for
(
"
react
.
portal
"
)
:
60106
e
=
b
?
Symbol
.
for
(
"
react
.
fragment
"
)
:
60107
f
=
b
?
Symbol
.
for
(
"
react
.
strict_mode
"
)
:
60108
g
=
b
?
Symbol
.
for
(
"
react
.
profiler
"
)
:
60114
h
=
b
?
Symbol
.
for
(
"
react
.
provider
"
)
:
60109
k
=
b
?
Symbol
.
for
(
"
react
.
context
"
)
:
60110
l
=
b
?
Symbol
.
for
(
"
react
.
async_mode
"
)
:
60111
m
=
b
?
Symbol
.
for
(
"
react
.
concurrent_mode
"
)
:
60111
n
=
b
?
Symbol
.
for
(
"
react
.
forward_ref
"
)
:
60112
p
=
b
?
Symbol
.
for
(
"
react
.
suspense
"
)
:
60113
q
=
b
?
Symbol
.
for
(
"
react
.
suspense_list
"
)
:
60120
r
=
b
?
Symbol
.
for
(
"
react
.
memo
"
)
:
60115
t
=
b
?
Symbol
.
for
(
"
react
.
lazy
"
)
:
60116
v
=
b
?
Symbol
.
for
(
"
react
.
block
"
)
:
60121
w
=
b
?
Symbol
.
for
(
"
react
.
fundamental
"
)
:
60117
x
=
b
?
Symbol
.
for
(
"
react
.
responder
"
)
:
60118
y
=
b
?
Symbol
.
for
(
"
react
.
scope
"
)
:
60119
;
function
z
(
a
)
{
if
(
"
object
"
=
=
=
typeof
a
&
&
null
!
=
=
a
)
{
var
u
=
a
.
typeof
;
switch
(
u
)
{
case
c
:
switch
(
a
=
a
.
type
a
)
{
case
l
:
case
m
:
case
e
:
case
g
:
case
f
:
case
p
:
return
a
;
default
:
switch
(
a
=
a
&
&
a
.
typeof
a
)
{
case
k
:
case
n
:
case
t
:
case
r
:
case
h
:
return
a
;
default
:
return
u
}
}
case
d
:
return
u
}
}
}
function
A
(
a
)
{
return
z
(
a
)
=
=
=
m
}
var
AsyncMode
=
l
;
var
ConcurrentMode
=
m
;
var
ContextConsumer
=
k
;
var
ContextProvider
=
h
;
var
Element
=
c
;
var
ForwardRef
=
n
;
var
Fragment
=
e
;
var
Lazy
=
t
;
var
Memo
=
r
;
var
Portal
=
d
;
var
Profiler
=
g
;
var
StrictMode
=
f
;
var
Suspense
=
p
;
var
isAsyncMode
=
function
(
a
)
{
return
A
(
a
)
|
|
z
(
a
)
=
=
=
l
}
;
var
isConcurrentMode
=
A
;
var
isContextConsumer
=
function
(
a
)
{
return
z
(
a
)
=
=
=
k
}
;
var
isContextProvider
=
function
(
a
)
{
return
z
(
a
)
=
=
=
h
}
;
var
isElement
=
function
(
a
)
{
return
"
object
"
=
=
=
typeof
a
&
&
null
!
=
=
a
&
&
a
.
typeof
=
=
=
c
}
;
var
isForwardRef
=
function
(
a
)
{
return
z
(
a
)
=
=
=
n
}
;
var
isFragment
=
function
(
a
)
{
return
z
(
a
)
=
=
=
e
}
;
var
isLazy
=
function
(
a
)
{
return
z
(
a
)
=
=
=
t
}
;
var
isMemo
=
function
(
a
)
{
return
z
(
a
)
=
=
=
r
}
;
var
isPortal
=
function
(
a
)
{
return
z
(
a
)
=
=
=
d
}
;
var
isProfiler
=
function
(
a
)
{
return
z
(
a
)
=
=
=
g
}
;
var
isStrictMode
=
function
(
a
)
{
return
z
(
a
)
=
=
=
f
}
;
var
isSuspense
=
function
(
a
)
{
return
z
(
a
)
=
=
=
p
}
;
var
isValidElementType
=
function
(
a
)
{
return
"
string
"
=
=
=
typeof
a
|
|
"
function
"
=
=
=
typeof
a
|
|
a
=
=
=
e
|
|
a
=
=
=
m
|
|
a
=
=
=
g
|
|
a
=
=
=
f
|
|
a
=
=
=
p
|
|
a
=
=
=
q
|
|
"
object
"
=
=
=
typeof
a
&
&
null
!
=
=
a
&
&
(
a
.
typeof
=
=
=
t
|
|
a
.
typeof
=
=
=
r
|
|
a
.
typeof
=
=
=
h
|
|
a
.
typeof
=
=
=
k
|
|
a
.
typeof
=
=
=
n
|
|
a
.
typeof
=
=
=
w
|
|
a
.
typeof
=
=
=
x
|
|
a
.
typeof
=
=
=
y
|
|
a
.
typeof
=
=
=
v
)
}
;
var
typeOf
=
z
;
var
reactIs_production_min
=
{
AsyncMode
:
AsyncMode
ConcurrentMode
:
ConcurrentMode
ContextConsumer
:
ContextConsumer
ContextProvider
:
ContextProvider
Element
:
Element
ForwardRef
:
ForwardRef
Fragment
:
Fragment
Lazy
:
Lazy
Memo
:
Memo
Portal
:
Portal
Profiler
:
Profiler
StrictMode
:
StrictMode
Suspense
:
Suspense
isAsyncMode
:
isAsyncMode
isConcurrentMode
:
isConcurrentMode
isContextConsumer
:
isContextConsumer
isContextProvider
:
isContextProvider
isElement
:
isElement
isForwardRef
:
isForwardRef
isFragment
:
isFragment
isLazy
:
isLazy
isMemo
:
isMemo
isPortal
:
isPortal
isProfiler
:
isProfiler
isStrictMode
:
isStrictMode
isSuspense
:
isSuspense
isValidElementType
:
isValidElementType
typeOf
:
typeOf
}
;
var
reactIs_development
=
createCommonjsModule
(
function
(
module
exports
)
{
if
(
process
.
env
.
NODE_ENV
!
=
=
"
production
"
)
{
(
function
(
)
{
/
/
The
Symbol
used
to
tag
the
ReactElement
-
like
types
.
If
there
is
no
native
Symbol
/
/
nor
polyfill
then
a
plain
number
is
used
for
performance
.
var
hasSymbol
=
typeof
Symbol
=
=
=
'
function
'
&
&
Symbol
.
for
;
var
REACT_ELEMENT_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
element
'
)
:
0xeac7
;
var
REACT_PORTAL_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
portal
'
)
:
0xeaca
;
var
REACT_FRAGMENT_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
fragment
'
)
:
0xeacb
;
var
REACT_STRICT_MODE_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
strict_mode
'
)
:
0xeacc
;
var
REACT_PROFILER_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
profiler
'
)
:
0xead2
;
var
REACT_PROVIDER_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
provider
'
)
:
0xeacd
;
var
REACT_CONTEXT_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
context
'
)
:
0xeace
;
/
/
TODO
:
We
don
'
t
use
AsyncMode
or
ConcurrentMode
anymore
.
They
were
temporary
/
/
(
unstable
)
APIs
that
have
been
removed
.
Can
we
remove
the
symbols
?
var
REACT_ASYNC_MODE_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
async_mode
'
)
:
0xeacf
;
var
REACT_CONCURRENT_MODE_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
concurrent_mode
'
)
:
0xeacf
;
var
REACT_FORWARD_REF_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
forward_ref
'
)
:
0xead0
;
var
REACT_SUSPENSE_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
suspense
'
)
:
0xead1
;
var
REACT_SUSPENSE_LIST_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
suspense_list
'
)
:
0xead8
;
var
REACT_MEMO_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
memo
'
)
:
0xead3
;
var
REACT_LAZY_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
lazy
'
)
:
0xead4
;
var
REACT_BLOCK_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
block
'
)
:
0xead9
;
var
REACT_FUNDAMENTAL_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
fundamental
'
)
:
0xead5
;
var
REACT_RESPONDER_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
responder
'
)
:
0xead6
;
var
REACT_SCOPE_TYPE
=
hasSymbol
?
Symbol
.
for
(
'
react
.
scope
'
)
:
0xead7
;
function
isValidElementType
(
type
)
{
return
typeof
type
=
=
=
'
string
'
|
|
typeof
type
=
=
=
'
function
'
|
|
/
/
Note
:
its
typeof
might
be
other
than
'
symbol
'
or
'
number
'
if
it
'
s
a
polyfill
.
type
=
=
=
REACT_FRAGMENT_TYPE
|
|
type
=
=
=
REACT_CONCURRENT_MODE_TYPE
|
|
type
=
=
=
REACT_PROFILER_TYPE
|
|
type
=
=
=
REACT_STRICT_MODE_TYPE
|
|
type
=
=
=
REACT_SUSPENSE_TYPE
|
|
type
=
=
=
REACT_SUSPENSE_LIST_TYPE
|
|
typeof
type
=
=
=
'
object
'
&
&
type
!
=
=
null
&
&
(
type
.
typeof
=
=
=
REACT_LAZY_TYPE
|
|
type
.
typeof
=
=
=
REACT_MEMO_TYPE
|
|
type
.
typeof
=
=
=
REACT_PROVIDER_TYPE
|
|
type
.
typeof
=
=
=
REACT_CONTEXT_TYPE
|
|
type
.
typeof
=
=
=
REACT_FORWARD_REF_TYPE
|
|
type
.
typeof
=
=
=
REACT_FUNDAMENTAL_TYPE
|
|
type
.
typeof
=
=
=
REACT_RESPONDER_TYPE
|
|
type
.
typeof
=
=
=
REACT_SCOPE_TYPE
|
|
type
.
typeof
=
=
=
REACT_BLOCK_TYPE
)
;
}
function
typeOf
(
object
)
{
if
(
typeof
object
=
=
=
'
object
'
&
&
object
!
=
=
null
)
{
var
typeof
=
object
.
typeof
;
switch
(
typeof
)
{
case
REACT_ELEMENT_TYPE
:
var
type
=
object
.
type
;
switch
(
type
)
{
case
REACT_ASYNC_MODE_TYPE
:
case
REACT_CONCURRENT_MODE_TYPE
:
case
REACT_FRAGMENT_TYPE
:
case
REACT_PROFILER_TYPE
:
case
REACT_STRICT_MODE_TYPE
:
case
REACT_SUSPENSE_TYPE
:
return
type
;
default
:
var
typeofType
=
type
&
&
type
.
typeof
;
switch
(
typeofType
)
{
case
REACT_CONTEXT_TYPE
:
case
REACT_FORWARD_REF_TYPE
:
case
REACT_LAZY_TYPE
:
case
REACT_MEMO_TYPE
:
case
REACT_PROVIDER_TYPE
:
return
typeofType
;
default
:
return
typeof
;
}
}
case
REACT_PORTAL_TYPE
:
return
typeof
;
}
}
return
undefined
;
}
/
/
AsyncMode
is
deprecated
along
with
isAsyncMode
var
AsyncMode
=
REACT_ASYNC_MODE_TYPE
;
var
ConcurrentMode
=
REACT_CONCURRENT_MODE_TYPE
;
var
ContextConsumer
=
REACT_CONTEXT_TYPE
;
var
ContextProvider
=
REACT_PROVIDER_TYPE
;
var
Element
=
REACT_ELEMENT_TYPE
;
var
ForwardRef
=
REACT_FORWARD_REF_TYPE
;
var
Fragment
=
REACT_FRAGMENT_TYPE
;
var
Lazy
=
REACT_LAZY_TYPE
;
var
Memo
=
REACT_MEMO_TYPE
;
var
Portal
=
REACT_PORTAL_TYPE
;
var
Profiler
=
REACT_PROFILER_TYPE
;
var
StrictMode
=
REACT_STRICT_MODE_TYPE
;
var
Suspense
=
REACT_SUSPENSE_TYPE
;
var
hasWarnedAboutDeprecatedIsAsyncMode
=
false
;
/
/
AsyncMode
should
be
deprecated
function
isAsyncMode
(
object
)
{
{
if
(
!
hasWarnedAboutDeprecatedIsAsyncMode
)
{
hasWarnedAboutDeprecatedIsAsyncMode
=
true
;
/
/
Using
console
[
'
warn
'
]
to
evade
Babel
and
ESLint
console
[
'
warn
'
]
(
'
The
ReactIs
.
isAsyncMode
(
)
alias
has
been
deprecated
'
+
'
and
will
be
removed
in
React
17
+
.
Update
your
code
to
use
'
+
'
ReactIs
.
isConcurrentMode
(
)
instead
.
It
has
the
exact
same
API
.
'
)
;
}
}
return
isConcurrentMode
(
object
)
|
|
typeOf
(
object
)
=
=
=
REACT_ASYNC_MODE_TYPE
;
}
function
isConcurrentMode
(
object
)
{
return
typeOf
(
object
)
=
=
=
REACT_CONCURRENT_MODE_TYPE
;
}
function
isContextConsumer
(
object
)
{
return
typeOf
(
object
)
=
=
=
REACT_CONTEXT_TYPE
;
}
function
isContextProvider
(
object
)
{
return
typeOf
(
object
)
=
=
=
REACT_PROVIDER_TYPE
;
}
function
isElement
(
object
)
{
return
typeof
object
=
=
=
'
object
'
&
&
object
!
=
=
null
&
&
object
.
typeof
=
=
=
REACT_ELEMENT_TYPE
;
}
function
isForwardRef
(
object
)
{
return
typeOf
(
object
)
=
=
=
REACT_FORWARD_REF_TYPE
;
}
function
isFragment
(
object
)
{
return
typeOf
(
object
)
=
=
=
REACT_FRAGMENT_TYPE
;
}
function
isLazy
(
object
)
{
return
typeOf
(
object
)
=
=
=
REACT_LAZY_TYPE
;
}
function
isMemo
(
object
)
{
return
typeOf
(
object
)
=
=
=
REACT_MEMO_TYPE
;
}
function
isPortal
(
object
)
{
return
typeOf
(
object
)
=
=
=
REACT_PORTAL_TYPE
;
}
function
isProfiler
(
object
)
{
return
typeOf
(
object
)
=
=
=
REACT_PROFILER_TYPE
;
}
function
isStrictMode
(
object
)
{
return
typeOf
(
object
)
=
=
=
REACT_STRICT_MODE_TYPE
;
}
function
isSuspense
(
object
)
{
return
typeOf
(
object
)
=
=
=
REACT_SUSPENSE_TYPE
;
}
exports
.
AsyncMode
=
AsyncMode
;
exports
.
ConcurrentMode
=
ConcurrentMode
;
exports
.
ContextConsumer
=
ContextConsumer
;
exports
.
ContextProvider
=
ContextProvider
;
exports
.
Element
=
Element
;
exports
.
ForwardRef
=
ForwardRef
;
exports
.
Fragment
=
Fragment
;
exports
.
Lazy
=
Lazy
;
exports
.
Memo
=
Memo
;
exports
.
Portal
=
Portal
;
exports
.
Profiler
=
Profiler
;
exports
.
StrictMode
=
StrictMode
;
exports
.
Suspense
=
Suspense
;
exports
.
isAsyncMode
=
isAsyncMode
;
exports
.
isConcurrentMode
=
isConcurrentMode
;
exports
.
isContextConsumer
=
isContextConsumer
;
exports
.
isContextProvider
=
isContextProvider
;
exports
.
isElement
=
isElement
;
exports
.
isForwardRef
=
isForwardRef
;
exports
.
isFragment
=
isFragment
;
exports
.
isLazy
=
isLazy
;
exports
.
isMemo
=
isMemo
;
exports
.
isPortal
=
isPortal
;
exports
.
isProfiler
=
isProfiler
;
exports
.
isStrictMode
=
isStrictMode
;
exports
.
isSuspense
=
isSuspense
;
exports
.
isValidElementType
=
isValidElementType
;
exports
.
typeOf
=
typeOf
;
}
)
(
)
;
}
}
)
;
reactIs_development
.
AsyncMode
;
reactIs_development
.
ConcurrentMode
;
reactIs_development
.
ContextConsumer
;
reactIs_development
.
ContextProvider
;
reactIs_development
.
Element
;
reactIs_development
.
ForwardRef
;
reactIs_development
.
Fragment
;
reactIs_development
.
Lazy
;
reactIs_development
.
Memo
;
reactIs_development
.
Portal
;
reactIs_development
.
Profiler
;
reactIs_development
.
StrictMode
;
reactIs_development
.
Suspense
;
reactIs_development
.
isAsyncMode
;
reactIs_development
.
isConcurrentMode
;
reactIs_development
.
isContextConsumer
;
reactIs_development
.
isContextProvider
;
reactIs_development
.
isElement
;
reactIs_development
.
isForwardRef
;
reactIs_development
.
isFragment
;
reactIs_development
.
isLazy
;
reactIs_development
.
isMemo
;
reactIs_development
.
isPortal
;
reactIs_development
.
isProfiler
;
reactIs_development
.
isStrictMode
;
reactIs_development
.
isSuspense
;
reactIs_development
.
isValidElementType
;
reactIs_development
.
typeOf
;
createCommonjsModule
(
function
(
module
)
{
if
(
process
.
env
.
NODE_ENV
=
=
=
'
production
'
)
{
module
.
exports
=
reactIs_production_min
;
}
else
{
module
.
exports
=
reactIs_development
;
}
}
)
;
var
ReactPropTypesSecret
=
'
SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED
'
;
var
ReactPropTypesSecret_1
=
ReactPropTypesSecret
;
function
emptyFunction
(
)
{
}
function
emptyFunctionWithReset
(
)
{
}
emptyFunctionWithReset
.
resetWarningCache
=
emptyFunction
;
var
factoryWithThrowingShims
=
function
(
)
{
function
shim
(
props
propName
componentName
location
propFullName
secret
)
{
if
(
secret
=
=
=
ReactPropTypesSecret_1
)
{
/
/
It
is
still
safe
when
called
from
React
.
return
;
}
var
err
=
new
Error
(
'
Calling
PropTypes
validators
directly
is
not
supported
by
the
prop
-
types
package
.
'
+
'
Use
PropTypes
.
checkPropTypes
(
)
to
call
them
.
'
+
'
Read
more
at
http
:
/
/
fb
.
me
/
use
-
check
-
prop
-
types
'
)
;
err
.
name
=
'
Invariant
Violation
'
;
throw
err
;
}
shim
.
isRequired
=
shim
;
function
getShim
(
)
{
return
shim
;
}
/
/
Important
!
/
/
Keep
this
list
in
sync
with
production
version
in
.
/
factoryWithTypeCheckers
.
js
.
var
ReactPropTypes
=
{
array
:
shim
bigint
:
shim
bool
:
shim
func
:
shim
number
:
shim
object
:
shim
string
:
shim
symbol
:
shim
any
:
shim
arrayOf
:
getShim
element
:
shim
elementType
:
shim
instanceOf
:
getShim
node
:
shim
objectOf
:
getShim
oneOf
:
getShim
oneOfType
:
getShim
shape
:
getShim
exact
:
getShim
checkPropTypes
:
emptyFunctionWithReset
resetWarningCache
:
emptyFunction
}
;
ReactPropTypes
.
PropTypes
=
ReactPropTypes
;
return
ReactPropTypes
;
}
;
var
pt
=
createCommonjsModule
(
function
(
module
)
{
{
/
/
By
explicitly
using
prop
-
types
you
are
opting
into
new
production
behavior
.
/
/
http
:
/
/
fb
.
me
/
prop
-
types
-
in
-
prod
module
.
exports
=
factoryWithThrowingShims
(
)
;
}
}
)
;
export
{
pt
as
default
}
;
