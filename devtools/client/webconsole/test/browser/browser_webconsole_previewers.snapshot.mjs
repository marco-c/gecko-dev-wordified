/
*
Any
copyright
is
dedicated
to
the
Public
Domain
.
http
:
/
/
creativecommons
.
org
/
publicdomain
/
zero
/
1
.
0
/
*
/
/
*
*
THIS
FILE
IS
AUTOGENERATED
.
DO
NOT
MODIFY
BY
HAND
.
*
*
More
info
in
https
:
/
/
firefox
-
source
-
docs
.
mozilla
.
org
/
devtools
/
tests
/
js
-
object
-
tests
.
html
*
/
export
default
[
/
/
undefined
"
undefined
"
/
/
null
"
null
"
/
/
true
"
true
"
/
/
false
"
false
"
/
/
NaN
"
NaN
"
/
/
"
abc
"
"
\
"
abc
\
"
"
/
/
"
"
"
\
"
\
"
"
/
/
42
"
42
"
/
/
-
42
"
-
42
"
/
/
-
0
"
-
0
"
/
/
Infinity
"
Infinity
"
/
/
BigInt
(
1000000000000000000
)
"
1000000000000000000n
"
/
/
1n
"
1n
"
/
/
-
2n
"
-
2n
"
/
/
0n
"
0n
"
/
/
(
{
}
)
"
Object
{
}
"
/
/
(
{
foo
:
"
bar
"
}
)
"
Object
{
foo
:
\
"
bar
\
"
}
"
/
/
[
]
"
Array
[
]
"
/
/
[
1
]
"
Array
[
1
]
"
/
/
[
"
foo
"
]
"
Array
[
\
"
foo
\
"
]
"
/
/
new
BigInt64Array
(
)
"
BigInt64Array
[
]
"
/
/
const
a
=
new
BigInt64Array
(
1
)
;
/
/
a
[
0
]
=
BigInt
(
42
)
;
/
/
a
;
/
/
"
BigInt64Array
[
42n
]
"
/
/
new
Map
(
/
/
Array
.
from
(
{
length
:
2
}
)
.
map
(
(
el
i
)
=
>
[
/
/
{
key
:
i
}
/
/
{
object
:
42
}
/
/
]
)
/
/
)
"
Map
{
{
}
{
}
{
}
{
}
}
"
/
/
new
Map
(
Array
.
from
(
{
length
:
20
}
)
.
map
(
(
el
i
)
=
>
[
Symbol
(
i
)
i
]
)
)
"
Map
(
20
)
{
Symbol
(
\
"
0
\
"
)
0
Symbol
(
\
"
1
\
"
)
1
Symbol
(
\
"
2
\
"
)
2
Symbol
(
\
"
3
\
"
)
3
Symbol
(
\
"
4
\
"
)
4
Symbol
(
\
"
5
\
"
)
5
Symbol
(
\
"
6
\
"
)
6
Symbol
(
\
"
7
\
"
)
7
Symbol
(
\
"
8
\
"
)
8
Symbol
(
\
"
9
\
"
)
9
}
"
/
/
new
Map
(
Array
.
from
(
{
length
:
331
}
)
.
map
(
(
el
i
)
=
>
[
Symbol
(
i
)
i
]
)
)
"
Map
(
331
)
{
Symbol
(
\
"
0
\
"
)
0
Symbol
(
\
"
1
\
"
)
1
Symbol
(
\
"
2
\
"
)
2
Symbol
(
\
"
3
\
"
)
3
Symbol
(
\
"
4
\
"
)
4
Symbol
(
\
"
5
\
"
)
5
Symbol
(
\
"
6
\
"
)
6
Symbol
(
\
"
7
\
"
)
7
Symbol
(
\
"
8
\
"
)
8
Symbol
(
\
"
9
\
"
)
9
}
"
/
/
new
Set
(
Array
.
from
(
{
length
:
2
}
)
.
map
(
(
el
i
)
=
>
(
{
value
:
i
}
)
)
)
"
Set
[
{
}
{
}
]
"
/
/
new
Set
(
Array
.
from
(
{
length
:
20
}
)
.
map
(
(
el
i
)
=
>
i
)
)
"
Set
(
20
)
[
0
1
2
3
4
5
6
7
8
9
]
"
/
/
new
Set
(
Array
.
from
(
{
length
:
222
}
)
.
map
(
(
el
i
)
=
>
i
)
)
"
Set
(
222
)
[
0
1
2
3
4
5
6
7
8
9
]
"
/
/
new
Temporal
.
Instant
(
355924804000000000n
)
"
Temporal
.
Instant
1981
-
04
-
12T12
:
00
:
04Z
"
/
/
new
Temporal
.
PlainDate
(
2021
7
1
"
coptic
"
)
"
Temporal
.
PlainDate
2021
-
07
-
01
[
u
-
ca
=
coptic
]
"
/
/
new
Temporal
.
PlainDateTime
(
2021
7
1
0
0
0
0
0
0
"
gregory
"
)
"
Temporal
.
PlainDateTime
2021
-
07
-
01T00
:
00
:
00
[
u
-
ca
=
gregory
]
"
/
/
new
Temporal
.
PlainMonthDay
(
7
1
"
chinese
"
)
"
Temporal
.
PlainMonthDay
1972
-
07
-
01
[
u
-
ca
=
chinese
]
"
/
/
new
Temporal
.
PlainTime
(
4
20
)
"
Temporal
.
PlainTime
04
:
20
:
00
"
/
/
new
Temporal
.
PlainYearMonth
(
2021
7
"
indian
"
)
"
Temporal
.
PlainYearMonth
2021
-
07
-
01
[
u
-
ca
=
indian
]
"
/
/
new
Temporal
.
ZonedDateTime
(
0n
"
America
/
New_York
"
)
"
Temporal
.
ZonedDateTime
1969
-
12
-
31T19
:
00
:
00
-
05
:
00
[
America
/
New_York
]
"
/
/
Temporal
.
Duration
.
from
(
{
years
:
1
}
)
"
Temporal
.
Duration
P1Y
"
/
/
myPolicy
.
createHTML
(
"
hello
"
)
"
TrustedHTML
\
"
<
my
-
policy
>
hello
<
/
my
-
policy
>
\
"
"
/
/
myPolicy
.
createScript
(
"
const
hello
=
'
world
'
"
)
"
TrustedScript
\
"
/
*
myPolicy
*
/
const
hello
=
'
world
'
\
"
"
/
/
myPolicy
.
createScriptURL
(
"
https
:
/
/
example
.
com
/
trusted
"
)
"
TrustedScriptURL
https
:
/
/
example
.
com
/
trusted
?
myPolicy
"
/
/
const
formData
=
new
FormData
(
)
;
/
/
formData
.
append
(
"
a
"
1
)
;
/
/
formData
.
append
(
"
a
"
2
)
;
/
/
formData
.
append
(
"
b
"
3
)
;
/
/
formData
;
/
/
"
FormData
(
3
)
{
a
\
"
1
\
"
a
\
"
2
\
"
b
\
"
3
\
"
}
"
/
/
customElements
.
define
(
"
fx
-
test
"
class
extends
HTMLElement
{
}
)
;
/
/
const
{
states
}
=
document
.
createElement
(
"
fx
-
test
"
)
.
attachInternals
(
)
;
/
/
states
.
add
(
"
custom
-
state
"
)
;
/
/
states
.
add
(
"
another
-
custom
-
state
"
)
;
/
/
states
;
/
/
"
CustomStateSet
[
\
"
custom
-
state
\
"
\
"
another
-
custom
-
state
\
"
]
"
/
/
CSS
.
highlights
.
set
(
"
search
"
new
Highlight
(
)
)
;
/
/
CSS
.
highlights
.
set
(
"
glow
"
new
Highlight
(
)
)
;
/
/
CSS
.
highlights
.
set
(
"
anchor
"
new
Highlight
(
)
)
;
/
/
CSS
.
highlights
;
/
/
"
HighlightRegistry
(
3
)
{
search
Highlight
glow
Highlight
anchor
Highlight
}
"
/
/
new
URLSearchParams
(
[
/
/
[
"
a
"
1
]
/
/
[
"
a
"
2
]
/
/
[
"
b
"
3
]
/
/
[
"
b
"
3
]
/
/
[
"
b
"
5
]
/
/
[
"
c
"
"
this
is
6
"
]
/
/
[
"
d
"
7
]
/
/
[
"
e
"
8
]
/
/
[
"
f
"
9
]
/
/
[
"
g
"
10
]
/
/
[
"
h
"
11
]
/
/
]
)
"
URLSearchParams
(
11
)
{
a
\
"
1
\
"
a
\
"
2
\
"
b
\
"
3
\
"
b
\
"
3
\
"
b
\
"
5
\
"
c
\
"
this
is
6
\
"
d
\
"
7
\
"
e
\
"
8
\
"
f
\
"
9
\
"
g
\
"
10
\
"
}
"
/
/
new
Error
(
"
foo
"
)
"
Error
:
foo
"
/
/
throw
new
Error
(
"
Long
error
"
.
repeat
(
10000
)
)
;
"
Uncaught
Error
:
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
Long
error
\
ndebugger
eval
code
:
1
:
7
"
/
/
throw
https
:
/
/
evil
.
com
/
?
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
is
evil
and
https
:
/
/
not
-
so
-
evil
.
com
/
?
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
is
not
good
either
;
/
/
"
Uncaught
https
:
/
/
evil
.
com
/
?
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
is
evil
and
https
:
/
/
not
-
so
-
evil
.
com
/
?
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
is
not
good
either
\
ndebugger
eval
code
:
2
:
7
"
/
/
Error
(
"
bar
"
)
"
Error
:
bar
"
/
/
function
bar
(
)
{
/
/
asdf
(
)
;
/
/
}
/
/
function
foo
(
)
{
/
/
bar
(
)
;
/
/
}
/
/
/
/
foo
(
)
;
/
/
"
Uncaught
ReferenceError
:
asdf
is
not
defined
[
Learn
More
]
\
ndebugger
eval
code
:
3
:
9
"
/
/
eval
(
"
let
a
a
"
)
"
Uncaught
SyntaxError
:
redeclaration
of
let
a
[
Learn
More
]
\
ndebugger
eval
code
:
1
:
1
\
nnote
:
Previously
declared
at
line
1
column
5
\
ndebugger
eval
code
:
1
:
5
"
/
/
throw
"
"
;
"
Uncaught
<
empty
string
>
\
ndebugger
eval
code
:
1
:
1
"
/
/
throw
false
;
"
Uncaught
false
\
ndebugger
eval
code
:
1
:
1
"
/
/
throw
undefined
;
"
Uncaught
undefined
\
ndebugger
eval
code
:
1
:
1
"
/
/
throw
0
;
"
Uncaught
0
\
ndebugger
eval
code
:
1
:
1
"
/
/
throw
{
vegetable
:
"
cucumber
"
}
;
"
Uncaught
\
nObject
{
vegetable
:
\
"
cucumber
\
"
}
\
ndebugger
eval
code
:
1
:
1
"
/
/
throw
Symbol
(
"
potato
"
)
;
"
Uncaught
Symbol
(
\
"
potato
\
"
)
\
ndebugger
eval
code
:
1
:
7
"
/
/
var
err
=
new
Error
(
"
pineapple
"
)
;
/
/
err
.
name
=
"
JuicyError
"
;
/
/
err
.
flavor
=
"
delicious
"
;
/
/
throw
err
;
/
/
"
Uncaught
JuicyError
:
pineapple
\
ndebugger
eval
code
:
5
:
7
"
/
/
var
originalError
=
new
SyntaxError
(
"
original
error
"
)
;
/
/
var
err
=
new
Error
(
"
something
went
wrong
"
{
/
/
cause
:
originalError
/
/
}
)
;
/
/
throw
err
;
/
/
"
Uncaught
Error
:
something
went
wrong
\
nCaused
by
:
SyntaxError
:
original
error
\
ndebugger
eval
code
:
6
:
7
"
/
/
var
a
=
new
Error
(
"
err
-
a
"
)
;
/
/
var
b
=
new
Error
(
"
err
-
b
"
{
cause
:
a
}
)
;
/
/
var
c
=
new
Error
(
"
err
-
c
"
{
cause
:
b
}
)
;
/
/
var
d
=
new
Error
(
"
err
-
d
"
{
cause
:
c
}
)
;
/
/
throw
d
;
/
/
"
Uncaught
SyntaxError
:
redeclaration
of
const
a
[
Learn
More
]
\
ndebugger
eval
code
:
1
:
1
"
/
/
var
a
=
new
Error
(
"
err
-
a
"
{
cause
:
b
}
)
;
/
/
var
b
=
new
Error
(
"
err
-
b
"
{
cause
:
a
}
)
;
/
/
throw
b
;
/
/
"
Uncaught
SyntaxError
:
redeclaration
of
const
a
[
Learn
More
]
\
ndebugger
eval
code
:
1
:
1
"
/
/
throw
new
Error
(
"
null
cause
"
{
cause
:
null
}
)
;
"
Uncaught
Error
:
null
cause
\
nCaused
by
:
null
\
ndebugger
eval
code
:
1
:
7
"
/
/
throw
new
Error
(
"
number
cause
"
{
cause
:
0
}
)
;
"
Uncaught
Error
:
number
cause
\
nCaused
by
:
0
\
ndebugger
eval
code
:
1
:
7
"
/
/
throw
new
Error
(
"
string
cause
"
{
cause
:
"
cause
message
"
}
)
;
"
Uncaught
Error
:
string
cause
\
nCaused
by
:
\
"
cause
message
\
"
\
ndebugger
eval
code
:
1
:
7
"
/
/
throw
new
Error
(
"
object
cause
"
{
/
/
cause
:
{
code
:
234
message
:
"
ERR_234
"
}
/
/
}
)
;
/
/
"
Uncaught
Error
:
object
cause
\
nCaused
by
:
Object
{
}
\
ndebugger
eval
code
:
2
:
13
"
/
/
Promise
.
reject
(
"
"
)
"
Promise
{
<
state
>
:
\
"
rejected
\
"
<
reason
>
:
\
"
\
"
}
"
/
/
Promise
.
reject
(
"
tomato
"
)
"
Promise
{
<
state
>
:
\
"
rejected
\
"
<
reason
>
:
\
"
tomato
\
"
}
"
/
/
Promise
.
reject
(
false
)
"
Promise
{
<
state
>
:
\
"
rejected
\
"
<
reason
>
:
false
}
"
/
/
Promise
.
reject
(
0
)
"
Promise
{
<
state
>
:
\
"
rejected
\
"
<
reason
>
:
0
}
"
/
/
Promise
.
reject
(
null
)
"
Promise
{
<
state
>
:
\
"
rejected
\
"
<
reason
>
:
null
}
"
/
/
Promise
.
reject
(
undefined
)
"
Promise
{
<
state
>
:
\
"
rejected
\
"
<
reason
>
:
undefined
}
"
/
/
Promise
.
reject
(
Symbol
(
"
potato
"
)
)
"
Promise
{
<
state
>
:
\
"
rejected
\
"
<
reason
>
:
Symbol
(
\
"
potato
\
"
)
}
"
/
/
Promise
.
reject
(
{
vegetable
:
"
cucumber
"
}
)
"
Promise
{
<
state
>
:
\
"
rejected
\
"
<
reason
>
:
{
}
}
"
/
/
Promise
.
reject
(
new
Error
(
"
pumpkin
"
)
)
"
Promise
{
<
state
>
:
\
"
rejected
\
"
<
reason
>
:
Error
}
"
/
/
var
err
=
new
Error
(
"
pineapple
"
)
;
/
/
err
.
name
=
"
JuicyError
"
;
/
/
err
.
flavor
=
"
delicious
"
;
/
/
Promise
.
reject
(
err
)
;
/
/
"
Promise
{
<
state
>
:
\
"
rejected
\
"
<
reason
>
:
JuicyError
}
"
/
/
Promise
.
resolve
(
)
.
then
(
(
)
=
>
{
/
/
try
{
/
/
unknownFunc
(
)
;
/
/
}
catch
(
e
)
{
/
/
throw
new
Error
(
"
something
went
wrong
"
{
cause
:
e
}
)
/
/
}
/
/
}
)
"
Promise
{
<
state
>
:
\
"
rejected
\
"
<
reason
>
:
Error
}
"
]
;
