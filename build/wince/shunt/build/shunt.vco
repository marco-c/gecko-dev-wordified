>
I
"
#
%
&
'
(
)
*
-
.
/
0
1
2
3
4
6
7
8
9
:
;
<
=
>
A
B
C
D
E
F
G
H
K
L
M
N
O
P
Q
R
S
U
V
W
X
Y
Z
[
\
]
^
_
R
o
o
t
E
n
t
r
y
W
o
r
k
s
p
a
c
e
S
t
a
t
e
B
r
o
w
s
e
r
E
d
i
t
o
r
shunt
:
C
:
\
builds
\
minimo
\
mozilla
\
build
\
wince
\
shunt
\
build
\
shunt
.
vcp
CALL
__thiscall
#
define
AFX_NOVTABLE
#
define
AFXAPI
__stdcall
#
define
AFXISAPI
__stdcall
#
define
AFXISAPI_CDECL
__cdecl
#
define
AFXOLEAPI
__stdcall
#
define
BASED_CODE
#
define
BASED_DEBUG
#
define
BASED_STACK
#
define
BEGIN_DUAL_INTERFACE_PART
(
localClass
baseClass
)
class
X
#
#
localClass
:
public
baseClass
{
public
:
BEGIN_COM_MAP
(
X
#
#
localClass
localClass
)
COM_INTERFACE_ENTRY
(
baseClass
)
END_COM_MAP
(
)
#
define
BEGIN_INTERFACE_PART
(
localClass
baseClass
)
class
X
#
#
localClass
:
public
baseClass
{
public
:
BEGIN_COM_MAP
(
X
#
#
localClass
localClass
)
COM_INTERFACE_ENTRY
(
baseClass
)
END_COM_MAP
(
)
public
:
virtual
ULONG
STDMETHODCALLTYPE
AddRef
(
)
;
virtual
ULONG
STDMETHODCALLTYPE
Release
(
)
;
virtual
HRESULT
STDMETHODCALLTYPE
QueryInterface
(
REFIID
iid
void
*
*
ppvObj
)
;
#
define
BEGIN_CONNECTION_PART
(
theClass
localClass
)
class
X
#
#
localClass
:
public
CConnectionPoint
{
public
:
X
#
#
localClass
(
)
{
m_nOffset
=
offsetof
(
theClass
m_x
#
#
localClass
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
class_name
)
#
define
DECLARE_OLECREATh
!
E_EX
(
class_name
)
#
define
DECLARE_OLECTLTYPE
(
class_name
)
#
define
DECLARE_OLETYPELIB
(
class_name
)
#
define
DECLARE_ONLY_AGGREGATABLE
(
x
)
#
define
DECLARE_OPAQUE32
(
x
)
#
define
DECLARE_PARSE_MAP
(
)
#
define
DECLARE_POLY_AGGREGATABLE
(
x
)
#
define
DECLARE_PROPERTY_SUPPORT
(
class
)
#
define
DECLARE_PROPPAGEIDS
(
class_name
)
#
define
DECLARE_PROTECT_FINAL_CONSTRUCT
(
)
#
define
DECLARE_REGISTRY
(
class
pid
vpid
nid
flags
)
#
define
DECLARE_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_SERIAL
(
class_name
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_VIEW_STATUS
(
statusFlags
)
#
define
DECLARE_WND_CLASS
(
WndClassName
)
#
define
DECLARE_WND_SUPERCLASS
(
WndClassName
OrigWndClassName
)
#
define
DEFINE_COMMAND
(
x
szCommand
)
#
define
DELEGATE_DUAL_INTERFACE
(
objectClass
dualClass
)
#
define
END_CONNECTION_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_DUAL_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
EXTERN_PROCESS_LOCAL
(
class_name
ident_name
)
extern
AFX_DATA
PROCESS_LOCAL
(
class_name
ident_name
)
#
define
EXT_SNAPINMENUID
(
id
)
#
define
IMPLEMENT_DUAL_ERRORINFO
(
objectClass
riidSource
)
#
define
IMPLEMENT_DYNAMIC
(
class_name
base_class_name
)
#
define
IMPLEMENT_DYNCREATE
(
class_name
base_class_name
)
#
define
IMPLEMENT_OLECREATE
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECREATE_EX
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECTLTYPE
(
class_name
idsUserTypeName
dwOleMisc
)
#
define
IMPLEMENT_OLETYPELIB
(
class_name
tlid
wVerMajor
wVerMinor
)
#
define
IMPLEMENT_SERIAL
(
class_name
base_class_name
wSchema
)
#
define
INIT_INTERFACE_PART
(
theClass
localClass
)
#
define
PROCESS_LOCAL
(
class_name
ident_name
)
AFX_DATADEF
CProcessLocal
<
class_name
>
ident_name
;
#
define
PURE
=
0
#
define
SNAPINMENUID
(
id
)
#
define
THIS
void
#
define
THIS_
#
define
TR
x
2
x
2
s
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
clas
C
:
\
builds
\
minimo
\
mozilla
\
build
\
wince
\
shunt
\
build
\
shunt
.
vcp
CALL
__thiscall
#
define
AFX_NOVTABLE
#
define
AFXAPI
__stdcall
#
define
AFXISAPI
__stdcall
#
define
AFXISAPI_CDECL
__cdecl
#
define
AFXOLEAPI
__stdcall
#
define
BASED_CODE
#
define
BASED_DEBUG
#
define
BASED_STACK
#
define
BEGIN_DUAL_INTERFACE_PART
(
localClass
baseClass
)
class
X
#
#
localClass
:
public
baseClass
{
public
:
BEGIN_COM_MAP
(
X
#
#
localClass
localClass
)
COM_INTERFACE_ENTRY
(
baseClass
)
END_COM_MAP
(
)
#
define
BEGIN_INTERFACE_PART
(
localClass
baseClass
)
class
X
#
#
localClass
:
public
baseClass
{
public
:
BEGIN_COM_MAP
(
X
#
#
localClass
localClass
)
COM_INTERFACE_ENTRY
(
baseClass
)
END_COM_MAP
(
)
public
:
virtual
ULONG
STDMETHODCALLTYPE
AddRef
(
)
;
virtual
ULONG
STDMETHODCALLTYPE
Release
(
)
;
virtual
HRESULT
STDMETHODCALLTYPE
QueryInterface
(
REFIID
iid
void
*
*
ppvObj
)
;
#
define
BEGIN_CONNECTION_PART
(
theClass
localClass
)
class
X
#
#
localClass
:
public
CConnectionPoint
{
public
:
X
#
#
localClass
(
)
{
m_nOffset
=
offsetof
(
theClass
m_x
#
#
localClass
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
class_name
)
#
define
DECLARE_OLECREATh
!
E_EX
(
class_name
)
#
define
DECLARE_OLECTLTYPE
(
class_name
)
#
define
DECLARE_OLETYPELIB
(
class_name
)
#
define
DECLARE_ONLY_AGGREGATABLE
(
x
)
#
define
DECLARE_OPAQUE32
(
x
)
#
define
DECLARE_PARSE_MAP
(
)
#
define
DECLARE_POLY_AGGREGATABLE
(
x
)
#
define
DECLARE_PROPERTY_SUPPORT
(
class
)
#
define
DECLARE_PROPPAGEIDS
(
class_name
)
#
define
DECLARE_PROTECT_FINAL_CONSTRUCT
(
)
#
define
DECLARE_REGISTRY
(
class
pid
vpid
nid
flags
)
#
define
DECLARE_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_SERIAL
(
class_name
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_VIEW_STATUS
(
statusFlags
)
#
define
DECLARE_WND_CLASS
(
WndClassName
)
#
define
DECLARE_WND_SUPERCLASS
(
WndClassName
OrigWndClassName
)
#
define
DEFINE_COMMAND
(
x
szCommand
)
#
define
DELEGATE_DUAL_INTERFACE
(
objectClass
dualClass
)
#
define
END_CONNECTION_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_DUAL_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
EXTERN_PROCESS_LOCAL
(
class_name
ident_name
)
extern
AFX_DATA
PROCESS_LOCAL
(
class_name
ident_name
)
#
define
EXT_SNAPINMENUID
(
id
)
#
define
IMPLEMENT_DUAL_ERRORINFO
(
objectClass
riidSource
)
#
define
IMPLEMENT_DYNAMIC
(
class_name
base_class_name
)
#
define
IMPLEMENT_DYNCREATE
(
class_name
base_class_name
)
#
define
IMPLEMENT_OLECREATE
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECREATE_EX
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECTLTYPE
(
class_name
idsUserTypeName
dwOleMisc
)
#
define
IMPLEMENT_OLETYPELIB
(
class_name
tlid
wVerMajor
wVerMinor
)
#
define
IMPLEMENT_SERIAL
(
class_name
base_class_name
wSchema
)
#
define
INIT_INTERFACE_PART
(
theClass
localClass
)
#
define
PROCESS_LOCAL
(
class_name
ident_name
)
AFX_DATADEF
CProcessLocal
<
class_name
>
ident_name
;
#
define
PURE
=
0
#
define
SNAPINMENUID
(
id
)
#
define
THIS
void
#
define
THIS_
#
define
TR
x
2
x
2
s
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
clas
MLJL
C
:
\
builds
\
minimo
\
mozilla
\
build
\
wince
\
shunt
\
build
\
shunt
.
vcp
CALL
__thiscall
#
define
AFX_NOVTABLE
#
define
AFXAPI
__stdcall
#
define
AFXISAPI
__stdcall
#
define
AFXISAPI_CDECL
__cdecl
#
define
AFXOLEAPI
__stdcall
#
define
BASED_CODE
#
define
BASED_DEBUG
#
define
BASED_STACK
#
define
BEGIN_DUAL_INTERFACE_PART
(
localClass
baseClass
)
class
X
#
#
localClass
:
public
baseClass
{
public
:
BEGIN_COM_MAP
(
X
#
#
localClass
localClass
)
COM_INTERFACE_ENTRY
(
baseClass
)
END_COM_MAP
(
)
#
define
BEGIN_INTERFACE_PART
(
localClass
baseClass
)
class
X
#
#
localClass
:
public
baseClass
{
public
:
BEGIN_COM_MAP
(
X
#
#
localClass
localClass
)
COM_INTERFACE_ENTRY
(
baseClass
)
END_COM_MAP
(
)
public
:
virtual
ULONG
STDMETHODCALLTYPE
AddRef
(
)
;
virtual
ULONG
STDMETHODCALLTYPE
Release
(
)
;
virtual
HRESULT
STDMETHODCALLTYPE
QueryInterface
(
REFIID
iid
void
*
*
ppvObj
)
;
#
define
BEGIN_CONNECTION_PART
(
theClass
localClass
)
class
X
#
#
localClass
:
public
CConnectionPoint
{
public
:
X
#
#
localClass
(
)
{
m_nOffset
=
offsetof
(
theClass
m_x
#
#
localClass
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
class_name
)
#
define
DECLARE_OLECREATh
!
E_EX
(
class_name
)
#
define
DECLARE_OLECTLTYPE
(
class_name
)
#
define
DECLARE_OLETYPELIB
(
class_name
)
#
define
DECLARE_ONLY_AGGREGATABLE
(
x
)
#
define
DECLARE_OPAQUE32
(
x
)
#
define
DECLARE_PARSE_MAP
(
)
#
define
DECLARE_POLY_AGGREGATABLE
(
x
)
#
define
DECLARE_PROPERTY_SUPPORT
(
class
)
#
define
DECLARE_PROPPAGEIDS
(
class_name
)
#
define
DECLARE_PROTECT_FINAL_CONSTRUCT
(
)
#
define
DECLARE_REGISTRY
(
class
pid
vpid
nid
flags
)
#
define
DECLARE_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_SERIAL
(
class_name
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_VIEW_STATUS
(
statusFlags
)
#
define
DECLARE_WND_CLASS
(
WndClassName
)
#
define
DECLARE_WND_SUPERCLASS
(
WndClassName
OrigWndClassName
)
#
define
DEFINE_COMMAND
(
x
szCommand
)
#
define
DELEGATE_DUAL_INTERFACE
(
objectClass
dualClass
)
#
define
END_CONNECTION_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_DUAL_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
EXTERN_PROCESS_LOCAL
(
class_name
ident_name
)
extern
AFX_DATA
PROCESS_LOCAL
(
class_name
ident_name
)
#
define
EXT_SNAPINMENUID
(
id
)
#
define
IMPLEMENT_DUAL_ERRORINFO
(
objectClass
riidSource
)
#
define
IMPLEMENT_DYNAMIC
(
class_name
base_class_name
)
#
define
IMPLEMENT_DYNCREATE
(
class_name
base_class_name
)
#
define
IMPLEMENT_OLECREATE
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECREATE_EX
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECTLTYPE
(
class_name
idsUserTypeName
dwOleMisc
)
#
define
IMPLEMENT_OLETYPELIB
(
class_name
tlid
wVerMajor
wVerMinor
)
#
define
IMPLEMENT_SERIAL
(
class_name
base_class_name
wSchema
)
#
define
INIT_INTERFACE_PART
(
theClass
localClass
)
#
define
PROCESS_LOCAL
(
class_name
ident_name
)
AFX_DATADEF
CProcessLocal
<
class_name
>
ident_name
;
#
define
PURE
=
0
#
define
SNAPINMENUID
(
id
)
#
define
THIS
void
#
define
THIS_
#
define
TR
x
2
x
2
s
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
clasW
o
r
k
s
p
a
c
e
W
i
n
d
o
w
"
!
I
P
I
_
s
h
u
n
t
+
I
P
I
_
5
C
l
a
s
s
V
i
e
w
W
i
n
d
o
w
"
?
shunt
ClassView
<
EOR
>
<
EOR
>
<
EOR
>
shunt
classes
<
EOR
>
shunt
classes
<
EOR
>
FileView
<
EOR
>
Workspace
'
shunt
'
:
1
project
(
s
)
shunt
files
Source
Files
Header
Files
<
EOR
>
<
EOR
>
shunt
files
<
EOR
>
shunt
files
<
EOR
>
<
EOR
>
FileView
<
EOR
>
BASED_CODE
#
define
BASED_DEBUG
#
define
BASED_STACK
#
define
BEGIN_DUAL_INTERFACE_PART
(
localClass
baseClass
)
class
X
#
#
localClass
:
public
baseClass
{
public
:
BEGIN_COM_MAP
(
X
#
#
localClass
localClass
)
COM_INTERFACE_ENTRY
(
baseClass
)
END_COM_MAP
(
)
#
define
BEGIN_INTERFACE_PART
(
localClass
baseClass
)
class
X
#
#
localClass
:
public
baseClass
{
public
:
BEGIN_COM_MAP
(
X
#
#
localClass
localClass
)
COM_INTERFACE_ENTRY
(
baseClass
)
END_COM_MAP
(
)
public
:
virtual
ULONG
STDMETHODCALLTYPE
AddRef
(
)
;
virtual
ULONG
STDMETHODCALLTYPE
Release
(
)
;
virtual
HRESULT
STDMETHODCALLTYPE
QueryInterface
(
REFIID
iid
void
*
*
ppvObj
)
;
#
define
BEGIN_CONNECTION_PART
(
theClass
localClass
)
class
X
#
#
localClass
:
public
CConnectionPoint
{
public
:
X
#
#
localClass
(
)
{
m_nOffset
=
offsetof
(
theClass
m_x
#
#
localClass
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
class_name
)
#
define
DECLARE_OLECREATh
!
E_EX
(
class_name
)
#
define
DECLARE_OLECTLTYPE
(
class_name
)
#
define
DECLARE_OLETYPELIB
(
class_name
)
#
define
DECLARE_ONLY_AGGREGATABLE
(
x
)
#
define
DECLARE_OPAQUE32
(
x
)
#
define
DECLARE_PARSE_MAP
(
)
#
define
DECLARE_POLY_AGGREGATABLE
(
x
)
#
define
DECLARE_PROPERTY_SUPPORT
(
class
)
#
define
DECLARE_PROPPAGEIDS
(
class_name
)
#
define
DECLARE_PROTECT_FINAL_CONSTRUCT
(
)
#
define
DECLARE_REGISTRY
(
class
pid
vpid
nid
flags
)
#
define
DECLARE_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_SERIAL
(
class_name
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_VIEW_STATUS
(
statusFlags
)
#
define
DECLARE_WND_CLASS
(
WndClassName
)
#
define
DECLARE_WND_SUPERCLASS
(
WndClassName
OrigWndClassName
)
#
define
DEFINE_COMMAND
(
x
szCommand
)
#
define
DELEGATE_DUAL_INTERFACE
(
objectClass
dualClass
)
#
define
END_CONNECTION_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_DUAL_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
EXTERN_PROCESS_LOCAL
(
class_name
ident_name
)
extern
AFX_DATA
PROCESS_LOCAL
(
class_name
ident_name
)
#
define
EXT_SNAPINMENUID
(
id
)
#
define
IMPLEMENT_DUAL_ERRORINFO
(
objectClass
riidSource
)
#
define
IMPLEMENT_DYNAMIC
(
class_name
base_class_name
)
#
define
IMPLEMENT_DYNCREATE
(
class_name
base_class_name
)
#
define
IMPLEMENT_OLECREATE
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECREATE_EX
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECTLTYPE
(
class_name
idsUserTypeName
dwOleMisc
)
#
define
IMPLEMENT_OLETYPELIB
(
class_name
tlid
wVerMajor
wVerMinor
)
#
define
IMPLEMENT_SERIAL
(
class_name
base_class_name
wSchema
)
#
define
INIT_INTERFACE_PART
(
theClass
localClass
)
#
define
PROCESS_LOCAL
(
class_name
ident_name
)
AFX_DATADEF
CProcessLocal
<
class_name
>
ident_name
;
#
define
PURE
=
0
#
define
SNAPINMENUID
(
id
)
#
define
THIS
void
#
define
THIS_
#
define
TR
x
2
x
2
s
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
clas
(
shunt
-
Win32
(
WCE
ARMV4
)
Debug
shunt
.
vcp
CProject
shunt
-
Win32
(
WCE
ARMV4
)
Debug
!
shunt
-
Win32
(
WCE
ARMV4
)
Release
shunt
-
Win32
(
WCE
ARMV4
)
Debug
SSBR
CTargetItem
!
shunt
-
Win32
(
WCE
ARMV4
)
Release
shunt
-
Win32
(
WCE
ARMV4
)
Debug
SSBR
Source
Files
CProjGroup
SSBR
DJW
Header
Files
CProjGroup
SSBR
sys
CProjGroup
SSBR
DJW
DJW
Resource
Files
CProjGroup
SSBR
DJW
dep
CDependencyContainer
SSBR
kfuncs
.
h
CDependencyFile
SSBR
DJW
dep
CDependencyContainer
SSBR
kfuncs
.
h
CDependencyFile
SSBR
DJW
DJW
DJWACE_ENTRY
(
baseClass
)
END_COM_MAP
(
)
public
:
virtual
ULONG
STDMETHODCALLTYPE
AddRef
(
)
;
virtual
ULONG
STDMETHODCALLTYPE
Release
(
)
;
virtual
HRESULT
STDMETHODCALLTYPE
QueryInterface
(
REFIID
iid
void
*
*
ppvObj
)
;
#
define
BEGIN_CONNECTION_PART
(
theClass
localClass
)
class
X
#
#
localClass
:
public
CConnectionPoint
{
public
:
X
#
#
localClass
(
)
{
m_nOffset
=
offsetof
(
theClass
m_x
#
#
localClass
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
class_name
)
#
define
DECLARE_OLECREATh
!
E_EX
(
class_name
)
#
define
DECLARE_OLECTLTYPE
(
class_name
)
#
define
DECLARE_OLETYPELIB
(
class_name
)
#
define
DECLARE_ONLY_AGGREGATABLE
(
x
)
#
define
DECLARE_OPAQUE32
(
x
)
#
define
DECLARE_PARSE_MAP
(
)
#
define
DECLARE_POLY_AGGREGATABLE
(
x
)
#
define
DECLARE_PROPERTY_SUPPORT
(
class
)
#
define
DECLARE_PROPPAGEIDS
(
class_name
)
#
define
DECLARE_PROTECT_FINAL_CONSTRUCT
(
)
#
define
DECLARE_REGISTRY
(
class
pid
vpid
nid
flags
)
#
define
DECLARE_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_SERIAL
(
class_name
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_VIEW_STATUS
(
statusFlags
)
#
define
DECLARE_WND_CLASS
(
WndClassName
)
#
define
DECLARE_WND_SUPERCLASS
(
WndClassName
OrigWndClassName
)
#
define
DEFINE_COMMAND
(
x
szCommand
)
#
define
DELEGATE_DUAL_INTERFACE
(
objectClass
dualClass
)
#
define
END_CONNECTION_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_DUAL_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
EXTERN_PROCESS_LOCAL
(
class_name
ident_name
)
extern
AFX_DATA
PROCESS_LOCAL
(
class_name
ident_name
)
#
define
EXT_SNAPINMENUID
(
id
)
#
define
IMPLEMENT_DUAL_ERRORINFO
(
objectClass
riidSource
)
#
define
IMPLEMENT_DYNAMIC
(
class_name
base_class_name
)
#
define
IMPLEMENT_DYNCREATE
(
class_name
base_class_name
)
#
define
IMPLEMENT_OLECREATE
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECREATE_EX
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECTLTYPE
(
class_name
idsUserTypeName
dwOleMisc
)
#
define
IMPLEMENT_OLETYPELIB
(
class_name
tlid
wVerMajor
wVerMinor
)
#
define
IMPLEMENT_SERIAL
(
class_name
base_class_name
wSchema
)
#
define
INIT_INTERFACE_PART
(
theClass
localClass
)
#
define
PROCESS_LOCAL
(
class_name
ident_name
)
AFX_DATADEF
CProcessLocal
<
class_name
>
ident_name
;
#
define
PURE
=
0
#
define
SNAPINMENUID
(
id
)
#
define
THIS
void
#
define
THIS_
#
define
TR
x
2
x
2
s
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
clas
(
WCE
POCKET
PC
2003
ITLDevice
POCKET
PC
2003
DeviceV4
)
Debug
!
shunt
-
Win32
(
WCE
ARMV4
)
Release
shunt
-
Win32
(
WCE
ARMV4
)
Debug
SSBR
CTargetItem
!
shunt
-
Win32
(
WCE
ARMV4
)
Release
shunt
-
Win32
(
WCE
ARMV4
)
Debug
SSBR
Source
Files
CProjGroup
SSBR
DJW
Header
Files
CProjGroup
SSBR
sys
CProjGroup
SSBR
DJW
DJW
Resource
Files
CProjGroup
SSBR
DJW
dep
CDependencyContainer
SSBR
kfuncs
.
h
CDependencyFile
SSBR
DJW
dep
CDependencyContainer
SSBR
kfuncs
.
h
CDependencyFile
SSBR
DJW
DJW
DJWACE_ENTRY
(
baseClass
)
END_COM_MAP
(
)
public
:
virtual
ULONG
STDMETHODCALLTYPE
AddRef
(
)
;
virtual
ULONG
STDMETHODCALLTYPE
Release
(
)
;
virtual
HRESULT
STDMETHODCALLTYPE
QueryInterface
(
REFIID
iid
void
*
*
ppvObj
)
;
#
define
BEGIN_CONNECTION_PART
(
theClass
localClass
)
class
X
#
#
localClass
:
public
CConnectionPoint
{
public
:
X
#
#
localClass
(
)
{
m_nOffset
=
offsetof
(
theClass
m_x
#
#
localClass
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
class_name
)
#
define
DECLARE_OLECREATh
!
E_EX
(
class_name
)
#
define
DECLARE_OLECTLTYPE
(
class_name
)
#
define
DECLARE_OLETYPELIB
(
class_name
)
#
define
DECLARE_ONLY_AGGREGATABLE
(
x
)
#
define
DECLARE_OPAQUE32
(
x
)
#
define
DECLARE_PARSE_MAP
(
)
#
define
DECLARE_POLY_AGGREGATABLE
(
x
)
#
define
DECLARE_PROPERTY_SUPPORT
(
class
)
#
define
DECLARE_PROPPAGEIDS
(
class_name
)
#
define
DECLARE_PROTECT_FINAL_CONSTRUCT
(
)
#
define
DECLARE_REGISTRY
(
class
pid
vpid
nid
flags
)
#
define
DECLARE_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_SERIAL
(
class_name
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_VIEW_STATUS
(
statusFlags
)
#
define
DECLARE_WND_CLASS
(
WndClassName
)
#
define
DECLARE_WND_SUPERCLASS
(
WndClassName
OrigWndClassName
)
#
define
DEFINE_COMMAND
(
x
szCommand
)
#
define
DELEGATE_DUAL_INTERFACE
(
objectClass
dualClass
)
#
define
END_CONNECTION_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_DUAL_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
EXTERN_PROCESS_LOCAL
(
class_name
ident_name
)
extern
AFX_DATA
PROCESS_LOCAL
(
class_name
ident_name
)
#
define
EXT_SNAPINMENUID
(
id
)
#
define
IMPLEMENT_DUAL_ERRORINFO
(
objectClass
riidSource
)
#
define
IMPLEMENT_DYNAMIC
(
class_name
base_class_name
)
#
define
IMPLEMENT_DYNCREATE
(
class_name
base_class_name
)
#
define
IMPLEMENT_OLECREATE
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECREATE_EX
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECTLTYPE
(
class_name
idsUserTypeName
dwOleMisc
)
#
define
IMPLEMENT_OLETYPELIB
(
class_name
tlid
wVerMajor
wVerMinor
)
#
define
IMPLEMENT_SERIAL
(
class_name
base_class_name
wSchema
)
#
define
INIT_INTERFACE_PART
(
theClass
localClass
)
#
define
PROCESS_LOCAL
(
class_name
ident_name
)
AFX_DATADEF
CProcessLocal
<
class_name
>
ident_name
;
#
define
PURE
=
0
#
define
SNAPINMENUID
(
id
)
#
define
THIS
void
#
define
THIS_
#
define
TR
x
2
x
2
s
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
clas
CClsFldSlob
shunt
WCE
POCKET
PC
2003
ITLDevice
POCKET
PC
2003
DeviceV4
)
Debug
!
shunt
-
Win32
(
WCE
ARMV4
)
Release
shunt
-
Win32
(
WCE
ARMV4
)
Debug
SSBR
CTargetItem
!
shunt
-
Win32
(
WCE
ARMV4
)
Release
shunt
-
Win32
(
WCE
ARMV4
)
Debug
SSBR
Source
Files
CProjGroup
SSBR
DJW
Header
Files
CProjGroup
SSBR
sys
CProjGroup
SSBR
DJW
DJW
Resource
Files
CProjGroup
SSBR
DJW
dep
CDependencyContainer
SSBR
kfuncs
.
h
CDependencyFile
SSBR
DJW
dep
CDependencyContainer
SSBR
kfuncs
.
h
CDependencyFile
SSBR
DJW
DJW
DJWACE_ENTRY
(
baseClass
)
END_COM_MAP
(
)
public
:
virtual
ULONG
STDMETHODCALLTYPE
AddRef
(
)
;
virtual
ULONG
STDMETHODCALLTYPE
Release
(
)
;
virtual
HRESULT
STDMETHODCALLTYPE
QueryInterface
(
REFIID
iid
void
*
*
ppvObj
)
;
#
define
BEGIN_CONNECTION_PART
(
theClass
localClass
)
class
X
#
#
localClass
:
public
CConnectionPoint
{
public
:
X
#
#
localClass
(
)
{
m_nOffset
=
offsetof
(
theClass
m_x
#
#
localClass
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
class_name
)
#
define
DECLARE_OLECREATh
!
E_EX
(
class_name
)
#
define
DECLARE_OLECTLTYPE
(
class_name
)
#
define
DECLARE_OLETYPELIB
(
class_name
)
#
define
DECLARE_ONLY_AGGREGATABLE
(
x
)
#
define
DECLARE_OPAQUE32
(
x
)
#
define
DECLARE_PARSE_MAP
(
)
#
define
DECLARE_POLY_AGGREGATABLE
(
x
)
#
define
DECLARE_PROPERTY_SUPPORT
(
class
)
#
define
DECLARE_PROPPAGEIDS
(
class_name
)
#
define
DECLARE_PROTECT_FINAL_CONSTRUCT
(
)
#
define
DECLARE_REGISTRY
(
class
pid
vpid
nid
flags
)
#
define
DECLARE_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_SERIAL
(
class_name
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_VIEW_STATUS
(
statusFlags
)
#
define
DECLARE_WND_CLASS
(
WndClassName
)
#
define
DECLARE_WND_SUPERCLASS
(
WndClassName
OrigWndClassName
)
#
define
DEFINE_COMMAND
(
x
szCommand
)
#
define
DELEGATE_DUAL_INTERFACE
(
objectClass
dualClass
)
#
define
END_CONNECTION_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_DUAL_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
EXTERN_PROCESS_LOCAL
(
class_name
ident_name
)
extern
AFX_DATA
PROCESS_LOCAL
(
class_name
ident_name
)
#
define
EXT_SNAPINMENUID
(
id
)
#
define
IMPLEMENT_DUAL_ERRORINFO
(
objectClass
riidSource
)
#
define
IMPLEMENT_DYNAMIC
(
class_name
base_class_name
)
#
define
IMPLEMENT_DYNCREATE
(
class_name
base_class_name
)
#
define
IMPLEMENT_OLECREATE
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECREATE_EX
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECTLTYPE
(
class_name
idsUserTypeName
dwOleMisc
)
#
define
IMPLEMENT_OLETYPELIB
(
class_name
tlid
wVerMajor
wVerMinor
)
#
define
IMPLEMENT_SERIAL
(
class_name
base_class_name
wSchema
)
#
define
INIT_INTERFACE_PART
(
theClass
localClass
)
#
define
PROCESS_LOCAL
(
class_name
ident_name
)
AFX_DATADEF
CProcessLocal
<
class_name
>
ident_name
;
#
define
PURE
=
0
#
define
SNAPINMENUID
(
id
)
#
define
THIS
void
#
define
THIS_
#
define
TR
x
2
x
2
s
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
clasD
e
b
u
g
g
e
r
J
D
o
c
u
m
e
n
t
s
T
Watch1
Watch2
Watch3
Watch4
ET
PC
2003
DeviceV4
)
Debug
!
shunt
-
Win32
(
WCE
ARMV4
)
Release
shunt
-
Win32
(
WCE
ARMV4
)
Debug
SSBR
CTargetItem
!
shunt
-
Win32
(
WCE
ARMV4
)
Release
shunt
-
Win32
(
WCE
ARMV4
)
Debug
SSBR
Source
Files
CProjGroup
SSBR
DJW
Header
Files
CProjGroup
SSBR
sys
CProjGroup
SSBR
DJW
DJW
Resource
Files
CProjGroup
SSBR
DJW
dep
CDependencyContainer
SSBR
kfuncs
.
h
CDependencyFile
SSBR
DJW
dep
CDependencyContainer
SSBR
kfuncs
.
h
CDependencyFile
SSBR
DJW
DJW
DJWACE_ENTRY
(
baseClass
)
END_COM_MAP
(
)
public
:
virtual
ULONG
STDMETHODCALLTYPE
AddRef
(
)
;
virtual
ULONG
STDMETHODCALLTYPE
Release
(
)
;
virtual
HRESULT
STDMETHODCALLTYPE
QueryInterface
(
REFIID
iid
void
*
*
ppvObj
)
;
#
define
BEGIN_CONNECTION_PART
(
theClass
localClass
)
class
X
#
#
localClass
:
public
CConnectionPoint
{
public
:
X
#
#
localClass
(
)
{
m_nOffset
=
offsetof
(
theClass
m_x
#
#
localClass
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
class_name
)
#
define
DECLARE_OLECREATh
!
E_EX
(
class_name
)
#
define
DECLARE_OLECTLTYPE
(
class_name
)
#
define
DECLARE_OLETYPELIB
(
class_name
)
#
define
DECLARE_ONLY_AGGREGATABLE
(
x
)
#
define
DECLARE_OPAQUE32
(
x
)
#
define
DECLARE_PARSE_MAP
(
)
#
define
DECLARE_POLY_AGGREGATABLE
(
x
)
#
define
DECLARE_PROPERTY_SUPPORT
(
class
)
#
define
DECLARE_PROPPAGEIDS
(
class_name
)
#
define
DECLARE_PROTECT_FINAL_CONSTRUCT
(
)
#
define
DECLARE_REGISTRY
(
class
pid
vpid
nid
flags
)
#
define
DECLARE_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_SERIAL
(
class_name
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_VIEW_STATUS
(
statusFlags
)
#
define
DECLARE_WND_CLASS
(
WndClassName
)
#
define
DECLARE_WND_SUPERCLASS
(
WndClassName
OrigWndClassName
)
#
define
DEFINE_COMMAND
(
x
szCommand
)
#
define
DELEGATE_DUAL_INTERFACE
(
objectClass
dualClass
)
#
define
END_CONNECTION_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_DUAL_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
EXTERN_PROCESS_LOCAL
(
class_name
ident_name
)
extern
AFX_DATA
PROCESS_LOCAL
(
class_name
ident_name
)
#
define
EXT_SNAPINMENUID
(
id
)
#
define
IMPLEMENT_DUAL_ERRORINFO
(
objectClass
riidSource
)
#
define
IMPLEMENT_DYNAMIC
(
class_name
base_class_name
)
#
define
IMPLEMENT_DYNCREATE
(
class_name
base_class_name
)
#
define
IMPLEMENT_OLECREATE
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECREATE_EX
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECTLTYPE
(
class_name
idsUserTypeName
dwOleMisc
)
#
define
IMPLEMENT_OLETYPELIB
(
class_name
tlid
wVerMajor
wVerMinor
)
#
define
IMPLEMENT_SERIAL
(
class_name
base_class_name
wSchema
)
#
define
INIT_INTERFACE_PART
(
theClass
localClass
)
#
define
PROCESS_LOCAL
(
class_name
ident_name
)
AFX_DATADEF
CProcessLocal
<
class_name
>
ident_name
;
#
define
PURE
=
0
#
define
SNAPINMENUID
(
id
)
#
define
THIS
void
#
define
THIS_
#
define
TR
x
2
x
2
s
)
;
}
#
define
CONNECTION_IID
(
iid
)
REFIID
GetIID
(
)
{
return
iid
;
}
#
define
DECLARE_AGGREGATABLE
(
x
)
#
define
DECLARE_CLASSFACTORY_EX
(
cf
)
#
define
DECLARE_CLASSFACTORY
(
)
#
define
DECLARE_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
clas
x
C
/
C
+
+
>
'
v
#
v
;
v
g
v
v
z
&
v
'
'
v
gK
v
Q
v
5C
:
\
builds
\
minimo
\
mozilla
\
build
\
wince
\
shunt
\
stdlib
.
cpp
&
{
2AE27A3C
-
17F5
-
11D0
-
AF1B
-
00A0C90F9DE6
}
h
C
/
C
+
+
>
'
v
#
v
;
v
g
v
v
z
&
v
'
'
v
gK
v
Q
v
4C
:
\
builds
\
minimo
\
mozilla
\
build
\
wince
\
shunt
\
stdio
.
cpp
&
{
2AE27A3C
-
17F5
-
11D0
-
AF1B
-
00A0C90F9DE6
}
*
h
C
/
C
+
+
>
'
v
#
v
;
v
g
v
v
z
&
v
'
'
v
gK
v
Q
v
#
'
4C
:
\
builds
\
minimo
\
mozilla
\
build
\
wince
\
shunt
\
win32
.
cpp
&
{
2AE27A3C
-
17F5
-
11D0
-
AF1B
-
00A0C90F9DE6
}
:
h
C
/
C
+
+
>
'
v
#
v
;
v
g
v
v
z
&
v
'
'
v
gK
v
Q
v
x
z
z
0
5C
:
\
builds
\
minimo
\
mozilla
\
build
\
wince
\
shunt
\
win32A
.
cpp
&
{
2AE27A3C
-
17F5
-
11D0
-
AF1B
-
00A0C90F9DE6
}
B
W
V
h
_CLASSFACTORY2
(
lic
)
#
define
DECLARE_CLASSFACTORY_AUTO_THREAD
(
)
#
define
DECLARE_CLASSFACTORY_SINGLETON
(
obj
)
#
define
DECLARE_CONNECTION_MAP
(
)
#
define
DECLARE_DISPATCH_MAP
(
)
#
define
DECLARE_DUAL_ERRORINFO
(
)
#
define
DECLARE_DYNAMIC
(
class_name
)
#
define
DECLARE_DYNCREATE
(
class_name
)
#
define
DECLARE_EMPTY_MSG_MAP
(
)
#
define
DECLARE_EVENT_MAP
(
)
#
define
DECLARE_EVENTSINK_MAP
(
)
#
define
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
#
define
DECLARE_HANDLE
(
x
)
#
define
DECLARE_HANDLE32
(
x
)
#
define
DECLARE_INTERFACE
(
iface
)
interface
iface
#
define
DECLARE_INTERFACE_
(
iface
baseiface
)
interface
iface
:
public
baseiface
#
define
DECLARE_INTERFACE_MAP
(
)
#
define
DECLARE_MESSAGE_MAP
(
)
#
define
DECLARE_NO_REGISTRY
(
)
#
define
DECLARE_NOT_AGGREGATABLE
(
x
)
#
define
DECLARE_OBJECT_DESCRIPTION
(
x
)
#
define
DECLARE_OLECMD_MAP
(
)
#
define
DECLARE_OLECREATE
(
class_name
)
#
define
DECLARE_OLECREATh
!
E_EX
(
class_name
)
#
define
DECLARE_OLECTLTYPE
(
class_name
)
#
define
DECLARE_OLETYPELIB
(
class_name
)
#
define
DECLARE_ONLY_AGGREGATABLE
(
x
)
#
define
DECLARE_OPAQUE32
(
x
)
#
define
DECLARE_PARSE_MAP
(
)
#
define
DECLARE_POLY_AGGREGATABLE
(
x
)
#
define
DECLARE_PROPERTY_SUPPORT
(
class
)
#
define
DECLARE_PROPPAGEIDS
(
class_name
)
#
define
DECLARE_PROTECT_FINAL_CONSTRUCT
(
)
#
define
DECLARE_REGISTRY
(
class
pid
vpid
nid
flags
)
#
define
DECLARE_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_SERIAL
(
class_name
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCE
(
x
)
#
define
DECLARE_STATIC_REGISTRY_RESOURCEID
(
x
)
#
define
DECLARE_VIEW_STATUS
(
statusFlags
)
#
define
DECLARE_WND_CLASS
(
WndClassName
)
#
define
DECLARE_WND_SUPERCLASS
(
WndClassName
OrigWndClassName
)
#
define
DEFINE_COMMAND
(
x
szCommand
)
#
define
DELEGATE_DUAL_INTERFACE
(
objectClass
dualClass
)
#
define
END_CONNECTION_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_DUAL_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
END_INTERFACE_PART
(
localClass
)
}
m_x
#
#
localClass
;
friend
class
X
#
#
localClass
;
#
define
EXTERN_PROCESS_LOCAL
(
class_name
ident_name
)
extern
AFX_DATA
PROCESS_LOCAL
(
class_name
ident_name
)
#
define
EXT_SNAPINMENUID
(
id
)
#
define
IMPLEMENT_DUAL_ERRORINFO
(
objectClass
riidSource
)
#
define
IMPLEMENT_DYNAMIC
(
class_name
base_class_name
)
#
define
IMPLEMENT_DYNCREATE
(
class_name
base_class_name
)
#
define
IMPLEMENT_OLECREATE
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECREATE_EX
(
class_name
external_name
l
w1
w2
b1
b2
b3
b4
b5
b6
b7
b8
)
#
define
IMPLEMENT_OLECTLTYPE
(
class_name
idsUserTypeName
dwOleMisc
)
#
define
IMPLEMENT_OLETYPELIB
(
class_name
tlid
wVerMajor
wVerMinor
)
#
define
IMPLEMENT_SERIAL
(
class_name
base_class_name
wSchema
)
#
define
INIT_INTERFACE_PART
(
theClass
localClass
)
#
define
PROCESS_LOCAL
(
class_name
ident_name
)
AFX_DATADEF
CProcessLocal
<
class_name
>
ident_name
;
#
define
PURE
=
0
#
define
SNAPINMENUID
(
id
)
#
define
THIS
void
#
define
THIS_
#
define
TR
ma
acp_assume_not_defined
(
_M_X86
)
#
pragma
acp_assume_not_defined
(
_M_ALPHA
)
#
pragma
acp_assume_not_defined
(
_M_MRX000
)
#
pragma
acp_assume_not_defined
(
_M_PPC
)
lass
__NCB__PROPSET_
#
#
x
:
public
PROPSET
{
#
define
END_PROPSET_MAP
(
)
}
;
#
define
BEGIN_PROVIDER_COLUMN_MAP
(
x
)
class
__NCB__PROVIDERCOLUMN_
#
#
x
:
public
PROVIDER_COLUMN
{
#
define
END_PROVIDER_COLUMN_MAP
(
)
}
;
#
define
BEGIN_SNAPINCOMMAND_MAP
(
x
bIsExtension
)
class
__NCB__SNAPINCOMMAND_
#
#
x
:
public
SNAPINCOMMAND
{
#
define
END_SNAPINCOMMAND_MAP
(
)
}
;
#
define
BEGIN_CONNECTION_MAP
(
x
y
)
class
__NCB__CONNECTION_
#
#
x
:
public
CONNECTION
public
y
{
#
define
END_CONNECTION_MAP
(
)
}
;
#
define
BEGIN_DISPATCH_MAP
(
x
y
)
class
__NCB__DISPATCH_
#
#
x
:
public
DISPATCH
public
y
{
#
define
END_DISPATCH_MAP
(
)
}
;
#
define
BEGIN_EVENT_MAP
(
x
y
)
class
__NCB__EVENT_
#
#
x
:
public
EVENT
public
y
{
#
define
END_EVENT_MAP
(
)
}
;
#
define
BEGIN_EVENTSINK_MAP
(
x
y
)
class
__NCB__EVENTSINK_
#
#
x
:
public
EVENTSINK
public
y
{
#
define
END_EVENTSINK_MAP
(
)
}
;
#
define
BEGIN_INTERFACE_MAP
(
x
y
)
class
__NCB__INTERFACE_
#
#
x
:
public
INTERFACE
public
y
{
#
define
END_INTERFACE_MAP
(
)
}
;
#
define
BEGIN_MESSAGE_MAP
(
x
y
)
class
__NCB__MESSAGE_
#
#
x
:
public
MESSAGE
public
y
{
#
define
END_MESSAGE_MAP
(
)
}
;
#
define
BEGIN_OLECMD_MAP
(
x
y
)
class
__NCB__OLECMD_
#
#
x
:
public
OLECMD
public
y
{
#
define
END_OLECMD_MAP
(
)
}
;
#
define
BEGIN_PARSE_MAP
(
x
y
)
class
__NCB__PARSE_
#
#
x
:
public
PARSE
public
y
{
#
define
END_PARSE_MAP
(
)
}
;
#
pragma
acp_assume_type
(
BOOL
)
#
pragma
acp_assume_type
(
DWORD
)
#
pragma
acp_assume_type
(
UINT
)
#
pragma
acp_assume_not_type
(
TRUE
)
#
pragma
acp_assume_not_type
(
FALSE
)
#
pragma
acp_assume_not_type
(
NULL
)
#
pragma
acp_assume_not_defined
(
DOS
)
#
pragma
acp_assume_not_defined
(
_DOS
)
#
pragma
acp_assume_not_defined
(
WIN16
)
#
pragma
acp_assume_not_defined
(
_WIN16
)
#
pragma
acp_assume_not_defined
(
MAC
)
#
pragma
acp_assume_not_defined
(
_MAC
)
#
pragma
acp_assume_not_defined
(
RC_INVOKED
)
#
pragma
acp_assume_not_defined
(
_POSIX_
)
#
pragma
acp_assume_not_defined
(
__STDC__
)
#
pragma
acp_assume_not_defined
(
NONAMELESSUNIO
