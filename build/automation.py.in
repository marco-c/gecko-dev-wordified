#
#
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
#
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
#
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
from
__future__
import
with_statement
import
logging
import
os
import
sys
SCRIPT_DIR
=
os
.
path
.
abspath
(
os
.
path
.
realpath
(
os
.
path
.
dirname
(
sys
.
argv
[
0
]
)
)
)
sys
.
path
.
insert
(
0
SCRIPT_DIR
)
#
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
#
TODO
:
this
is
a
hack
for
mozbase
without
virtualenv
remove
with
bug
849900
#
These
paths
refer
to
relative
locations
to
test
.
zip
not
the
OBJDIR
or
SRCDIR
here
=
os
.
path
.
dirname
(
os
.
path
.
realpath
(
__file__
)
)
mozbase
=
os
.
path
.
realpath
(
os
.
path
.
join
(
os
.
path
.
dirname
(
here
)
'
mozbase
'
)
)
if
os
.
path
.
isdir
(
mozbase
)
:
for
package
in
os
.
listdir
(
mozbase
)
:
package_path
=
os
.
path
.
join
(
mozbase
package
)
if
package_path
not
in
sys
.
path
:
sys
.
path
.
append
(
package_path
)
#
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
_DEFAULT_HTTP_PORT
=
8888
_DEFAULT_SSL_PORT
=
4443
#
expand
_DIST_BIN
=
__XPC_BIN_PATH__
#
expand
_IS_WIN32
=
len
(
"
__WIN32__
"
)
!
=
0
#
expand
_IS_MAC
=
__IS_MAC__
!
=
0
#
expand
_IS_LINUX
=
__IS_LINUX__
!
=
0
#
ifdef
IS_CYGWIN
#
expand
_IS_CYGWIN
=
__IS_CYGWIN__
=
=
1
#
else
_IS_CYGWIN
=
False
#
endif
#
expand
_BIN_SUFFIX
=
__BIN_SUFFIX__
#
expand
_IS_DEBUG_BUILD
=
__IS_DEBUG_BUILD__
#
expand
_CRASHREPORTER
=
__CRASHREPORTER__
=
=
1
#
expand
_IS_ASAN
=
__IS_ASAN__
=
=
1
def
resetGlobalLog
(
log
)
:
while
_log
.
handlers
:
_log
.
removeHandler
(
_log
.
handlers
[
0
]
)
handler
=
logging
.
StreamHandler
(
log
)
_log
.
setLevel
(
logging
.
INFO
)
_log
.
addHandler
(
handler
)
#
We
use
the
logging
system
here
primarily
because
it
'
ll
handle
multiple
#
threads
which
is
needed
to
process
the
output
of
the
server
and
application
#
processes
simultaneously
.
_log
=
logging
.
getLogger
(
)
resetGlobalLog
(
sys
.
stdout
)
class
Automation
(
object
)
:
"
"
"
Runs
the
browser
from
a
script
and
provides
useful
utilities
for
setting
up
the
browser
environment
.
"
"
"
DIST_BIN
=
_DIST_BIN
IS_WIN32
=
_IS_WIN32
IS_MAC
=
_IS_MAC
IS_LINUX
=
_IS_LINUX
IS_CYGWIN
=
_IS_CYGWIN
BIN_SUFFIX
=
_BIN_SUFFIX
UNIXISH
=
not
IS_WIN32
and
not
IS_MAC
IS_DEBUG_BUILD
=
_IS_DEBUG_BUILD
CRASHREPORTER
=
_CRASHREPORTER
IS_ASAN
=
_IS_ASAN
#
timeout
in
seconds
DEFAULT_TIMEOUT
=
60
.
0
DEFAULT_HTTP_PORT
=
_DEFAULT_HTTP_PORT
DEFAULT_SSL_PORT
=
_DEFAULT_SSL_PORT
def
__init__
(
self
)
:
self
.
log
=
_log
self
.
lastTestSeen
=
"
automation
.
py
"
property
def
__all__
(
self
)
:
return
[
"
UNIXISH
"
"
IS_WIN32
"
"
IS_MAC
"
"
log
"
"
DIST_BIN
"
"
environment
"
"
IS_DEBUG_BUILD
"
"
DEFAULT_TIMEOUT
"
]
def
environment
(
self
env
=
None
xrePath
=
None
crashreporter
=
True
debugger
=
False
lsanPath
=
None
ubsanPath
=
None
)
:
if
xrePath
=
=
None
:
xrePath
=
self
.
DIST_BIN
if
env
=
=
None
:
env
=
dict
(
os
.
environ
)
ldLibraryPath
=
os
.
path
.
abspath
(
os
.
path
.
join
(
SCRIPT_DIR
xrePath
)
)
if
self
.
UNIXISH
or
self
.
IS_MAC
:
envVar
=
"
LD_LIBRARY_PATH
"
if
self
.
IS_MAC
:
envVar
=
"
DYLD_LIBRARY_PATH
"
if
envVar
in
env
:
ldLibraryPath
=
ldLibraryPath
+
"
:
"
+
env
[
envVar
]
env
[
envVar
]
=
ldLibraryPath
elif
self
.
IS_WIN32
:
env
[
"
PATH
"
]
=
env
[
"
PATH
"
]
+
"
;
"
+
str
(
ldLibraryPath
)
if
crashreporter
and
not
debugger
:
env
[
'
MOZ_CRASHREPORTER_NO_REPORT
'
]
=
'
1
'
env
[
'
MOZ_CRASHREPORTER
'
]
=
'
1
'
else
:
env
[
'
MOZ_CRASHREPORTER_DISABLE
'
]
=
'
1
'
#
Crash
on
non
-
local
network
connections
by
default
.
#
MOZ_DISABLE_NONLOCAL_CONNECTIONS
can
be
set
to
"
0
"
to
temporarily
#
enable
non
-
local
connections
for
the
purposes
of
local
testing
.
Don
'
t
#
override
the
user
'
s
choice
here
.
See
bug
1049688
.
env
.
setdefault
(
'
MOZ_DISABLE_NONLOCAL_CONNECTIONS
'
'
1
'
)
env
[
'
GNOME_DISABLE_CRASH_DIALOG
'
]
=
'
1
'
env
[
'
XRE_NO_WINDOWS_CRASH_DIALOG
'
]
=
'
1
'
#
Set
WebRTC
logging
in
case
it
is
not
set
yet
env
.
setdefault
(
'
MOZ_LOG
'
'
signaling
:
3
mtransport
:
4
DataChannel
:
4
jsep
:
4
'
)
env
.
setdefault
(
'
R_LOG_LEVEL
'
'
6
'
)
env
.
setdefault
(
'
R_LOG_DESTINATION
'
'
stderr
'
)
env
.
setdefault
(
'
R_LOG_VERBOSE
'
'
1
'
)
#
ASan
specific
environment
stuff
if
self
.
IS_ASAN
and
(
self
.
IS_LINUX
or
self
.
IS_MAC
)
:
#
Symbolizer
support
llvmsym
=
os
.
path
.
join
(
xrePath
"
llvm
-
symbolizer
"
)
if
os
.
path
.
isfile
(
llvmsym
)
:
env
[
"
ASAN_SYMBOLIZER_PATH
"
]
=
llvmsym
self
.
log
.
info
(
"
INFO
|
automation
.
py
|
ASan
using
symbolizer
at
%
s
"
llvmsym
)
else
:
self
.
log
.
info
(
"
TEST
-
UNEXPECTED
-
FAIL
|
automation
.
py
|
Failed
to
find
ASan
symbolizer
at
%
s
"
llvmsym
)
try
:
totalMemory
=
int
(
os
.
popen
(
"
free
"
)
.
readlines
(
)
[
1
]
.
split
(
)
[
1
]
)
#
Only
4
GB
RAM
or
less
available
?
Use
custom
ASan
options
to
reduce
#
the
amount
of
resources
required
to
do
the
tests
.
Standard
options
#
will
otherwise
lead
to
OOM
conditions
on
the
current
test
slaves
.
if
totalMemory
<
=
1024
*
1024
*
4
:
self
.
log
.
info
(
"
INFO
|
automation
.
py
|
ASan
running
in
low
-
memory
configuration
"
)
env
[
"
ASAN_OPTIONS
"
]
=
"
quarantine_size
=
50331648
:
malloc_context_size
=
5
"
else
:
self
.
log
.
info
(
"
INFO
|
automation
.
py
|
ASan
running
in
default
memory
configuration
"
)
except
OSError
err
:
self
.
log
.
info
(
"
Failed
determine
available
memory
disabling
ASan
low
-
memory
configuration
:
%
s
"
err
.
strerror
)
except
:
self
.
log
.
info
(
"
Failed
determine
available
memory
disabling
ASan
low
-
memory
configuration
"
)
return
env
