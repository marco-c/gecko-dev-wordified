From
79503dd742253cdca54f10aec9052ff477ccaf38
Mon
Sep
17
00
:
00
:
00
2001
From
:
Ralf
Jung
<
post
ralfj
.
de
>
Date
:
Sat
13
Jul
2024
13
:
53
:
56
+
0200
Subject
:
[
PATCH
]
stabilize
raw_ref_op
diff
-
-
git
a
/
compiler
/
rustc_ast_passes
/
src
/
feature_gate
.
rs
b
/
compiler
/
rustc_ast_passes
/
src
/
feature_gate
.
rs
index
214a37bca03e2
.
.
5ab99fbac866f
100644
-
-
-
a
/
compiler
/
rustc_ast_passes
/
src
/
feature_gate
.
rs
+
+
+
b
/
compiler
/
rustc_ast_passes
/
src
/
feature_gate
.
rs
-
539
7
+
539
6
pub
fn
check_crate
(
krate
:
&
ast
:
:
Crate
sess
:
&
Session
features
:
&
Features
)
{
}
}
gate_all
!
(
gen_blocks
"
gen
blocks
are
experimental
"
)
;
-
gate_all
!
(
raw_ref_op
"
raw
address
of
syntax
is
experimental
"
)
;
gate_all
!
(
const_trait_impl
"
const
trait
impls
are
experimental
"
)
;
gate_all
!
(
half_open_range_patterns_in_slices
diff
-
-
git
a
/
compiler
/
rustc_codegen_cranelift
/
example
/
mini_core_hello_world
.
rs
b
/
compiler
/
rustc_codegen_cranelift
/
example
/
mini_core_hello_world
.
rs
index
e603ac566f4ec
.
.
ccbd5a78485d7
100644
-
-
-
a
/
compiler
/
rustc_codegen_cranelift
/
example
/
mini_core_hello_world
.
rs
+
+
+
b
/
compiler
/
rustc_codegen_cranelift
/
example
/
mini_core_hello_world
.
rs
-
6
8
+
6
7
extern_types
naked_functions
thread_local
-
repr_simd
-
raw_ref_op
+
repr_simd
)
]
#
!
[
no_core
]
#
!
[
allow
(
dead_code
non_camel_case_types
internal_features
)
]
diff
-
-
git
a
/
compiler
/
rustc_codegen_gcc
/
example
/
mini_core_hello_world
.
rs
b
/
compiler
/
rustc_codegen_gcc
/
example
/
mini_core_hello_world
.
rs
index
9f096e9022012
.
.
dcfa34cb729d8
100644
-
-
-
a
/
compiler
/
rustc_codegen_gcc
/
example
/
mini_core_hello_world
.
rs
+
+
+
b
/
compiler
/
rustc_codegen_gcc
/
example
/
mini_core_hello_world
.
rs
-
2
7
+
2
7
#
!
[
feature
(
no_core
unboxed_closures
start
lang_items
never_type
linkage
-
extern_types
thread_local
raw_ref_op
+
extern_types
thread_local
)
]
#
!
[
no_core
]
#
!
[
allow
(
dead_code
internal_features
non_camel_case_types
)
]
diff
-
-
git
a
/
compiler
/
rustc_error_codes
/
src
/
error_codes
/
E0745
.
md
b
/
compiler
/
rustc_error_codes
/
src
/
error_codes
/
E0745
.
md
index
23ee7af30f418
.
.
32b28f3de949f
100644
-
-
-
a
/
compiler
/
rustc_error_codes
/
src
/
error_codes
/
E0745
.
md
+
+
+
b
/
compiler
/
rustc_error_codes
/
src
/
error_codes
/
E0745
.
md
-
3
7
+
3
6
The
address
of
temporary
value
was
taken
.
Erroneous
code
example
:
compile_fail
E0745
-
#
#
!
[
feature
(
raw_ref_op
)
]
fn
temp_address
(
)
{
let
ptr
=
&
raw
const
2
;
/
/
error
!
}
-
15
7
+
14
6
In
this
example
2
is
destroyed
right
after
the
assignment
which
means
that
To
avoid
this
error
first
bind
the
temporary
to
a
named
local
variable
:
-
#
#
!
[
feature
(
raw_ref_op
)
]
fn
temp_address
(
)
{
let
val
=
2
;
let
ptr
=
&
raw
const
val
;
/
/
ok
!
diff
-
-
git
a
/
compiler
/
rustc_feature
/
src
/
accepted
.
rs
b
/
compiler
/
rustc_feature
/
src
/
accepted
.
rs
index
3d5ecbaae32a2
.
.
7838abca9b890
100644
-
-
-
a
/
compiler
/
rustc_feature
/
src
/
accepted
.
rs
+
+
+
b
/
compiler
/
rustc_feature
/
src
/
accepted
.
rs
-
321
6
+
321
8
declare_features
!
(
(
accepted
raw_dylib
"
1
.
71
.
0
"
Some
(
58713
)
)
/
/
/
Allows
keywords
to
be
escaped
for
use
as
identifiers
.
(
accepted
raw_identifiers
"
1
.
30
.
0
"
Some
(
48589
)
)
+
/
/
/
Allows
&
raw
const
place_expr
and
&
raw
mut
place_expr
expressions
.
+
(
accepted
raw_ref_op
"
CURRENT_RUSTC_VERSION
"
Some
(
64490
)
)
/
/
/
Allows
relaxing
the
coherence
rules
such
that
/
/
/
impl
<
T
>
ForeignTrait
<
LocalType
>
for
ForeignType
<
T
>
is
permitted
.
(
accepted
re_rebalance_coherence
"
1
.
41
.
0
"
Some
(
55437
)
)
diff
-
-
git
a
/
compiler
/
rustc_feature
/
src
/
unstable
.
rs
b
/
compiler
/
rustc_feature
/
src
/
unstable
.
rs
index
459df9ea1b859
.
.
14e353f13ca49
100644
-
-
-
a
/
compiler
/
rustc_feature
/
src
/
unstable
.
rs
+
+
+
b
/
compiler
/
rustc_feature
/
src
/
unstable
.
rs
-
565
8
+
565
6
declare_features
!
(
(
unstable
precise_capturing
"
1
.
79
.
0
"
Some
(
123432
)
)
/
/
/
Allows
macro
attributes
on
expressions
statements
and
non
-
inline
modules
.
(
unstable
proc_macro_hygiene
"
1
.
30
.
0
"
Some
(
54727
)
)
-
/
/
/
Allows
&
raw
const
place_expr
and
&
raw
mut
place_expr
expressions
.
-
(
unstable
raw_ref_op
"
1
.
41
.
0
"
Some
(
64490
)
)
/
/
/
Makes
&
and
&
mut
patterns
eat
only
one
layer
of
references
in
Rust
2024
.
(
incomplete
ref_pat_eat_one_layer_2024
"
1
.
79
.
0
"
Some
(
123076
)
)
/
/
/
Makes
&
and
&
mut
patterns
eat
only
one
layer
of
references
in
Rust
2024
structural
variant
diff
-
-
git
a
/
compiler
/
rustc_parse
/
src
/
parser
/
expr
.
rs
b
/
compiler
/
rustc_parse
/
src
/
parser
/
expr
.
rs
index
e0917ba43e41c
.
.
422206ebbce07
100644
-
-
-
a
/
compiler
/
rustc_parse
/
src
/
parser
/
expr
.
rs
+
+
+
b
/
compiler
/
rustc_parse
/
src
/
parser
/
expr
.
rs
-
851
7
+
851
7
impl
<
'
a
>
Parser
<
'
a
>
{
self
.
expect_and
(
)
?
;
let
has_lifetime
=
self
.
token
.
is_lifetime
(
)
&
&
self
.
look_ahead
(
1
|
t
|
t
!
=
&
token
:
:
Colon
)
;
let
lifetime
=
has_lifetime
.
then
(
|
|
self
.
expect_lifetime
(
)
)
;
/
/
For
recovery
see
below
.
-
let
(
borrow_kind
mutbl
)
=
self
.
parse_borrow_modifiers
(
lo
)
;
+
let
(
borrow_kind
mutbl
)
=
self
.
parse_borrow_modifiers
(
)
;
let
attrs
=
self
.
parse_outer_attributes
(
)
?
;
let
expr
=
if
self
.
token
.
is_range_separator
(
)
{
self
.
parse_expr_prefix_range
(
attrs
)
-
871
13
+
871
12
impl
<
'
a
>
Parser
<
'
a
>
{
}
/
/
/
Parse
mut
?
or
raw
[
const
|
mut
]
.
-
fn
parse_borrow_modifiers
(
&
mut
self
lo
:
Span
)
-
>
(
ast
:
:
BorrowKind
ast
:
:
Mutability
)
{
+
fn
parse_borrow_modifiers
(
&
mut
self
)
-
>
(
ast
:
:
BorrowKind
ast
:
:
Mutability
)
{
if
self
.
check_keyword
(
kw
:
:
Raw
)
&
&
self
.
look_ahead
(
1
Token
:
:
is_mutability
)
{
/
/
raw
[
const
|
mut
]
.
let
found_raw
=
self
.
eat_keyword
(
kw
:
:
Raw
)
;
assert
!
(
found_raw
)
;
let
mutability
=
self
.
parse_const_or_mut
(
)
.
unwrap
(
)
;
-
self
.
psess
.
gated_spans
.
gate
(
sym
:
:
raw_ref_op
lo
.
to
(
self
.
prev_token
.
span
)
)
;
(
ast
:
:
BorrowKind
:
:
Raw
mutability
)
}
else
{
/
/
mut
?
