From
1d7e0be73155c0e603f7f28fe76479b224b18a37
Mon
Sep
17
00
:
00
:
00
2001
From
:
Jez
Ng
<
jezng
fb
.
com
>
Date
:
Tue
11
Oct
2022
23
:
50
:
46
-
0400
Subject
:
[
PATCH
]
[
lld
-
macho
]
Canonicalize
personality
pointers
in
EH
frames
We
already
do
this
for
personality
pointers
referenced
from
compact
unwind
entries
;
this
patch
extends
that
behavior
to
personalities
referenced
via
EH
frames
as
well
.
This
reduces
the
number
of
distinct
personalities
we
need
in
the
final
binary
and
helps
us
avoid
hitting
the
"
too
many
personalities
"
error
.
I
renamed
UnwindInfoSection
:
:
prepareRelocations
(
)
to
simply
prepare
since
we
now
do
some
non
-
reloc
-
specific
stuff
within
.
Fixes
#
58277
.
Reviewed
By
:
#
lld
-
macho
oontvoo
Differential
Revision
:
https
:
/
/
reviews
.
llvm
.
org
/
D135728
-
-
-
lld
/
MachO
/
UnwindInfoSection
.
cpp
|
35
+
+
+
+
+
+
+
+
+
+
+
+
+
+
-
-
-
lld
/
MachO
/
UnwindInfoSection
.
h
|
2
+
-
lld
/
MachO
/
Writer
.
cpp
|
2
+
-
lld
/
test
/
MachO
/
eh
-
frame
-
personality
-
dedup
.
s
|
43
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
4
files
changed
75
insertions
(
+
)
7
deletions
(
-
)
create
mode
100644
lld
/
test
/
MachO
/
eh
-
frame
-
personality
-
dedup
.
s
diff
-
-
git
a
/
lld
/
MachO
/
UnwindInfoSection
.
cpp
b
/
lld
/
MachO
/
UnwindInfoSection
.
cpp
index
c3f563d5572b
.
.
f0eb9e4845da
100644
-
-
-
a
/
lld
/
MachO
/
UnwindInfoSection
.
cpp
+
+
+
b
/
lld
/
MachO
/
UnwindInfoSection
.
cpp
-
158
7
+
158
7
class
UnwindInfoSectionImpl
final
:
public
UnwindInfoSection
{
public
:
UnwindInfoSectionImpl
(
)
:
cuOffsets
(
target
-
>
wordSize
)
{
}
uint64_t
getSize
(
)
const
override
{
return
unwindInfoSize
;
}
-
void
prepareRelocations
(
)
override
;
+
void
prepare
(
)
override
;
void
finalize
(
)
override
;
void
writeTo
(
uint8_t
*
buf
)
const
override
;
-
166
6
+
166
7
private
:
void
prepareRelocations
(
ConcatInputSection
*
)
;
void
relocateCompactUnwind
(
std
:
:
vector
<
CompactUnwindEntry
>
&
)
;
void
encodePersonalities
(
)
;
+
Symbol
*
canonicalizePersonality
(
Symbol
*
)
;
uint64_t
unwindInfoSize
=
0
;
std
:
:
vector
<
decltype
(
symbols
)
:
:
value_type
>
symbolsVec
;
-
218
14
+
219
24
void
UnwindInfoSection
:
:
addSymbol
(
const
Defined
*
d
)
{
}
}
-
void
UnwindInfoSectionImpl
:
:
prepareRelocations
(
)
{
+
void
UnwindInfoSectionImpl
:
:
prepare
(
)
{
/
/
This
iteration
needs
to
be
deterministic
since
prepareRelocations
may
add
/
/
entries
to
the
GOT
.
Hence
the
use
of
a
MapVector
for
/
/
UnwindInfoSection
:
:
symbols
.
for
(
const
Defined
*
d
:
make_second_range
(
symbols
)
)
-
if
(
d
-
>
unwindEntry
&
&
-
d
-
>
unwindEntry
-
>
getName
(
)
=
=
section_names
:
:
compactUnwind
)
-
prepareRelocations
(
d
-
>
unwindEntry
)
;
+
if
(
d
-
>
unwindEntry
)
{
+
if
(
d
-
>
unwindEntry
-
>
getName
(
)
=
=
section_names
:
:
compactUnwind
)
{
+
prepareRelocations
(
d
-
>
unwindEntry
)
;
+
}
else
{
+
/
/
We
don
'
t
have
to
add
entries
to
the
GOT
here
because
FDEs
have
+
/
/
explicit
GOT
relocations
so
Writer
:
:
scanRelocations
(
)
will
add
those
+
/
/
GOT
entries
.
However
we
still
need
to
canonicalize
the
personality
+
/
/
pointers
(
like
prepareRelocations
(
)
does
for
CU
entries
)
in
order
+
/
/
to
avoid
overflowing
the
3
-
personality
limit
.
+
FDE
&
fde
=
cast
<
ObjFile
>
(
d
-
>
getFile
(
)
)
-
>
fdes
[
d
-
>
unwindEntry
]
;
+
fde
.
personality
=
canonicalizePersonality
(
fde
.
personality
)
;
+
}
+
}
}
/
/
Compact
unwind
relocations
have
different
semantics
so
we
handle
them
in
a
-
279
6
+
290
7
void
UnwindInfoSectionImpl
:
:
prepareRelocations
(
ConcatInputSection
*
isec
)
{
continue
;
}
+
/
/
Similar
to
canonicalizePersonality
(
)
but
we
also
register
a
GOT
entry
.
if
(
auto
*
defined
=
dyn_cast
<
Defined
>
(
s
)
)
{
/
/
Check
if
we
have
created
a
synthetic
symbol
at
the
same
address
.
Symbol
*
&
personality
=
-
291
6
+
303
7
void
UnwindInfoSectionImpl
:
:
prepareRelocations
(
ConcatInputSection
*
isec
)
{
}
continue
;
}
+
assert
(
isa
<
DylibSymbol
>
(
s
)
)
;
in
.
got
-
>
addEntry
(
s
)
;
continue
;
-
320
6
+
333
18
void
UnwindInfoSectionImpl
:
:
prepareRelocations
(
ConcatInputSection
*
isec
)
{
}
}
+
Symbol
*
UnwindInfoSectionImpl
:
:
canonicalizePersonality
(
Symbol
*
personality
)
{
+
if
(
auto
*
defined
=
dyn_cast_or_null
<
Defined
>
(
personality
)
)
{
+
/
/
Check
if
we
have
created
a
synthetic
symbol
at
the
same
address
.
+
Symbol
*
&
synth
=
personalityTable
[
{
defined
-
>
isec
defined
-
>
value
}
]
;
+
if
(
synth
=
=
nullptr
)
+
synth
=
defined
;
+
else
if
(
synth
!
=
defined
)
+
return
synth
;
+
}
+
return
personality
;
+
}
+
/
/
We
need
to
apply
the
relocations
to
the
pre
-
link
compact
unwind
section
/
/
before
converting
it
to
post
-
link
form
.
There
should
only
be
absolute
/
/
relocations
here
:
since
we
are
not
emitting
the
pre
-
link
CU
section
there
diff
-
-
git
a
/
lld
/
MachO
/
UnwindInfoSection
.
h
b
/
lld
/
MachO
/
UnwindInfoSection
.
h
index
c6b334731c75
.
.
f2bc3213a127
100644
-
-
-
a
/
lld
/
MachO
/
UnwindInfoSection
.
h
+
+
+
b
/
lld
/
MachO
/
UnwindInfoSection
.
h
-
24
7
+
24
7
public
:
/
/
section
entirely
.
bool
isNeeded
(
)
const
override
{
return
!
allEntriesAreOmitted
;
}
void
addSymbol
(
const
Defined
*
)
;
-
virtual
void
prepareRelocations
(
)
=
0
;
+
virtual
void
prepare
(
)
=
0
;
protected
:
UnwindInfoSection
(
)
;
diff
-
-
git
a
/
lld
/
MachO
/
Writer
.
cpp
b
/
lld
/
MachO
/
Writer
.
cpp
index
3c44a60f4be2
.
.
ce9672dd0b4f
100644
-
-
-
a
/
lld
/
MachO
/
Writer
.
cpp
+
+
+
b
/
lld
/
MachO
/
Writer
.
cpp
-
675
7
+
675
7
void
Writer
:
:
scanRelocations
(
)
{
}
}
-
in
.
unwindInfo
-
>
prepareRelocations
(
)
;
+
in
.
unwindInfo
-
>
prepare
(
)
;
}
void
Writer
:
:
scanSymbols
(
)
{
diff
-
-
git
a
/
lld
/
test
/
MachO
/
eh
-
frame
-
personality
-
dedup
.
s
b
/
lld
/
test
/
MachO
/
eh
-
frame
-
personality
-
dedup
.
s
new
file
mode
100644
index
000000000000
.
.
b14ddb23465d
-
-
-
/
dev
/
null
+
+
+
b
/
lld
/
test
/
MachO
/
eh
-
frame
-
personality
-
dedup
.
s
-
0
0
+
1
43
+
#
REQUIRES
:
x86
+
#
RUN
:
rm
-
rf
%
t
;
split
-
file
%
s
%
t
+
#
RUN
:
llvm
-
mc
-
filetype
=
obj
-
triple
=
x86_64
-
apple
-
darwin19
.
0
.
0
%
t
/
eh
-
frame
.
s
-
o
%
t
/
eh
-
frame
.
o
+
#
RUN
:
llvm
-
mc
-
filetype
=
obj
-
triple
=
x86_64
-
apple
-
darwin19
.
0
.
0
%
t
/
cu
.
s
-
o
%
t
/
cu
.
o
+
#
RUN
:
%
lld
-
dylib
%
t
/
cu
.
o
%
t
/
eh
-
frame
.
o
-
o
%
t
/
out
+
+
#
#
Sanity
check
:
we
want
our
input
to
contain
a
section
(
and
not
symbol
)
+
#
#
relocation
for
the
personality
reference
.
+
#
RUN
:
llvm
-
readobj
-
-
relocations
%
t
/
cu
.
o
|
FileCheck
%
s
-
-
check
-
prefix
=
SECT
-
RELOC
+
#
SECT
-
RELOC
:
Section
__compact_unwind
{
+
#
SECT
-
RELOC
-
NEXT
:
__text
+
#
SECT
-
RELOC
-
NEXT
:
__text
+
#
SECT
-
RELOC
-
NEXT
:
}
+
+
#
#
Verify
that
the
personality
referenced
via
a
symbol
reloc
in
eh
-
frame
.
s
gets
+
#
#
dedup
'
ed
with
the
personality
referenced
via
a
section
reloc
in
cu
.
s
.
+
#
RUN
:
llvm
-
objdump
-
-
macho
-
-
unwind
-
info
%
t
/
out
|
FileCheck
%
s
+
#
CHECK
:
Personality
functions
:
(
count
=
1
)
+
+
#
-
-
-
eh
-
frame
.
s
+
_fun
:
+
.
cfi_startproc
+
.
cfi_personality
155
_my_personality
+
#
#
cfi_escape
cannot
be
encoded
in
compact
unwind
+
.
cfi_escape
0
+
ret
+
.
cfi_endproc
+
+
.
subsections_via_symbols
+
+
#
-
-
-
cu
.
s
+
.
globl
_my_personality
+
_fun
:
+
.
cfi_startproc
+
.
cfi_personality
155
_my_personality
+
.
cfi_def_cfa_offset
16
+
ret
+
.
cfi_endproc
+
+
_my_personality
:
+
nop
+
+
.
subsections_via_symbols
-
-
2
.
38
.
1
.
1
.
g6d9df9d320
