Fix
plugin
registry
symbols
not
exported
in
static
builds
with
plugin
support
.
When
building
LLVM
statically
(
without
BUILD_SHARED_LIBS
)
on
Windows
with
LLVM_EXPORT_SYMBOLS_FOR_PLUGINS
=
ON
external
plugins
cannot
register
through
llvm
:
:
Registry
<
clang
:
:
PluginASTAction
>
because
:
Static
data
members
(
Head
Tail
)
are
filtered
out
during
symbol
export
by
extract_symbols
.
py
because
they
don
'
t
match
the
function
signature
patterns
that
the
script
looks
for
.
This
patch
fixes
the
issue
by
adding
pattern
matching
to
extract_symbols
.
py
to
recognize
and
export
Registry
static
data
members
.
Note
:
When
both
LLVM
and
the
plugins
are
built
with
/
Zc
:
dllexportInlines
-
the
static
methods
(
add_node
(
)
begin
(
)
)
are
inlined
by
the
plugin
at
call
sites
so
only
the
data
symbols
need
to
be
exported
.
See
https
:
/
/
github
.
com
/
llvm
/
llvm
-
project
/
issues
/
163367
diff
-
-
git
a
/
llvm
/
utils
/
extract_symbols
.
py
b
/
llvm
/
utils
/
extract_symbols
.
py
index
388723421d66
.
.
72f992f560c7
100755
-
-
-
a
/
llvm
/
utils
/
extract_symbols
.
py
+
+
+
b
/
llvm
/
utils
/
extract_symbols
.
py
-
105
6
+
105
11
def
should_keep_microsoft_symbol
(
symbol
calling_convention_decoration
)
:
#
Skip
X86GenMnemonicTables
functions
they
are
not
exposed
from
llvm
/
include
/
.
elif
re
.
match
(
r
"
\
?
is
[
A
-
Z0
-
9
]
*
X86
llvm
"
symbol
)
:
return
None
+
#
Keep
Registry
<
T
>
:
:
Head
and
Registry
<
T
>
:
:
Tail
static
members
for
plugin
support
.
+
#
Pattern
matches
:
?
Head
?
Registry
<
template_args
>
llvm
or
?
Tail
?
Registry
.
.
.
+
elif
(
"
?
Registry
"
in
symbol
and
"
llvm
"
in
symbol
and
+
(
symbol
.
startswith
(
"
?
Head
"
)
or
symbol
.
startswith
(
"
?
Tail
"
)
)
)
:
+
return
symbol
#
Keep
mangled
llvm
:
:
and
clang
:
:
function
symbols
.
How
we
detect
these
is
a
#
bit
of
a
mess
and
imprecise
but
that
avoids
having
to
completely
demangle
#
the
symbol
name
.
The
outermost
namespace
is
at
the
end
of
the
identifier
