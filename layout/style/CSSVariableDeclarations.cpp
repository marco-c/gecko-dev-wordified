/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
2
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
CSSVariableDeclarations
.
h
"
/
/
These
two
special
string
values
are
used
to
represent
specified
values
of
/
/
'
initial
'
and
'
inherit
'
.
(
Note
that
neither
is
a
valid
variable
value
.
)
#
define
INITIAL_VALUE
"
!
"
#
define
INHERIT_VALUE
"
;
"
namespace
mozilla
{
CSSVariableDeclarations
:
:
CSSVariableDeclarations
(
)
{
MOZ_COUNT_CTOR
(
CSSVariableDeclarations
)
;
}
CSSVariableDeclarations
:
:
CSSVariableDeclarations
(
const
CSSVariableDeclarations
&
aOther
)
{
MOZ_COUNT_CTOR
(
CSSVariableDeclarations
)
;
CopyVariablesFrom
(
aOther
)
;
}
#
ifdef
DEBUG
CSSVariableDeclarations
:
:
~
CSSVariableDeclarations
(
)
{
MOZ_COUNT_DTOR
(
CSSVariableDeclarations
)
;
}
#
endif
CSSVariableDeclarations
&
CSSVariableDeclarations
:
:
operator
=
(
const
CSSVariableDeclarations
&
aOther
)
{
mVariables
.
Clear
(
)
;
CopyVariablesFrom
(
aOther
)
;
return
*
this
;
}
/
*
static
*
/
PLDHashOperator
CSSVariableDeclarations
:
:
EnumerateVariableForCopy
(
const
nsAString
&
aName
nsString
aValue
void
*
aData
)
{
CSSVariableDeclarations
*
variables
=
static_cast
<
CSSVariableDeclarations
*
>
(
aData
)
;
variables
-
>
mVariables
.
Put
(
aName
aValue
)
;
return
PL_DHASH_NEXT
;
}
void
CSSVariableDeclarations
:
:
CopyVariablesFrom
(
const
CSSVariableDeclarations
&
aOther
)
{
aOther
.
mVariables
.
EnumerateRead
(
EnumerateVariableForCopy
this
)
;
}
bool
CSSVariableDeclarations
:
:
Has
(
const
nsAString
&
aName
)
const
{
nsString
value
;
return
mVariables
.
Get
(
aName
&
value
)
;
}
bool
CSSVariableDeclarations
:
:
Get
(
const
nsAString
&
aName
Type
&
aType
nsString
&
aTokenStream
)
const
{
nsString
value
;
if
(
!
mVariables
.
Get
(
aName
&
value
)
)
{
return
false
;
}
if
(
value
.
EqualsLiteral
(
INITIAL_VALUE
)
)
{
aType
=
eInitial
;
aTokenStream
.
Truncate
(
)
;
}
else
if
(
value
.
EqualsLiteral
(
INHERIT_VALUE
)
)
{
aType
=
eInitial
;
aTokenStream
.
Truncate
(
)
;
}
else
{
aType
=
eTokenStream
;
aTokenStream
=
value
;
}
return
true
;
}
void
CSSVariableDeclarations
:
:
PutTokenStream
(
const
nsAString
&
aName
const
nsString
&
aTokenStream
)
{
MOZ_ASSERT
(
!
aTokenStream
.
EqualsLiteral
(
INITIAL_VALUE
)
&
&
!
aTokenStream
.
EqualsLiteral
(
INHERIT_VALUE
)
)
;
mVariables
.
Put
(
aName
aTokenStream
)
;
}
void
CSSVariableDeclarations
:
:
PutInitial
(
const
nsAString
&
aName
)
{
mVariables
.
Put
(
aName
NS_LITERAL_STRING
(
INITIAL_VALUE
)
)
;
}
void
CSSVariableDeclarations
:
:
PutInherit
(
const
nsAString
&
aName
)
{
mVariables
.
Put
(
aName
NS_LITERAL_STRING
(
INHERIT_VALUE
)
)
;
}
void
CSSVariableDeclarations
:
:
Remove
(
const
nsAString
&
aName
)
{
mVariables
.
Remove
(
aName
)
;
}
static
size_t
SizeOfTableEntry
(
const
nsAString
&
aKey
const
nsString
&
aValue
MallocSizeOf
aMallocSizeOf
void
*
aUserArg
)
{
size_t
n
=
0
;
n
+
=
aKey
.
SizeOfExcludingThisIfUnshared
(
aMallocSizeOf
)
;
n
+
=
aValue
.
SizeOfExcludingThisIfUnshared
(
aMallocSizeOf
)
;
return
n
;
}
size_t
CSSVariableDeclarations
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
aMallocSizeOf
(
this
)
;
n
+
=
mVariables
.
SizeOfExcludingThis
(
SizeOfTableEntry
aMallocSizeOf
)
;
return
n
;
}
}
/
/
namespace
mozilla
