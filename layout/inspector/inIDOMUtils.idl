/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
nsISupports
.
idl
"
interface
nsIArray
;
interface
nsIArrayExtensions
;
interface
nsIDOMCharacterData
;
interface
nsIDOMElement
;
interface
nsIDOMDocument
;
interface
nsIDOMCSSRule
;
interface
nsIDOMCSSStyleRule
;
interface
nsIDOMNode
;
interface
nsIDOMNodeList
;
interface
nsIDOMFontFaceList
;
interface
nsIDOMRange
;
interface
nsIDOMCSSStyleSheet
;
[
scriptable
uuid
(
362e98c3
-
82c2
-
4ad8
-
8dcb
-
00e8e4eab497
)
]
interface
inIDOMUtils
:
nsISupports
{
/
/
DOM
Node
utilities
boolean
isIgnorableWhitespace
(
in
nsIDOMCharacterData
aDataNode
)
;
/
/
Returns
the
"
parent
"
of
a
node
.
The
parent
of
a
document
node
is
the
/
/
frame
/
iframe
containing
that
document
.
aShowingAnonymousContent
says
/
/
whether
we
are
showing
anonymous
content
.
nsIDOMNode
getParentForNode
(
in
nsIDOMNode
aNode
in
boolean
aShowingAnonymousContent
)
;
nsIDOMNodeList
getChildrenForNode
(
in
nsIDOMNode
aNode
in
boolean
aShowingAnonymousContent
)
;
/
/
XBL
utilities
nsIArray
getBindingURLs
(
in
nsIDOMElement
aElement
)
;
/
/
content
state
utilities
unsigned
long
long
getContentState
(
in
nsIDOMElement
aElement
)
;
/
*
*
*
Setting
and
removing
content
state
on
an
element
.
Both
these
functions
*
calling
EventStateManager
:
:
SetContentState
internally
the
difference
is
*
that
for
the
remove
case
we
simply
pass
in
nullptr
for
the
element
.
*
Use
them
accordingly
.
*
*
When
removing
the
active
state
you
may
optionally
also
clear
the
active
*
document
as
well
by
setting
aClearActiveDocument
*
*
return
Returns
true
if
the
state
was
set
successfully
.
See
more
details
*
in
EventStateManager
.
h
SetContentState
.
*
/
bool
setContentState
(
in
nsIDOMElement
aElement
in
unsigned
long
long
aState
)
;
bool
removeContentState
(
in
nsIDOMElement
aElement
in
unsigned
long
long
aState
[
optional
]
in
bool
aClearActiveDocument
)
;
nsIDOMFontFaceList
getUsedFontFaces
(
in
nsIDOMRange
aRange
)
;
/
*
*
*
Get
the
names
of
all
the
supported
pseudo
-
elements
.
*
Pseudo
-
elements
which
are
only
accepted
in
UA
style
sheets
are
*
not
included
.
*
*
param
{
unsigned
long
}
aCount
the
number
of
items
returned
*
param
{
wstring
[
]
}
aNames
the
names
*
/
void
getCSSPseudoElementNames
(
[
optional
]
out
unsigned
long
aCount
[
retval
array
size_is
(
aCount
)
]
out
wstring
aNames
)
;
/
/
pseudo
-
class
style
locking
methods
.
aPseudoClass
must
be
a
valid
pseudo
-
class
/
/
selector
string
e
.
g
.
"
:
hover
"
.
"
:
any
-
link
"
and
non
-
event
-
state
/
/
pseudo
-
classes
are
ignored
.
aEnabled
sets
whether
the
psuedo
-
class
/
/
should
be
locked
to
on
or
off
.
[
optional_argc
]
void
addPseudoClassLock
(
in
nsIDOMElement
aElement
in
DOMString
aPseudoClass
[
optional
]
in
boolean
aEnabled
)
;
void
removePseudoClassLock
(
in
nsIDOMElement
aElement
in
DOMString
aPseudoClass
)
;
bool
hasPseudoClassLock
(
in
nsIDOMElement
aElement
in
DOMString
aPseudoClass
)
;
void
clearPseudoClassLocks
(
in
nsIDOMElement
aElement
)
;
/
*
*
*
Parse
CSS
and
update
the
style
sheet
in
place
.
*
*
param
DOMCSSStyleSheet
aSheet
*
param
DOMString
aInput
*
The
new
source
string
for
the
style
sheet
.
*
/
void
parseStyleSheet
(
in
nsIDOMCSSStyleSheet
aSheet
in
DOMString
aInput
)
;
/
*
*
*
Scroll
an
element
completely
into
view
if
possible
.
*
This
is
similar
to
ensureElementIsVisible
but
for
all
ancestors
.
*
*
param
DOMElement
aElement
*
/
void
scrollElementIntoView
(
in
nsIDOMElement
aElement
)
;
}
;
%
{
C
+
+
#
define
IN_DOMUTILS_CONTRACTID
"
mozilla
.
org
/
inspector
/
dom
-
utils
;
1
"
%
}
