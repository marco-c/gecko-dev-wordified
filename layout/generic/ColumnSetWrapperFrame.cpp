/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
*
file
You
can
obtain
one
at
https
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
include
"
ColumnSetWrapperFrame
.
h
"
using
namespace
mozilla
;
nsBlockFrame
*
NS_NewColumnSetWrapperFrame
(
nsIPresShell
*
aPresShell
ComputedStyle
*
aStyle
nsFrameState
aStateFlags
)
{
ColumnSetWrapperFrame
*
frame
=
new
(
aPresShell
)
ColumnSetWrapperFrame
(
aStyle
)
;
/
/
CSS
Multi
-
column
level
1
section
2
:
A
multi
-
column
container
/
/
establishes
a
new
block
formatting
context
as
per
CSS
2
.
1
section
/
/
9
.
4
.
1
.
frame
-
>
AddStateBits
(
aStateFlags
|
NS_BLOCK_FORMATTING_CONTEXT_STATE_BITS
)
;
return
frame
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
ColumnSetWrapperFrame
)
NS_QUERYFRAME_HEAD
(
ColumnSetWrapperFrame
)
NS_QUERYFRAME_ENTRY
(
ColumnSetWrapperFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsBlockFrame
)
ColumnSetWrapperFrame
:
:
ColumnSetWrapperFrame
(
ComputedStyle
*
aStyle
)
:
nsBlockFrame
(
aStyle
kClassID
)
{
}
nsContainerFrame
*
ColumnSetWrapperFrame
:
:
GetContentInsertionFrame
(
)
{
nsIFrame
*
columnSet
=
PrincipalChildList
(
)
.
OnlyChild
(
)
;
if
(
columnSet
)
{
/
/
We
have
only
one
child
which
means
we
don
'
t
have
any
column
-
span
/
/
descendants
.
Thus
we
can
safely
return
our
only
ColumnSet
child
'
s
/
/
insertion
frame
as
ours
.
MOZ_ASSERT
(
columnSet
-
>
IsColumnSetFrame
(
)
)
;
return
columnSet
-
>
GetContentInsertionFrame
(
)
;
}
/
/
We
have
column
-
span
descendants
.
Return
ourselves
as
the
insertion
/
/
frame
to
let
nsCSSFrameConstructor
:
:
WipeContainingBlock
(
)
figure
out
/
/
what
to
do
.
return
this
;
}
void
ColumnSetWrapperFrame
:
:
AppendDirectlyOwnedAnonBoxes
(
nsTArray
<
OwnedAnonBox
>
&
aResult
)
{
MOZ_ASSERT
(
!
GetPrevContinuation
(
)
"
Who
set
NS_FRAME_OWNS_ANON_BOXES
on
our
continuations
?
"
)
;
/
/
It
'
s
sufficient
to
append
the
first
ColumnSet
child
which
is
the
first
/
/
continuation
of
the
directly
owned
anon
boxes
.
nsIFrame
*
columnSet
=
PrincipalChildList
(
)
.
FirstChild
(
)
;
MOZ_ASSERT
(
columnSet
&
&
columnSet
-
>
IsColumnSetFrame
(
)
"
The
first
child
should
always
be
ColumnSet
!
"
)
;
aResult
.
AppendElement
(
OwnedAnonBox
(
columnSet
)
)
;
#
ifdef
DEBUG
/
/
All
the
other
ColumnSets
are
the
continuation
of
the
first
ColumnSet
;
/
/
the
-
moz
-
column
-
span
-
wrappers
are
the
continuations
of
other
blocks
in
/
/
-
moz
-
column
-
span
-
contents
.
for
(
nsIFrame
*
child
:
PrincipalChildList
(
)
)
{
if
(
child
=
=
columnSet
)
{
/
/
Skip
testing
the
first
child
.
continue
;
}
MOZ_ASSERT
(
(
child
-
>
IsColumnSetFrame
(
)
|
|
child
-
>
Style
(
)
-
>
GetPseudo
(
)
=
=
nsCSSAnonBoxes
:
:
columnSpanWrapper
(
)
)
&
&
child
-
>
GetPrevContinuation
(
)
"
Prev
continuation
is
not
set
properly
?
"
)
;
}
#
endif
}
#
ifdef
DEBUG_FRAME_DUMP
nsresult
ColumnSetWrapperFrame
:
:
GetFrameName
(
nsAString
&
aResult
)
const
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
ColumnSetWrapper
"
)
aResult
)
;
}
#
endif
/
/
Disallow
any
append
insert
or
remove
operations
after
building
the
/
/
column
hierarchy
since
any
change
to
the
column
hierarchy
in
the
column
/
/
sub
-
tree
need
to
be
re
-
created
.
void
ColumnSetWrapperFrame
:
:
AppendFrames
(
ChildListID
aListID
nsFrameList
&
aFrameList
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
!
mFinishedBuildingColumns
"
Should
only
call
once
!
"
)
;
mFinishedBuildingColumns
=
true
;
#
endif
nsBlockFrame
:
:
AppendFrames
(
aListID
aFrameList
)
;
}
void
ColumnSetWrapperFrame
:
:
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
nsFrameList
&
aFrameList
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unsupported
operation
!
"
)
;
nsBlockFrame
:
:
InsertFrames
(
aListID
aPrevFrame
aFrameList
)
;
}
void
ColumnSetWrapperFrame
:
:
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unsupported
operation
!
"
)
;
nsBlockFrame
:
:
RemoveFrame
(
aListID
aOldFrame
)
;
}
