/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
2
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
is
subject
to
the
terms
of
the
Mozilla
Public
License
*
version
2
.
0
(
the
"
License
"
)
.
You
can
obtain
a
copy
of
the
License
at
*
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
/
*
rendering
object
for
CSS
"
display
:
ruby
-
text
-
container
"
*
/
#
include
"
nsRubyTextContainerFrame
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsStyleContext
.
h
"
#
include
"
WritingModes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
using
namespace
mozilla
;
/
/
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
/
/
Frame
class
boilerplate
/
/
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
NS_QUERYFRAME_HEAD
(
nsRubyTextContainerFrame
)
NS_QUERYFRAME_ENTRY
(
nsRubyTextContainerFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsContainerFrame
)
NS_IMPL_FRAMEARENA_HELPERS
(
nsRubyTextContainerFrame
)
nsContainerFrame
*
NS_NewRubyTextContainerFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
{
return
new
(
aPresShell
)
nsRubyTextContainerFrame
(
aContext
)
;
}
/
/
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
/
/
nsRubyTextContainerFrame
Method
Implementations
/
/
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
nsIAtom
*
nsRubyTextContainerFrame
:
:
GetType
(
)
const
{
return
nsGkAtoms
:
:
rubyTextContainerFrame
;
}
#
ifdef
DEBUG_FRAME_DUMP
nsresult
nsRubyTextContainerFrame
:
:
GetFrameName
(
nsAString
&
aResult
)
const
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
RubyTextContainer
"
)
aResult
)
;
}
#
endif
/
*
virtual
*
/
bool
nsRubyTextContainerFrame
:
:
IsFrameOfType
(
uint32_t
aFlags
)
const
{
if
(
aFlags
&
eSupportsCSSTransforms
)
{
return
false
;
}
return
nsRubyTextContainerFrameSuper
:
:
IsFrameOfType
(
aFlags
)
;
}
/
*
virtual
*
/
void
nsRubyTextContainerFrame
:
:
Reflow
(
nsPresContext
*
aPresContext
nsHTMLReflowMetrics
&
aDesiredSize
const
nsHTMLReflowState
&
aReflowState
nsReflowStatus
&
aStatus
)
{
DO_GLOBAL_REFLOW_COUNT
(
"
nsRubyTextContainerFrame
"
)
;
DISPLAY_REFLOW
(
aPresContext
this
aReflowState
aDesiredSize
aStatus
)
;
/
/
All
rt
children
have
already
been
reflowed
.
All
we
need
to
do
is
/
/
to
report
complete
and
return
the
desired
size
.
/
/
Although
a
ruby
text
container
may
have
continuations
returning
/
/
NS_FRAME_COMPLETE
here
is
still
safe
since
its
parent
ruby
frame
/
/
ignores
the
status
and
continuations
of
the
ruby
base
container
/
/
will
take
care
of
our
continuations
.
aStatus
=
NS_FRAME_COMPLETE
;
WritingMode
lineWM
=
aReflowState
.
mLineLayout
-
>
GetWritingMode
(
)
;
WritingMode
frameWM
=
aReflowState
.
GetWritingMode
(
)
;
LogicalMargin
borderPadding
=
aReflowState
.
ComputedLogicalBorderPadding
(
)
;
/
/
ISize
is
provided
by
the
ruby
base
container
/
/
during
reflow
of
that
container
.
aDesiredSize
.
ISize
(
lineWM
)
=
mISize
;
nsLayoutUtils
:
:
SetBSizeFromFontMetrics
(
this
aDesiredSize
aReflowState
borderPadding
lineWM
frameWM
)
;
}
