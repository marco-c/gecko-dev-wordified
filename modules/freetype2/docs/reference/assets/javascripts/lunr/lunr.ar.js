/
*
!
*
Lunr
languages
Arabic
language
*
https
:
/
/
github
.
com
/
MihaiValentin
/
lunr
-
languages
*
*
Copyright
2018
Dalia
Al
-
Shahrabi
*
http
:
/
/
www
.
mozilla
.
org
/
MPL
/
*
/
/
*
!
*
based
on
*
Kazem
Taghva
Rania
Elkhoury
and
Jeffrey
Coombs
(
2005
)
*
Meryeme
Hadni
Abdelmonaime
Lachkar
and
S
.
Alaoui
Ouatik
(
2012
)
*
*
Snowball
JavaScript
Library
v0
.
3
*
http
:
/
/
code
.
google
.
com
/
p
/
urim
/
*
http
:
/
/
snowball
.
tartarus
.
org
/
*
*
Copyright
2010
Oleg
Mazko
*
http
:
/
/
www
.
mozilla
.
org
/
MPL
/
*
/
!
function
(
e
r
)
{
"
function
"
=
=
typeof
define
&
&
define
.
amd
?
define
(
r
)
:
"
object
"
=
=
typeof
exports
?
module
.
exports
=
r
(
)
:
r
(
)
(
e
.
lunr
)
}
(
this
function
(
)
{
return
function
(
e
)
{
if
(
void
0
=
=
=
e
)
throw
new
Error
(
"
Lunr
is
not
present
.
Please
include
/
require
Lunr
before
this
script
.
"
)
;
if
(
void
0
=
=
=
e
.
stemmerSupport
)
throw
new
Error
(
"
Lunr
stemmer
support
is
not
present
.
Please
include
/
require
Lunr
stemmer
support
before
this
script
.
"
)
;
e
.
ar
=
function
(
)
{
this
.
pipeline
.
reset
(
)
this
.
pipeline
.
add
(
e
.
ar
.
trimmer
e
.
ar
.
stopWordFilter
e
.
ar
.
stemmer
)
this
.
searchPipeline
&
&
(
this
.
searchPipeline
.
reset
(
)
this
.
searchPipeline
.
add
(
e
.
ar
.
stemmer
)
)
}
e
.
ar
.
wordCharacters
=
"
-
"
e
.
ar
.
trimmer
=
e
.
trimmerSupport
.
generateTrimmer
(
e
.
ar
.
wordCharacters
)
e
.
Pipeline
.
registerFunction
(
e
.
ar
.
trimmer
"
trimmer
-
ar
"
)
e
.
ar
.
stemmer
=
function
(
)
{
var
m
=
this
;
return
m
.
result
=
!
1
m
.
preRemoved
=
!
1
m
.
sufRemoved
=
!
1
m
.
pre
=
{
pre1
:
"
"
pre2
:
"
"
pre3
:
"
"
pre4
:
"
"
}
m
.
suf
=
{
suf1
:
"
"
suf2
:
"
"
suf3
:
"
"
suf4
:
"
"
}
m
.
patterns
=
JSON
.
parse
(
'
{
"
pt43
"
:
[
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
1
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
]
"
mPt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
"
m
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
1
"
m
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
2
"
m
"
:
3
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
2
}
]
"
mPt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
"
m
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
"
m
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
"
m
"
:
3
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
2
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
2
}
]
"
mPt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
"
m
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
"
m
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
3
"
m
"
:
3
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
]
}
]
"
pt53
"
:
[
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
2
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
2
}
]
"
mPt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
"
m
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
3
"
m
"
:
3
}
{
"
c
"
:
"
"
"
l
"
:
4
}
{
"
c
"
:
"
"
"
l
"
:
5
"
m
"
:
4
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
2
}
]
"
mPt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
"
m
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
"
m
"
:
3
}
{
"
c
"
:
"
"
"
l
"
:
3
"
m
"
:
4
}
{
"
c
"
:
"
"
"
l
"
:
4
}
{
"
c
"
:
"
"
"
l
"
:
5
"
m
"
:
4
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
3
}
]
"
mPt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
"
m
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
1
"
m
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
2
"
m
"
:
4
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
3
}
{
"
c
"
:
"
"
"
l
"
:
4
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
3
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
3
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
3
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
3
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
3
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
3
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
}
]
"
mPt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
"
m
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
3
"
m
"
:
3
}
{
"
c
"
:
"
"
"
l
"
:
4
}
{
"
c
"
:
"
"
"
l
"
:
5
"
m
"
:
4
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
2
}
]
"
mPt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
"
m
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
3
"
m
"
:
3
}
{
"
c
"
:
"
"
"
l
"
:
4
}
{
"
c
"
:
"
"
"
l
"
:
5
"
m
"
:
4
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
2
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
3
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
}
]
"
mPt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
"
m
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
1
"
m
"
:
3
}
{
"
c
"
:
"
"
"
l
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
3
"
m
"
:
4
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
2
}
]
"
mPt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
"
m
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
3
"
m
"
:
3
}
{
"
c
"
:
"
"
"
l
"
:
4
}
{
"
c
"
:
"
"
"
l
"
:
5
"
m
"
:
4
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
3
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
}
]
"
mPt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
"
m
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
3
"
m
"
:
3
}
{
"
c
"
:
"
"
"
l
"
:
4
}
{
"
c
"
:
"
"
"
l
"
:
5
"
m
"
:
4
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
3
}
{
"
c
"
:
"
"
"
l
"
:
4
}
]
}
]
"
pt63
"
:
[
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
4
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
}
]
"
mPt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
3
"
m
"
:
3
}
{
"
c
"
:
"
"
"
l
"
:
4
"
m
"
:
4
}
{
"
c
"
:
"
"
"
l
"
:
5
}
{
"
c
"
:
"
"
"
l
"
:
6
"
m
"
:
5
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
3
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
}
]
"
mPt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
3
"
m
"
:
3
}
{
"
c
"
:
"
"
"
l
"
:
4
"
m
"
:
4
}
{
"
c
"
:
"
"
"
l
"
:
5
}
{
"
c
"
:
"
"
"
l
"
:
6
"
m
"
:
5
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
3
}
{
"
c
"
:
"
"
"
l
"
:
4
}
{
"
c
"
:
"
"
"
l
"
:
5
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
4
}
]
}
]
"
pt54
"
:
[
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
]
"
mPt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
"
m
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
"
m
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
3
"
m
"
:
3
}
{
"
c
"
:
"
"
"
l
"
:
4
"
m
"
:
4
}
{
"
c
"
:
"
"
"
l
"
:
5
}
{
"
c
"
:
"
"
"
l
"
:
6
"
m
"
:
4
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
]
"
mPt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
"
m
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
"
m
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
3
"
m
"
:
3
}
{
"
c
"
:
"
"
"
l
"
:
4
"
m
"
:
4
}
{
"
c
"
:
"
"
"
l
"
:
5
}
{
"
c
"
:
"
"
"
l
"
:
6
"
m
"
:
4
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
2
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
2
}
]
}
]
"
pt64
"
:
[
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
4
}
]
}
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
}
]
}
]
"
pt73
"
:
[
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
1
}
{
"
c
"
:
"
"
"
l
"
:
2
}
{
"
c
"
:
"
"
"
l
"
:
5
}
]
}
]
"
pt75
"
:
[
{
"
pt
"
:
[
{
"
c
"
:
"
"
"
l
"
:
0
}
{
"
c
"
:
"
"
"
l
"
:
5
}
]
}
]
}
'
)
m
.
execArray
=
[
"
cleanWord
"
"
removeDiacritics
"
"
cleanAlef
"
"
removeStopWords
"
"
normalizeHamzaAndAlef
"
"
removeStartWaw
"
"
removePre432
"
"
removeEndTaa
"
"
wordCheck
"
]
m
.
stem
=
function
(
)
{
var
e
=
0
;
for
(
m
.
result
=
!
1
m
.
preRemoved
=
!
1
m
.
sufRemoved
=
!
1
;
e
<
m
.
execArray
.
length
&
&
1
!
=
m
.
result
;
)
m
.
result
=
m
[
m
.
execArray
[
e
]
]
(
)
e
+
+
}
m
.
setCurrent
=
function
(
e
)
{
m
.
word
=
e
}
m
.
getCurrent
=
function
(
)
{
return
m
.
word
}
m
.
cleanWord
=
function
(
)
{
var
e
=
new
RegExp
(
"
[
^
-
]
"
)
;
return
m
.
word
=
m
.
word
.
replace
(
"
"
"
"
)
!
!
e
.
test
(
"
"
)
}
m
.
removeDiacritics
=
function
(
)
{
new
RegExp
(
"
[
-
]
"
)
;
return
m
.
word
=
m
.
word
.
replace
(
/
[
\
u064b
-
\
u065b
]
/
gi
"
"
)
!
1
}
m
.
cleanAlef
=
function
(
)
{
var
e
=
new
RegExp
(
"
[
]
"
)
;
return
m
.
word
=
m
.
word
.
replace
(
e
"
"
)
!
1
}
m
.
removeStopWords
=
function
(
)
{
if
(
0
<
=
"
"
.
split
(
"
"
)
.
indexOf
(
m
.
word
)
)
return
!
0
}
m
.
normalizeHamzaAndAlef
=
function
(
)
{
return
m
.
word
=
m
.
word
.
replace
(
"
"
"
"
)
m
.
word
=
m
.
word
.
replace
(
"
"
"
"
)
m
.
word
=
m
.
word
.
replace
(
/
(
[
\
u0627
]
)
\
1
+
/
gi
"
"
)
!
1
}
m
.
removeEndTaa
=
function
(
)
{
return
!
(
2
<
m
.
word
.
length
)
|
|
(
m
.
word
=
m
.
word
.
replace
(
/
[
\
u0627
]
/
"
"
)
m
.
word
=
m
.
word
.
replace
(
"
"
"
"
)
!
1
)
}
m
.
removeStartWaw
=
function
(
)
{
return
3
<
m
.
word
.
length
&
&
"
"
=
=
m
.
word
[
0
]
&
&
"
"
=
=
m
.
word
[
1
]
&
&
(
m
.
word
=
m
.
word
.
slice
(
1
)
)
!
1
}
m
.
removePre432
=
function
(
)
{
var
e
=
m
.
word
;
if
(
7
<
=
m
.
word
.
length
)
{
var
r
=
new
RegExp
(
"
^
(
"
+
m
.
pre
.
pre4
.
split
(
"
"
)
.
join
(
"
|
"
)
+
"
)
"
)
;
m
.
word
=
m
.
word
.
replace
(
r
"
"
)
}
if
(
m
.
word
=
=
e
&
&
6
<
=
m
.
word
.
length
)
{
var
t
=
new
RegExp
(
"
^
(
"
+
m
.
pre
.
pre3
.
split
(
"
"
)
.
join
(
"
|
"
)
+
"
)
"
)
;
m
.
word
=
m
.
word
.
replace
(
t
"
"
)
}
if
(
m
.
word
=
=
e
&
&
5
<
=
m
.
word
.
length
)
{
var
c
=
new
RegExp
(
"
^
(
"
+
m
.
pre
.
pre2
.
split
(
"
"
)
.
join
(
"
|
"
)
+
"
)
"
)
;
m
.
word
=
m
.
word
.
replace
(
c
"
"
)
}
return
e
!
=
m
.
word
&
&
(
m
.
preRemoved
=
!
0
)
!
1
}
m
.
patternCheck
=
function
(
r
)
{
for
(
var
t
=
0
;
t
<
r
.
length
;
t
+
+
)
{
for
(
var
e
=
!
0
c
=
0
;
c
<
r
[
t
]
.
pt
.
length
;
c
+
+
)
{
var
l
=
r
[
t
]
.
pt
[
c
]
.
c
.
split
(
"
"
)
o
=
!
1
;
if
(
l
.
forEach
(
function
(
e
)
{
m
.
word
[
r
[
t
]
.
pt
[
c
]
.
l
]
=
=
e
&
&
(
o
=
!
0
)
}
)
!
o
)
{
e
=
!
1
;
break
}
}
if
(
1
=
=
e
)
{
if
(
r
[
t
]
.
mPt
)
{
for
(
var
n
=
[
]
p
=
0
;
p
<
r
[
t
]
.
mPt
.
length
;
p
+
+
)
null
!
=
r
[
t
]
.
mPt
[
p
]
.
m
?
n
[
r
[
t
]
.
mPt
[
p
]
.
l
]
=
m
.
word
[
r
[
t
]
.
mPt
[
p
]
.
m
]
:
n
[
r
[
t
]
.
mPt
[
p
]
.
l
]
=
r
[
t
]
.
mPt
[
p
]
.
c
;
m
.
word
=
n
.
join
(
"
"
)
}
m
.
result
=
!
0
;
break
}
}
}
m
.
removePre1
=
function
(
)
{
var
e
=
m
.
word
;
if
(
0
=
=
m
.
preRemoved
&
&
3
<
m
.
word
.
length
)
{
var
r
=
new
RegExp
(
"
^
(
"
+
m
.
pre
.
pre1
.
split
(
"
"
)
.
join
(
"
|
"
)
+
"
)
"
)
;
m
.
word
=
m
.
word
.
replace
(
r
"
"
)
}
return
e
!
=
m
.
word
&
&
(
m
.
preRemoved
=
!
0
)
!
1
}
m
.
removeSuf1
=
function
(
)
{
var
e
=
m
.
word
;
if
(
0
=
=
m
.
sufRemoved
&
&
3
<
m
.
word
.
length
)
{
var
r
=
new
RegExp
(
"
(
"
+
m
.
suf
.
suf1
.
split
(
"
"
)
.
join
(
"
|
"
)
+
"
)
"
)
;
m
.
word
=
m
.
word
.
replace
(
r
"
"
)
}
return
e
!
=
m
.
word
&
&
(
m
.
sufRemoved
=
!
0
)
!
1
}
m
.
removeSuf432
=
function
(
)
{
var
e
=
m
.
word
;
if
(
6
<
=
m
.
word
.
length
)
{
var
r
=
new
RegExp
(
"
(
"
+
m
.
suf
.
suf4
.
split
(
"
"
)
.
join
(
"
|
"
)
+
"
)
"
)
;
m
.
word
=
m
.
word
.
replace
(
r
"
"
)
}
if
(
m
.
word
=
=
e
&
&
5
<
=
m
.
word
.
length
)
{
var
t
=
new
RegExp
(
"
(
"
+
m
.
suf
.
suf3
.
split
(
"
"
)
.
join
(
"
|
"
)
+
"
)
"
)
;
m
.
word
=
m
.
word
.
replace
(
t
"
"
)
}
if
(
m
.
word
=
=
e
&
&
4
<
=
m
.
word
.
length
)
{
var
c
=
new
RegExp
(
"
(
"
+
m
.
suf
.
suf2
.
split
(
"
"
)
.
join
(
"
|
"
)
+
"
)
"
)
;
m
.
word
=
m
.
word
.
replace
(
c
"
"
)
}
return
e
!
=
m
.
word
&
&
(
m
.
sufRemoved
=
!
0
)
!
1
}
m
.
wordCheck
=
function
(
)
{
m
.
word
;
for
(
var
e
=
[
m
.
removeSuf432
m
.
removeSuf1
m
.
removePre1
]
r
=
0
t
=
!
1
;
7
<
=
m
.
word
.
length
&
&
!
m
.
result
&
&
r
<
e
.
length
;
)
t
=
7
!
=
m
.
word
.
length
|
|
t
?
(
e
[
r
]
(
)
r
+
+
!
1
)
:
(
m
.
checkPattern73
(
)
!
0
)
;
var
c
=
[
m
.
checkPattern63
m
.
removeSuf432
m
.
removeSuf1
m
.
removePre1
m
.
checkPattern64
]
;
for
(
r
=
0
;
6
=
=
m
.
word
.
length
&
&
!
m
.
result
&
&
r
<
c
.
length
;
)
c
[
r
]
(
)
r
+
+
;
var
l
=
[
m
.
checkPattern53
m
.
removeSuf432
m
.
removeSuf1
m
.
removePre1
m
.
checkPattern54
]
;
for
(
r
=
0
;
5
=
=
m
.
word
.
length
&
&
!
m
.
result
&
&
r
<
l
.
length
;
)
l
[
r
]
(
)
r
+
+
;
var
o
=
[
m
.
checkPattern43
m
.
removeSuf1
m
.
removePre1
m
.
removeSuf432
]
;
for
(
r
=
0
;
4
=
=
m
.
word
.
length
&
&
!
m
.
result
&
&
r
<
o
.
length
;
)
o
[
r
]
(
)
r
+
+
;
return
!
0
}
m
.
checkPattern43
=
function
(
)
{
m
.
patternCheck
(
m
.
patterns
.
pt43
)
}
m
.
checkPattern53
=
function
(
)
{
m
.
patternCheck
(
m
.
patterns
.
pt53
)
}
m
.
checkPattern54
=
function
(
)
{
m
.
patternCheck
(
m
.
patterns
.
pt54
)
}
m
.
checkPattern63
=
function
(
)
{
m
.
patternCheck
(
m
.
patterns
.
pt63
)
}
m
.
checkPattern64
=
function
(
)
{
m
.
patternCheck
(
m
.
patterns
.
pt64
)
}
m
.
checkPattern73
=
function
(
)
{
m
.
patternCheck
(
m
.
patterns
.
pt73
)
}
function
(
e
)
{
return
"
function
"
=
=
typeof
e
.
update
?
e
.
update
(
function
(
e
)
{
return
m
.
setCurrent
(
e
)
m
.
stem
(
)
m
.
getCurrent
(
)
}
)
:
(
m
.
setCurrent
(
e
)
m
.
stem
(
)
m
.
getCurrent
(
)
)
}
}
(
)
e
.
Pipeline
.
registerFunction
(
e
.
ar
.
stemmer
"
stemmer
-
ar
"
)
e
.
ar
.
stopWordFilter
=
e
.
generateStopWordFilter
(
"
"
.
split
(
"
"
)
)
e
.
Pipeline
.
registerFunction
(
e
.
ar
.
stopWordFilter
"
stopWordFilter
-
ar
"
)
}
}
)
;
