!
function
(
n
)
{
if
(
"
object
"
=
=
typeof
exports
&
&
"
undefined
"
!
=
typeof
module
)
module
.
exports
=
n
(
)
;
else
if
(
"
function
"
=
=
typeof
define
&
&
define
.
amd
)
define
(
[
]
n
)
;
else
{
var
t
;
(
(
t
=
"
undefined
"
!
=
typeof
window
?
window
:
"
undefined
"
!
=
typeof
global
?
global
:
"
undefined
"
!
=
typeof
self
?
self
:
this
)
.
lunr
|
|
(
t
.
lunr
=
{
}
)
)
.
wordcut
=
n
(
)
}
}
(
function
(
)
{
return
function
o
(
s
a
c
)
{
function
u
(
e
n
)
{
if
(
!
a
[
e
]
)
{
if
(
!
s
[
e
]
)
{
var
t
=
"
function
"
=
=
typeof
require
&
&
require
;
if
(
!
n
&
&
t
)
return
t
(
e
!
0
)
;
if
(
l
)
return
l
(
e
!
0
)
;
var
r
=
new
Error
(
"
Cannot
find
module
'
"
+
e
+
"
'
"
)
;
throw
r
.
code
=
"
MODULE_NOT_FOUND
"
r
}
var
i
=
a
[
e
]
=
{
exports
:
{
}
}
;
s
[
e
]
[
0
]
.
call
(
i
.
exports
function
(
n
)
{
var
t
=
s
[
e
]
[
1
]
[
n
]
;
return
u
(
t
|
|
n
)
}
i
i
.
exports
o
s
a
c
)
}
return
a
[
e
]
.
exports
}
for
(
var
l
=
"
function
"
=
=
typeof
require
&
&
require
n
=
0
;
n
<
c
.
length
;
n
+
+
)
u
(
c
[
n
]
)
;
return
u
}
(
{
1
:
[
function
(
n
t
e
)
{
var
r
=
n
(
"
underscore
"
)
i
=
{
creators
:
null
current
:
null
tag
:
null
init
:
function
(
)
{
this
.
creators
=
[
]
this
.
current
=
[
]
this
.
tag
=
{
}
}
reset
:
function
(
)
{
this
.
current
=
[
]
this
.
tag
=
{
}
}
transit
:
function
(
n
)
{
var
e
=
this
;
e
.
creators
.
forEach
(
function
(
n
)
{
var
t
=
n
.
createAcceptor
(
e
.
tag
)
;
t
&
&
e
.
current
.
push
(
t
)
}
)
;
var
t
=
[
]
;
e
.
tag
=
{
}
;
for
(
var
r
=
0
;
r
<
e
.
current
.
length
;
r
+
+
)
{
var
i
=
e
.
current
[
r
]
.
transit
(
n
)
;
i
.
isError
|
|
(
t
.
push
(
i
)
e
.
tag
[
i
.
tag
]
=
i
)
}
e
.
current
=
t
}
getFinalAcceptors
:
function
(
)
{
return
this
.
current
.
filter
(
function
(
n
)
{
return
n
.
isFinal
}
)
}
}
;
t
.
exports
=
function
(
)
{
var
n
=
r
.
clone
(
i
)
;
return
n
.
init
(
)
n
}
}
{
underscore
:
25
}
]
2
:
[
function
(
t
e
n
)
{
(
function
(
o
)
{
var
s
=
t
(
"
path
"
)
n
=
(
t
(
"
glob
"
)
{
init
:
function
(
n
t
e
)
{
t
=
t
|
|
!
1
defaultDict
=
s
.
normalize
(
o
+
"
/
.
.
"
)
+
"
/
data
/
tdict
-
*
.
txt
"
this
.
dict
=
[
]
;
var
r
=
void
0
!
=
=
n
i
=
t
|
|
!
r
?
[
defaultDict
]
:
[
]
;
n
=
n
|
|
defaultDict
;
r
&
&
(
Array
.
isArray
(
n
)
?
i
.
concat
.
apply
(
i
n
)
:
i
.
push
(
n
)
)
this
.
addFiles
(
i
!
1
)
void
0
!
=
=
e
&
&
this
.
addWords
(
e
!
1
)
this
.
finalizeDict
(
)
}
addWords
:
function
(
n
t
)
{
t
=
void
0
=
=
=
t
|
|
t
this
.
dict
.
push
.
apply
(
this
.
dict
n
)
t
&
&
this
.
finalizeDict
(
)
}
finalizeDict
:
function
(
)
{
this
.
dict
=
this
.
sortuniq
(
this
.
dict
)
}
addFiles
:
function
(
n
t
)
{
t
=
void
0
=
=
=
t
|
|
t
;
for
(
var
e
=
0
;
e
<
1
;
e
+
+
)
words
=
"
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
\
n
.
.
\
n
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
.
\
n
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
.
\
n
.
.
\
n
.
.
1
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
.
\
n
.
.
.
.
\
n
.
.
.
\
n
.
.
.
\
n
.
.
\
n
.
.
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
.
.
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
\
n
"
.
split
(
/
[
\
r
\
n
]
+
/
)
.
filter
(
function
(
n
)
{
return
1
<
n
.
length
}
)
this
.
addWords
(
words
!
1
)
;
t
&
&
this
.
finalizeDict
(
)
}
dictSeek
:
function
(
n
t
e
r
i
)
{
for
(
var
o
=
null
;
n
<
=
t
;
)
{
var
s
=
Math
.
floor
(
(
n
+
t
)
/
2
)
a
=
this
.
dict
[
s
]
;
if
(
a
.
length
<
=
r
)
n
=
s
+
1
;
else
{
var
c
=
a
[
r
]
;
c
<
e
?
n
=
s
+
1
:
e
<
c
?
t
=
s
-
1
:
(
o
=
s
0
=
=
i
?
t
=
s
-
1
:
n
=
s
+
1
)
}
}
return
o
}
isFinal
:
function
(
n
)
{
return
this
.
dict
[
n
.
l
]
.
length
=
=
n
.
strOffset
}
createAcceptor
:
function
(
)
{
return
{
l
:
0
r
:
this
.
dict
.
length
-
1
strOffset
:
0
isFinal
:
!
1
dict
:
this
transit
:
function
(
n
)
{
return
this
.
dict
.
transit
(
this
n
)
}
isError
:
!
1
tag
:
"
DICT
"
w
:
1
type
:
"
DICT
"
}
}
transit
:
function
(
n
t
)
{
var
e
=
this
.
dictSeek
(
n
.
l
n
.
r
t
n
.
strOffset
0
)
;
if
(
null
!
=
=
e
)
{
var
r
=
this
.
dictSeek
(
e
n
.
r
t
n
.
strOffset
1
)
;
n
.
l
=
e
n
.
r
=
r
n
.
strOffset
+
+
n
.
isFinal
=
this
.
isFinal
(
n
)
}
else
n
.
isError
=
!
0
;
return
n
}
sortuniq
:
function
(
n
)
{
return
n
.
sort
(
)
.
filter
(
function
(
n
t
e
)
{
return
!
t
|
|
n
!
=
e
[
t
-
1
]
}
)
}
flatten
:
function
(
n
)
{
return
[
]
.
concat
.
apply
(
[
]
n
)
}
}
)
;
e
.
exports
=
n
}
)
.
call
(
this
"
/
dist
/
tmp
"
)
}
{
glob
:
16
path
:
22
}
]
3
:
[
function
(
n
t
e
)
{
var
r
=
{
tag
:
"
SPACE_RULE
"
createAcceptor
:
function
(
n
)
{
return
n
.
SPACE_RULE
?
null
:
{
strOffset
:
0
isFinal
:
!
1
transit
:
function
(
n
)
{
return
"
"
=
=
n
|
|
"
\
t
"
=
=
n
|
|
"
\
r
"
=
=
n
|
|
"
\
n
"
=
=
n
|
|
"
"
=
=
n
|
|
"
"
=
=
n
?
(
this
.
isFinal
=
!
0
this
.
strOffset
+
+
)
:
this
.
isError
=
!
0
this
}
isError
:
!
1
tag
:
r
.
tag
w
:
1
type
:
"
SPACE_RULE
"
}
}
}
i
=
[
{
createAcceptor
:
function
(
n
)
{
return
n
.
WORD_RULE
?
null
:
{
strOffset
:
0
isFinal
:
!
1
transit
:
function
(
n
)
{
var
t
=
n
.
toLowerCase
(
)
;
return
"
a
"
<
=
t
&
&
t
<
=
"
z
"
?
(
this
.
isFinal
=
!
0
this
.
strOffset
+
+
)
:
this
.
isError
=
!
0
this
}
isError
:
!
1
tag
:
"
WORD_RULE
"
type
:
"
WORD_RULE
"
w
:
1
}
}
}
r
{
tag
:
"
SINSYM
"
createAcceptor
:
function
(
n
)
{
return
{
strOffset
:
0
isFinal
:
!
1
transit
:
function
(
n
)
{
return
0
=
=
this
.
strOffset
&
&
n
.
match
(
/
^
[
\
\
(
\
)
\
/
\
\
-
\
.
"
]
/
)
?
(
this
.
isFinal
=
!
0
this
.
strOffset
+
+
)
:
this
.
isError
=
!
0
this
}
isError
:
!
1
tag
:
"
SINSYM
"
w
:
1
type
:
"
SINSYM
"
}
}
}
{
createAcceptor
:
function
(
n
)
{
return
n
.
NUMBER_RULE
?
null
:
{
strOffset
:
0
isFinal
:
!
1
transit
:
function
(
n
)
{
return
"
0
"
<
=
n
&
&
n
<
=
"
9
"
?
(
this
.
isFinal
=
!
0
this
.
strOffset
+
+
)
:
this
.
isError
=
!
0
this
}
isError
:
!
1
tag
:
"
NUMBER_RULE
"
type
:
"
NUMBER_RULE
"
w
:
1
}
}
}
]
;
t
.
exports
=
i
}
{
}
]
4
:
[
function
(
n
t
e
)
{
var
r
=
n
(
"
underscore
"
)
i
=
(
n
(
"
.
/
wordcut_core
"
)
{
buildByAcceptors
:
function
(
o
n
s
)
{
return
n
.
map
(
function
(
n
)
{
var
t
=
s
-
n
.
strOffset
+
1
e
=
o
[
t
]
r
=
{
p
:
t
mw
:
e
.
mw
+
(
void
0
=
=
=
n
.
mw
?
0
:
n
.
mw
)
w
:
n
.
w
+
e
.
w
unk
:
(
n
.
unk
?
n
.
unk
:
0
)
+
e
.
unk
type
:
n
.
type
}
;
if
(
"
PART
"
=
=
n
.
type
)
{
for
(
var
i
=
t
+
1
;
i
<
=
s
;
i
+
+
)
o
[
i
]
.
merge
=
t
;
r
.
merge
=
t
}
return
r
}
)
.
filter
(
function
(
n
)
{
return
n
}
)
}
fallback
:
function
(
n
t
e
r
)
{
var
i
=
n
[
t
]
;
return
e
[
r
]
.
match
(
/
[
\
u0E48
-
\
u0E4E
]
/
)
?
(
0
!
=
t
&
&
(
t
=
n
[
t
]
.
p
)
{
p
:
t
mw
:
0
w
:
1
+
i
.
w
unk
:
1
+
i
.
unk
type
:
"
UNK
"
}
)
:
{
p
:
t
mw
:
i
.
mw
w
:
1
+
i
.
w
unk
:
1
+
i
.
unk
type
:
"
UNK
"
}
}
build
:
function
(
n
t
e
r
i
)
{
var
o
=
this
.
buildByAcceptors
(
n
t
e
)
;
return
0
<
o
.
length
?
o
:
[
this
.
fallback
(
n
r
i
e
)
]
}
}
)
;
t
.
exports
=
function
(
)
{
return
r
.
clone
(
i
)
}
}
{
"
.
/
wordcut_core
"
:
8
underscore
:
25
}
]
5
:
[
function
(
n
t
e
)
{
var
r
=
n
(
"
underscore
"
)
i
=
{
selectPath
:
function
(
n
)
{
return
n
.
reduce
(
function
(
n
t
)
{
if
(
null
=
=
n
)
return
t
;
if
(
t
.
unk
<
n
.
unk
)
return
t
;
if
(
t
.
unk
=
=
n
.
unk
)
{
if
(
t
.
mw
<
n
.
mw
)
return
t
;
if
(
t
.
mw
=
=
n
.
mw
&
&
t
.
w
<
n
.
w
)
return
t
}
return
n
}
null
)
}
createPath
:
function
(
)
{
return
[
{
p
:
null
w
:
0
unk
:
0
type
:
"
INIT
"
mw
:
0
}
]
}
}
;
t
.
exports
=
function
(
)
{
return
r
.
clone
(
i
)
}
}
{
underscore
:
25
}
]
6
:
[
function
(
n
t
e
)
{
function
i
(
n
t
e
)
{
if
(
n
.
length
<
=
t
)
return
!
1
;
var
r
=
n
[
t
]
;
return
r
=
=
e
|
|
r
.
match
(
/
[
]
/
)
&
&
e
.
match
(
/
[
-
]
/
)
|
|
r
.
match
(
/
[
]
/
)
&
&
e
.
match
(
/
[
-
]
/
)
|
|
r
.
match
(
/
\
u0E49
/
)
&
&
e
.
match
(
/
[
\
u0E48
-
\
u0E4B
]
/
)
}
var
r
=
{
pat
:
"
"
createAcceptor
:
function
(
n
)
{
return
{
strOffset
:
0
isFinal
:
!
1
transit
:
function
(
n
)
{
return
i
(
r
.
pat
this
.
strOffset
n
)
?
(
this
.
isFinal
=
this
.
strOffset
+
1
=
=
r
.
pat
.
length
this
.
strOffset
+
+
)
:
this
.
isError
=
!
0
this
}
isError
:
!
1
tag
:
"
THAI_RULE
"
type
:
"
THAI_RULE
"
w
:
1
}
}
}
o
=
[
r
{
createAcceptor
:
function
(
n
)
{
return
{
strOffset
:
0
patterns
:
[
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
]
isFinal
:
!
1
transit
:
function
(
t
)
{
var
e
=
this
.
strOffset
;
if
(
this
.
patterns
=
this
.
patterns
.
filter
(
function
(
n
)
{
return
i
(
n
e
t
)
}
)
0
<
this
.
patterns
.
length
)
{
var
r
=
1
+
e
;
this
.
isFinal
=
this
.
patterns
.
some
(
function
(
n
)
{
return
n
.
length
=
=
r
}
)
this
.
strOffset
+
+
}
else
this
.
isError
=
!
0
;
return
this
}
isError
:
!
1
tag
:
"
PART
"
type
:
"
PART
"
unk
:
1
w
:
1
}
}
}
]
;
t
.
exports
=
o
}
{
}
]
7
:
[
function
(
n
t
e
)
{
n
(
"
sys
"
)
;
var
r
=
n
(
"
.
/
dict
"
)
i
=
n
(
"
.
/
wordcut_core
"
)
o
=
n
(
"
.
/
path_info_builder
"
)
s
=
n
(
"
.
/
path_selector
"
)
a
=
n
(
"
.
/
acceptors
"
)
c
=
n
(
"
.
/
latin_rules
"
)
u
=
n
(
"
.
/
thai_rules
"
)
l
=
n
(
"
underscore
"
)
f
=
Object
.
create
(
i
)
;
f
.
defaultPathInfoBuilder
=
o
f
.
defaultPathSelector
=
s
f
.
defaultAcceptors
=
a
f
.
defaultLatinRules
=
c
f
.
defaultThaiRules
=
u
f
.
defaultDict
=
r
f
.
initNoDict
=
function
(
n
)
{
var
t
=
this
;
t
.
pathInfoBuilder
=
new
t
.
defaultPathInfoBuilder
t
.
pathSelector
=
new
t
.
defaultPathSelector
t
.
acceptors
=
new
t
.
defaultAcceptors
t
.
defaultLatinRules
.
forEach
(
function
(
n
)
{
t
.
acceptors
.
creators
.
push
(
n
)
}
)
t
.
defaultThaiRules
.
forEach
(
function
(
n
)
{
t
.
acceptors
.
creators
.
push
(
n
)
}
)
}
f
.
init
=
function
(
n
t
e
)
{
t
=
t
|
|
!
1
this
.
initNoDict
(
)
;
var
r
=
l
.
clone
(
this
.
defaultDict
)
;
r
.
init
(
n
t
e
)
this
.
acceptors
.
creators
.
push
(
r
)
}
t
.
exports
=
f
}
{
"
.
/
acceptors
"
:
1
"
.
/
dict
"
:
2
"
.
/
latin_rules
"
:
3
"
.
/
path_info_builder
"
:
4
"
.
/
path_selector
"
:
5
"
.
/
thai_rules
"
:
6
"
.
/
wordcut_core
"
:
8
sys
:
28
underscore
:
25
}
]
8
:
[
function
(
n
t
e
)
{
var
r
=
{
buildPath
:
function
(
n
)
{
var
t
=
this
e
=
t
.
pathSelector
.
createPath
(
)
r
=
0
;
t
.
acceptors
.
reset
(
)
;
for
(
var
i
=
0
;
i
<
n
.
length
;
i
+
+
)
{
var
o
=
n
[
i
]
;
t
.
acceptors
.
transit
(
o
)
;
var
s
=
t
.
pathInfoBuilder
.
build
(
e
t
.
acceptors
.
getFinalAcceptors
(
)
i
r
n
)
a
=
t
.
pathSelector
.
selectPath
(
s
)
;
e
.
push
(
a
)
"
UNK
"
!
=
=
a
.
type
&
&
(
r
=
i
)
}
return
e
}
pathToRanges
:
function
(
n
)
{
for
(
var
t
=
n
.
length
-
1
e
=
[
]
;
0
<
t
;
)
{
var
r
=
n
[
t
]
i
=
r
.
p
;
if
(
void
0
!
=
=
r
.
merge
&
&
0
<
e
.
length
)
{
var
o
=
e
[
e
.
length
-
1
]
;
o
.
s
=
r
.
merge
i
=
o
.
s
}
else
e
.
push
(
{
s
:
i
e
:
t
}
)
;
t
=
i
}
return
e
.
reverse
(
)
}
rangesToText
:
function
(
t
n
e
)
{
return
n
.
map
(
function
(
n
)
{
return
t
.
substring
(
n
.
s
n
.
e
)
}
)
.
join
(
e
)
}
cut
:
function
(
n
t
)
{
var
e
=
this
.
buildPath
(
n
)
r
=
this
.
pathToRanges
(
e
)
;
return
this
.
rangesToText
(
n
r
void
0
=
=
=
t
?
"
|
"
:
t
)
}
cutIntoRanges
:
function
(
t
n
)
{
var
e
=
this
.
buildPath
(
t
)
r
=
this
.
pathToRanges
(
e
)
;
return
n
|
|
r
.
forEach
(
function
(
n
)
{
n
.
text
=
t
.
substring
(
n
.
s
n
.
e
)
}
)
r
}
cutIntoArray
:
function
(
t
)
{
var
n
=
this
.
buildPath
(
t
)
;
return
this
.
pathToRanges
(
n
)
.
map
(
function
(
n
)
{
return
t
.
substring
(
n
.
s
n
.
e
)
}
)
}
}
;
t
.
exports
=
r
}
{
}
]
9
:
[
function
(
n
t
e
)
{
var
c
=
n
(
"
util
/
"
)
u
=
Array
.
prototype
.
slice
r
=
Object
.
prototype
.
hasOwnProperty
o
=
t
.
exports
=
i
;
function
l
(
n
t
)
{
return
c
.
isUndefined
(
t
)
?
"
"
+
t
:
c
.
isNumber
(
t
)
&
&
!
isFinite
(
t
)
?
t
.
toString
(
)
:
c
.
isFunction
(
t
)
|
|
c
.
isRegExp
(
t
)
?
t
.
toString
(
)
:
t
}
function
f
(
n
t
)
{
return
c
.
isString
(
n
)
?
n
.
length
<
t
?
n
:
n
.
slice
(
0
t
)
:
n
}
function
h
(
n
t
e
r
i
)
{
throw
new
o
.
AssertionError
(
{
message
:
e
actual
:
n
expected
:
t
operator
:
r
stackStartFunction
:
i
}
)
}
function
i
(
n
t
)
{
n
|
|
h
(
n
!
0
t
"
=
=
"
o
.
ok
)
}
function
p
(
n
t
)
{
if
(
n
=
=
=
t
)
return
!
0
;
if
(
c
.
isBuffer
(
n
)
&
&
c
.
isBuffer
(
t
)
)
{
if
(
n
.
length
!
=
t
.
length
)
return
!
1
;
for
(
var
e
=
0
;
e
<
n
.
length
;
e
+
+
)
if
(
n
[
e
]
!
=
=
t
[
e
]
)
return
!
1
;
return
!
0
}
return
c
.
isDate
(
n
)
&
&
c
.
isDate
(
t
)
?
n
.
getTime
(
)
=
=
=
t
.
getTime
(
)
:
c
.
isRegExp
(
n
)
&
&
c
.
isRegExp
(
t
)
?
n
.
source
=
=
=
t
.
source
&
&
n
.
global
=
=
=
t
.
global
&
&
n
.
multiline
=
=
=
t
.
multiline
&
&
n
.
lastIndex
=
=
=
t
.
lastIndex
&
&
n
.
ignoreCase
=
=
=
t
.
ignoreCase
:
c
.
isObject
(
n
)
|
|
c
.
isObject
(
t
)
?
function
(
n
t
)
{
if
(
c
.
isNullOrUndefined
(
n
)
|
|
c
.
isNullOrUndefined
(
t
)
)
return
!
1
;
if
(
n
.
prototype
!
=
=
t
.
prototype
)
return
!
1
;
if
(
c
.
isPrimitive
(
n
)
|
|
c
.
isPrimitive
(
t
)
)
return
n
=
=
=
t
;
var
e
=
d
(
n
)
r
=
d
(
t
)
;
if
(
e
&
&
!
r
|
|
!
e
&
&
r
)
return
!
1
;
if
(
e
)
return
n
=
u
.
call
(
n
)
t
=
u
.
call
(
t
)
p
(
n
t
)
;
var
i
o
s
=
v
(
n
)
a
=
v
(
t
)
;
if
(
s
.
length
!
=
a
.
length
)
return
!
1
;
for
(
s
.
sort
(
)
a
.
sort
(
)
o
=
s
.
length
-
1
;
0
<
=
o
;
o
-
-
)
if
(
s
[
o
]
!
=
a
[
o
]
)
return
!
1
;
for
(
o
=
s
.
length
-
1
;
0
<
=
o
;
o
-
-
)
if
(
i
=
s
[
o
]
!
p
(
n
[
i
]
t
[
i
]
)
)
return
!
1
;
return
!
0
}
(
n
t
)
:
n
=
=
t
}
function
d
(
n
)
{
return
"
[
object
Arguments
]
"
=
=
Object
.
prototype
.
toString
.
call
(
n
)
}
function
s
(
n
t
)
{
return
!
(
!
n
|
|
!
t
)
&
&
(
"
[
object
RegExp
]
"
=
=
Object
.
prototype
.
toString
.
call
(
t
)
?
t
.
test
(
n
)
:
n
instanceof
t
|
|
!
0
=
=
=
t
.
call
(
{
}
n
)
)
}
function
a
(
n
t
e
r
)
{
var
i
;
c
.
isString
(
e
)
&
&
(
r
=
e
e
=
null
)
;
try
{
t
(
)
}
catch
(
n
)
{
i
=
n
}
if
(
r
=
(
e
&
&
e
.
name
?
"
(
"
+
e
.
name
+
"
)
.
"
:
"
.
"
)
+
(
r
?
"
"
+
r
:
"
.
"
)
n
&
&
!
i
&
&
h
(
i
e
"
Missing
expected
exception
"
+
r
)
!
n
&
&
s
(
i
e
)
&
&
h
(
i
e
"
Got
unwanted
exception
"
+
r
)
n
&
&
i
&
&
e
&
&
!
s
(
i
e
)
|
|
!
n
&
&
i
)
throw
i
}
o
.
AssertionError
=
function
(
n
)
{
var
t
;
this
.
name
=
"
AssertionError
"
this
.
actual
=
n
.
actual
this
.
expected
=
n
.
expected
this
.
operator
=
n
.
operator
n
.
message
?
(
this
.
message
=
n
.
message
this
.
generatedMessage
=
!
1
)
:
(
this
.
message
=
(
t
=
this
f
(
JSON
.
stringify
(
t
.
actual
l
)
128
)
+
"
"
+
t
.
operator
+
"
"
+
f
(
JSON
.
stringify
(
t
.
expected
l
)
128
)
)
this
.
generatedMessage
=
!
0
)
;
var
e
=
n
.
stackStartFunction
|
|
h
;
if
(
Error
.
captureStackTrace
)
Error
.
captureStackTrace
(
this
e
)
;
else
{
var
r
=
new
Error
;
if
(
r
.
stack
)
{
var
i
=
r
.
stack
o
=
e
.
name
s
=
i
.
indexOf
(
"
\
n
"
+
o
)
;
if
(
0
<
=
s
)
{
var
a
=
i
.
indexOf
(
"
\
n
"
s
+
1
)
;
i
=
i
.
substring
(
a
+
1
)
}
this
.
stack
=
i
}
}
}
c
.
inherits
(
o
.
AssertionError
Error
)
o
.
fail
=
h
o
.
ok
=
i
o
.
equal
=
function
(
n
t
e
)
{
n
!
=
t
&
&
h
(
n
t
e
"
=
=
"
o
.
equal
)
}
o
.
notEqual
=
function
(
n
t
e
)
{
n
=
=
t
&
&
h
(
n
t
e
"
!
=
"
o
.
notEqual
)
}
o
.
deepEqual
=
function
(
n
t
e
)
{
p
(
n
t
)
|
|
h
(
n
t
e
"
deepEqual
"
o
.
deepEqual
)
}
o
.
notDeepEqual
=
function
(
n
t
e
)
{
p
(
n
t
)
&
&
h
(
n
t
e
"
notDeepEqual
"
o
.
notDeepEqual
)
}
o
.
strictEqual
=
function
(
n
t
e
)
{
n
!
=
=
t
&
&
h
(
n
t
e
"
=
=
=
"
o
.
strictEqual
)
}
o
.
notStrictEqual
=
function
(
n
t
e
)
{
n
=
=
=
t
&
&
h
(
n
t
e
"
!
=
=
"
o
.
notStrictEqual
)
}
o
.
throws
=
function
(
n
t
e
)
{
a
.
apply
(
this
[
!
0
]
.
concat
(
u
.
call
(
arguments
)
)
)
}
o
.
doesNotThrow
=
function
(
n
t
)
{
a
.
apply
(
this
[
!
1
]
.
concat
(
u
.
call
(
arguments
)
)
)
}
o
.
ifError
=
function
(
n
)
{
if
(
n
)
throw
n
}
;
var
v
=
Object
.
keys
|
|
function
(
n
)
{
var
t
=
[
]
;
for
(
var
e
in
n
)
r
.
call
(
n
e
)
&
&
t
.
push
(
e
)
;
return
t
}
}
{
"
util
/
"
:
28
}
]
10
:
[
function
(
n
t
e
)
{
"
use
strict
"
;
function
r
(
n
t
e
)
{
n
instanceof
RegExp
&
&
(
n
=
i
(
n
e
)
)
t
instanceof
RegExp
&
&
(
t
=
i
(
t
e
)
)
;
var
r
=
o
(
n
t
e
)
;
return
r
&
&
{
start
:
r
[
0
]
end
:
r
[
1
]
pre
:
e
.
slice
(
0
r
[
0
]
)
body
:
e
.
slice
(
r
[
0
]
+
n
.
length
r
[
1
]
)
post
:
e
.
slice
(
r
[
1
]
+
t
.
length
)
}
}
function
i
(
n
t
)
{
var
e
=
t
.
match
(
n
)
;
return
e
?
e
[
0
]
:
null
}
function
o
(
n
t
e
)
{
var
r
i
o
s
a
c
=
e
.
indexOf
(
n
)
u
=
e
.
indexOf
(
t
c
+
1
)
l
=
c
;
if
(
0
<
=
c
&
&
0
<
u
)
{
for
(
r
=
[
]
o
=
e
.
length
;
0
<
=
l
&
&
!
a
;
)
l
=
=
c
?
(
r
.
push
(
l
)
c
=
e
.
indexOf
(
n
l
+
1
)
)
:
1
=
=
r
.
length
?
a
=
[
r
.
pop
(
)
u
]
:
(
(
i
=
r
.
pop
(
)
)
<
o
&
&
(
o
=
i
s
=
u
)
u
=
e
.
indexOf
(
t
l
+
1
)
)
l
=
c
<
u
&
&
0
<
=
c
?
c
:
u
;
r
.
length
&
&
(
a
=
[
o
s
]
)
}
return
a
}
(
t
.
exports
=
r
)
.
range
=
o
}
{
}
]
11
:
[
function
(
n
t
e
)
{
var
k
=
n
(
"
concat
-
map
"
)
S
=
n
(
"
balanced
-
match
"
)
;
t
.
exports
=
function
(
n
)
{
if
(
!
n
)
return
[
]
;
"
{
}
"
=
=
=
n
.
substr
(
0
2
)
&
&
(
n
=
"
\
\
{
\
\
}
"
+
n
.
substr
(
2
)
)
;
return
function
t
(
n
e
)
{
var
r
=
[
]
;
var
i
=
S
(
"
{
"
"
}
"
n
)
;
if
(
!
i
|
|
/
\
/
.
test
(
i
.
pre
)
)
return
[
n
]
;
var
o
=
/
^
-
?
\
d
+
\
.
\
.
-
?
\
d
+
(
?
:
\
.
\
.
-
?
\
d
+
)
?
/
.
test
(
i
.
body
)
;
var
s
=
/
^
[
a
-
zA
-
Z
]
\
.
\
.
[
a
-
zA
-
Z
]
(
?
:
\
.
\
.
-
?
\
d
+
)
?
/
.
test
(
i
.
body
)
;
var
a
=
o
|
|
s
;
var
c
=
0
<
=
i
.
body
.
indexOf
(
"
"
)
;
if
(
!
a
&
&
!
c
)
return
i
.
post
.
match
(
/
.
*
\
}
/
)
?
(
n
=
i
.
pre
+
"
{
"
+
i
.
body
+
R
+
i
.
post
t
(
n
)
)
:
[
n
]
;
var
u
;
if
(
a
)
u
=
i
.
body
.
split
(
/
\
.
\
.
/
)
;
else
if
(
1
=
=
=
(
u
=
T
(
i
.
body
)
)
.
length
&
&
1
=
=
=
(
u
=
t
(
u
[
0
]
!
1
)
.
map
(
I
)
)
.
length
)
{
var
l
=
i
.
post
.
length
?
t
(
i
.
post
!
1
)
:
[
"
"
]
;
return
l
.
map
(
function
(
n
)
{
return
i
.
pre
+
u
[
0
]
+
n
}
)
}
var
f
=
i
.
pre
;
var
l
=
i
.
post
.
length
?
t
(
i
.
post
!
1
)
:
[
"
"
]
;
var
h
;
if
(
a
)
{
var
p
=
L
(
u
[
0
]
)
d
=
L
(
u
[
1
]
)
v
=
Math
.
max
(
u
[
0
]
.
length
u
[
1
]
.
length
)
g
=
3
=
=
u
.
length
?
Math
.
abs
(
L
(
u
[
2
]
)
)
:
1
m
=
D
y
=
d
<
p
;
y
&
&
(
g
*
=
-
1
m
=
F
)
;
var
b
=
u
.
some
(
N
)
;
h
=
[
]
;
for
(
var
_
=
p
;
m
(
_
d
)
;
_
+
=
g
)
{
var
w
;
if
(
s
)
"
\
\
"
=
=
=
(
w
=
String
.
fromCharCode
(
_
)
)
&
&
(
w
=
"
"
)
;
else
if
(
w
=
String
(
_
)
b
)
{
var
E
=
v
-
w
.
length
;
if
(
0
<
E
)
{
var
O
=
new
Array
(
E
+
1
)
.
join
(
"
0
"
)
;
w
=
_
<
0
?
"
-
"
+
O
+
w
.
slice
(
1
)
:
O
+
w
}
}
h
.
push
(
w
)
}
}
else
h
=
k
(
u
function
(
n
)
{
return
t
(
n
!
1
)
}
)
;
for
(
var
A
=
0
;
A
<
h
.
length
;
A
+
+
)
for
(
var
x
=
0
;
x
<
l
.
length
;
x
+
+
)
{
var
j
=
f
+
h
[
A
]
+
l
[
x
]
;
(
!
e
|
|
a
|
|
j
)
&
&
r
.
push
(
j
)
}
return
r
}
(
(
t
=
n
t
.
split
(
"
\
\
\
\
"
)
.
join
(
r
)
.
split
(
"
\
\
{
"
)
.
join
(
i
)
.
split
(
"
\
\
}
"
)
.
join
(
R
)
.
split
(
"
\
\
"
)
.
join
(
o
)
.
split
(
"
\
\
.
"
)
.
join
(
s
)
)
!
0
)
.
map
(
a
)
;
var
t
}
;
var
r
=
"
\
0SLASH
"
+
Math
.
random
(
)
+
"
\
0
"
i
=
"
\
0OPEN
"
+
Math
.
random
(
)
+
"
\
0
"
R
=
"
\
0CLOSE
"
+
Math
.
random
(
)
+
"
\
0
"
o
=
"
\
0COMMA
"
+
Math
.
random
(
)
+
"
\
0
"
s
=
"
\
0PERIOD
"
+
Math
.
random
(
)
+
"
\
0
"
;
function
L
(
n
)
{
return
parseInt
(
n
10
)
=
=
n
?
parseInt
(
n
10
)
:
n
.
charCodeAt
(
0
)
}
function
a
(
n
)
{
return
n
.
split
(
r
)
.
join
(
"
\
\
"
)
.
split
(
i
)
.
join
(
"
{
"
)
.
split
(
R
)
.
join
(
"
}
"
)
.
split
(
o
)
.
join
(
"
"
)
.
split
(
s
)
.
join
(
"
.
"
)
}
function
T
(
n
)
{
if
(
!
n
)
return
[
"
"
]
;
var
t
=
[
]
e
=
S
(
"
{
"
"
}
"
n
)
;
if
(
!
e
)
return
n
.
split
(
"
"
)
;
var
r
=
e
.
pre
i
=
e
.
body
o
=
e
.
post
s
=
r
.
split
(
"
"
)
;
s
[
s
.
length
-
1
]
+
=
"
{
"
+
i
+
"
}
"
;
var
a
=
T
(
o
)
;
return
o
.
length
&
&
(
s
[
s
.
length
-
1
]
+
=
a
.
shift
(
)
s
.
push
.
apply
(
s
a
)
)
t
.
push
.
apply
(
t
s
)
t
}
function
I
(
n
)
{
return
"
{
"
+
n
+
"
}
"
}
function
N
(
n
)
{
return
/
^
-
?
0
\
d
/
.
test
(
n
)
}
function
D
(
n
t
)
{
return
n
<
=
t
}
function
F
(
n
t
)
{
return
t
<
=
n
}
}
{
"
balanced
-
match
"
:
10
"
concat
-
map
"
:
13
}
]
12
:
[
function
(
n
t
e
)
{
}
{
}
]
13
:
[
function
(
n
t
e
)
{
t
.
exports
=
function
(
n
t
)
{
for
(
var
e
=
[
]
r
=
0
;
r
<
n
.
length
;
r
+
+
)
{
var
i
=
t
(
n
[
r
]
r
)
;
o
(
i
)
?
e
.
push
.
apply
(
e
i
)
:
e
.
push
(
i
)
}
return
e
}
;
var
o
=
Array
.
isArray
|
|
function
(
n
)
{
return
"
[
object
Array
]
"
=
=
=
Object
.
prototype
.
toString
.
call
(
n
)
}
}
{
}
]
14
:
[
function
(
n
t
e
)
{
function
r
(
)
{
this
.
_events
=
this
.
_events
|
|
{
}
this
.
_maxListeners
=
this
.
_maxListeners
|
|
void
0
}
function
a
(
n
)
{
return
"
function
"
=
=
typeof
n
}
function
c
(
n
)
{
return
"
object
"
=
=
typeof
n
&
&
null
!
=
=
n
}
function
u
(
n
)
{
return
void
0
=
=
=
n
}
(
(
t
.
exports
=
r
)
.
EventEmitter
=
r
)
.
prototype
.
_events
=
void
0
r
.
prototype
.
_maxListeners
=
void
0
r
.
defaultMaxListeners
=
10
r
.
prototype
.
setMaxListeners
=
function
(
n
)
{
if
(
"
number
"
!
=
typeof
n
|
|
n
<
0
|
|
isNaN
(
n
)
)
throw
TypeError
(
"
n
must
be
a
positive
number
"
)
;
return
this
.
_maxListeners
=
n
this
}
r
.
prototype
.
emit
=
function
(
n
)
{
var
t
e
r
i
o
s
;
if
(
this
.
_events
|
|
(
this
.
_events
=
{
}
)
"
error
"
=
=
=
n
&
&
(
!
this
.
_events
.
error
|
|
c
(
this
.
_events
.
error
)
&
&
!
this
.
_events
.
error
.
length
)
)
{
if
(
(
t
=
arguments
[
1
]
)
instanceof
Error
)
throw
t
;
throw
TypeError
(
'
Uncaught
unspecified
"
error
"
event
.
'
)
}
if
(
u
(
e
=
this
.
_events
[
n
]
)
)
return
!
1
;
if
(
a
(
e
)
)
switch
(
arguments
.
length
)
{
case
1
:
e
.
call
(
this
)
;
break
;
case
2
:
e
.
call
(
this
arguments
[
1
]
)
;
break
;
case
3
:
e
.
call
(
this
arguments
[
1
]
arguments
[
2
]
)
;
break
;
default
:
for
(
r
=
arguments
.
length
i
=
new
Array
(
r
-
1
)
o
=
1
;
o
<
r
;
o
+
+
)
i
[
o
-
1
]
=
arguments
[
o
]
;
e
.
apply
(
this
i
)
}
else
if
(
c
(
e
)
)
{
for
(
r
=
arguments
.
length
i
=
new
Array
(
r
-
1
)
o
=
1
;
o
<
r
;
o
+
+
)
i
[
o
-
1
]
=
arguments
[
o
]
;
for
(
r
=
(
s
=
e
.
slice
(
)
)
.
length
o
=
0
;
o
<
r
;
o
+
+
)
s
[
o
]
.
apply
(
this
i
)
}
return
!
0
}
r
.
prototype
.
on
=
r
.
prototype
.
addListener
=
function
(
n
t
)
{
var
e
;
if
(
!
a
(
t
)
)
throw
TypeError
(
"
listener
must
be
a
function
"
)
;
(
this
.
_events
|
|
(
this
.
_events
=
{
}
)
this
.
_events
.
newListener
&
&
this
.
emit
(
"
newListener
"
n
a
(
t
.
listener
)
?
t
.
listener
:
t
)
this
.
_events
[
n
]
?
c
(
this
.
_events
[
n
]
)
?
this
.
_events
[
n
]
.
push
(
t
)
:
this
.
_events
[
n
]
=
[
this
.
_events
[
n
]
t
]
:
this
.
_events
[
n
]
=
t
c
(
this
.
_events
[
n
]
)
&
&
!
this
.
_events
[
n
]
.
warned
)
&
&
(
(
e
=
u
(
this
.
_maxListeners
)
?
r
.
defaultMaxListeners
:
this
.
_maxListeners
)
&
&
0
<
e
&
&
this
.
_events
[
n
]
.
length
>
e
&
&
(
this
.
_events
[
n
]
.
warned
=
!
0
console
.
error
(
"
(
node
)
warning
:
possible
EventEmitter
memory
leak
detected
.
%
d
listeners
added
.
Use
emitter
.
setMaxListeners
(
)
to
increase
limit
.
"
this
.
_events
[
n
]
.
length
)
"
function
"
=
=
typeof
console
.
trace
&
&
console
.
trace
(
)
)
)
;
return
this
}
r
.
prototype
.
once
=
function
(
n
t
)
{
if
(
!
a
(
t
)
)
throw
TypeError
(
"
listener
must
be
a
function
"
)
;
var
e
=
!
1
;
function
r
(
)
{
this
.
removeListener
(
n
r
)
e
|
|
(
e
=
!
0
t
.
apply
(
this
arguments
)
)
}
return
r
.
listener
=
t
this
.
on
(
n
r
)
this
}
r
.
prototype
.
removeListener
=
function
(
n
t
)
{
var
e
r
i
o
;
if
(
!
a
(
t
)
)
throw
TypeError
(
"
listener
must
be
a
function
"
)
;
if
(
!
this
.
_events
|
|
!
this
.
_events
[
n
]
)
return
this
;
if
(
i
=
(
e
=
this
.
_events
[
n
]
)
.
length
r
=
-
1
e
=
=
=
t
|
|
a
(
e
.
listener
)
&
&
e
.
listener
=
=
=
t
)
delete
this
.
_events
[
n
]
this
.
_events
.
removeListener
&
&
this
.
emit
(
"
removeListener
"
n
t
)
;
else
if
(
c
(
e
)
)
{
for
(
o
=
i
;
0
<
o
-
-
;
)
if
(
e
[
o
]
=
=
=
t
|
|
e
[
o
]
.
listener
&
&
e
[
o
]
.
listener
=
=
=
t
)
{
r
=
o
;
break
}
if
(
r
<
0
)
return
this
;
1
=
=
=
e
.
length
?
(
e
.
length
=
0
delete
this
.
_events
[
n
]
)
:
e
.
splice
(
r
1
)
this
.
_events
.
removeListener
&
&
this
.
emit
(
"
removeListener
"
n
t
)
}
return
this
}
r
.
prototype
.
removeAllListeners
=
function
(
n
)
{
var
t
e
;
if
(
!
this
.
_events
)
return
this
;
if
(
!
this
.
_events
.
removeListener
)
return
0
=
=
=
arguments
.
length
?
this
.
_events
=
{
}
:
this
.
_events
[
n
]
&
&
delete
this
.
_events
[
n
]
this
;
if
(
0
=
=
=
arguments
.
length
)
{
for
(
t
in
this
.
_events
)
"
removeListener
"
!
=
=
t
&
&
this
.
removeAllListeners
(
t
)
;
return
this
.
removeAllListeners
(
"
removeListener
"
)
this
.
_events
=
{
}
this
}
if
(
a
(
e
=
this
.
_events
[
n
]
)
)
this
.
removeListener
(
n
e
)
;
else
for
(
;
e
.
length
;
)
this
.
removeListener
(
n
e
[
e
.
length
-
1
]
)
;
return
delete
this
.
_events
[
n
]
this
}
r
.
prototype
.
listeners
=
function
(
n
)
{
return
this
.
_events
&
&
this
.
_events
[
n
]
?
a
(
this
.
_events
[
n
]
)
?
[
this
.
_events
[
n
]
]
:
this
.
_events
[
n
]
.
slice
(
)
:
[
]
}
r
.
listenerCount
=
function
(
n
t
)
{
return
n
.
_events
&
&
n
.
_events
[
t
]
?
a
(
n
.
_events
[
t
]
)
?
1
:
n
.
_events
[
t
]
.
length
:
0
}
}
{
}
]
15
:
[
function
(
t
n
p
)
{
(
function
(
i
)
{
function
o
(
n
t
)
{
return
Object
.
prototype
.
hasOwnProperty
.
call
(
n
t
)
}
p
.
alphasort
=
u
p
.
alphasorti
=
c
p
.
setopts
=
function
(
n
t
e
)
{
e
|
|
(
e
=
{
}
)
;
if
(
e
.
matchBase
&
&
-
1
=
=
=
t
.
indexOf
(
"
/
"
)
)
{
if
(
e
.
noglobstar
)
throw
new
Error
(
"
base
matching
requires
globstar
"
)
;
t
=
"
*
*
/
"
+
t
}
n
.
silent
=
!
!
e
.
silent
n
.
pattern
=
t
n
.
strict
=
!
1
!
=
=
e
.
strict
n
.
realpath
=
!
!
e
.
realpath
n
.
realpathCache
=
e
.
realpathCache
|
|
Object
.
create
(
null
)
n
.
follow
=
!
!
e
.
follow
n
.
dot
=
!
!
e
.
dot
n
.
mark
=
!
!
e
.
mark
n
.
nodir
=
!
!
e
.
nodir
n
.
nodir
&
&
(
n
.
mark
=
!
0
)
;
n
.
sync
=
!
!
e
.
sync
n
.
nounique
=
!
!
e
.
nounique
n
.
nonull
=
!
!
e
.
nonull
n
.
nosort
=
!
!
e
.
nosort
n
.
nocase
=
!
!
e
.
nocase
n
.
stat
=
!
!
e
.
stat
n
.
noprocess
=
!
!
e
.
noprocess
n
.
maxLength
=
e
.
maxLength
|
|
1
/
0
n
.
cache
=
e
.
cache
|
|
Object
.
create
(
null
)
n
.
statCache
=
e
.
statCache
|
|
Object
.
create
(
null
)
n
.
symlinks
=
e
.
symlinks
|
|
Object
.
create
(
null
)
function
(
n
t
)
{
n
.
ignore
=
t
.
ignore
|
|
[
]
Array
.
isArray
(
n
.
ignore
)
|
|
(
n
.
ignore
=
[
n
.
ignore
]
)
;
n
.
ignore
.
length
&
&
(
n
.
ignore
=
n
.
ignore
.
map
(
l
)
)
}
(
n
e
)
n
.
changedCwd
=
!
1
;
var
r
=
i
.
cwd
(
)
;
o
(
e
"
cwd
"
)
?
(
n
.
cwd
=
e
.
cwd
n
.
changedCwd
=
s
.
resolve
(
e
.
cwd
)
!
=
=
r
)
:
n
.
cwd
=
r
;
n
.
root
=
e
.
root
|
|
s
.
resolve
(
n
.
cwd
"
/
"
)
n
.
root
=
s
.
resolve
(
n
.
root
)
"
win32
"
=
=
=
i
.
platform
&
&
(
n
.
root
=
n
.
root
.
replace
(
/
\
\
/
g
"
/
"
)
)
;
n
.
nomount
=
!
!
e
.
nomount
e
.
nonegate
=
!
1
!
=
=
e
.
nonegate
e
.
nocomment
=
!
1
!
=
=
e
.
nocomment
function
(
n
)
{
if
(
!
(
n
.
nonegate
&
&
n
.
nocomment
|
|
!
0
=
=
=
i
.
noDeprecation
|
|
p
.
deprecationWarned
)
)
{
var
t
=
"
glob
WARNING
:
comments
and
negation
will
be
disabled
in
v6
"
;
if
(
i
.
throwDeprecation
)
throw
new
Error
(
t
)
;
i
.
traceDeprecation
?
console
.
trace
(
t
)
:
console
.
error
(
t
)
p
.
deprecationWarned
=
!
0
}
}
(
e
)
n
.
minimatch
=
new
a
(
t
e
)
n
.
options
=
n
.
minimatch
.
options
}
p
.
ownProp
=
o
p
.
makeAbs
=
f
p
.
finish
=
function
(
t
)
{
for
(
var
n
=
t
.
nounique
e
=
n
?
[
]
:
Object
.
create
(
null
)
r
=
0
i
=
t
.
matches
.
length
;
r
<
i
;
r
+
+
)
{
var
o
=
t
.
matches
[
r
]
;
if
(
o
&
&
0
!
=
=
Object
.
keys
(
o
)
.
length
)
{
var
s
=
Object
.
keys
(
o
)
;
n
?
e
.
push
.
apply
(
e
s
)
:
s
.
forEach
(
function
(
n
)
{
e
[
n
]
=
!
0
}
)
}
else
if
(
t
.
nonull
)
{
var
a
=
t
.
minimatch
.
globSet
[
r
]
;
n
?
e
.
push
(
a
)
:
e
[
a
]
=
!
0
}
}
n
|
|
(
e
=
Object
.
keys
(
e
)
)
;
t
.
nosort
|
|
(
e
=
e
.
sort
(
t
.
nocase
?
c
:
u
)
)
;
if
(
t
.
mark
)
{
for
(
var
r
=
0
;
r
<
e
.
length
;
r
+
+
)
e
[
r
]
=
t
.
_mark
(
e
[
r
]
)
;
t
.
nodir
&
&
(
e
=
e
.
filter
(
function
(
n
)
{
return
!
/
\
/
/
.
test
(
n
)
}
)
)
}
t
.
ignore
.
length
&
&
(
e
=
e
.
filter
(
function
(
n
)
{
return
!
h
(
t
n
)
}
)
)
;
t
.
found
=
e
}
p
.
mark
=
function
(
n
t
)
{
var
e
=
f
(
n
t
)
r
=
n
.
cache
[
e
]
i
=
t
;
if
(
r
)
{
var
o
=
"
DIR
"
=
=
=
r
|
|
Array
.
isArray
(
r
)
s
=
"
/
"
=
=
=
t
.
slice
(
-
1
)
;
if
(
o
&
&
!
s
?
i
+
=
"
/
"
:
!
o
&
&
s
&
&
(
i
=
i
.
slice
(
0
-
1
)
)
i
!
=
=
t
)
{
var
a
=
f
(
n
i
)
;
n
.
statCache
[
a
]
=
n
.
statCache
[
e
]
n
.
cache
[
a
]
=
n
.
cache
[
e
]
}
}
return
i
}
p
.
isIgnored
=
h
p
.
childrenIgnored
=
function
(
n
t
)
{
return
!
!
n
.
ignore
.
length
&
&
n
.
ignore
.
some
(
function
(
n
)
{
return
!
(
!
n
.
gmatcher
|
|
!
n
.
gmatcher
.
match
(
t
)
)
}
)
}
;
var
s
=
t
(
"
path
"
)
n
=
t
(
"
minimatch
"
)
e
=
t
(
"
path
-
is
-
absolute
"
)
a
=
n
.
Minimatch
;
function
c
(
n
t
)
{
return
n
.
toLowerCase
(
)
.
localeCompare
(
t
.
toLowerCase
(
)
)
}
function
u
(
n
t
)
{
return
n
.
localeCompare
(
t
)
}
function
l
(
n
)
{
var
t
=
null
;
if
(
"
/
*
*
"
=
=
=
n
.
slice
(
-
3
)
)
{
var
e
=
n
.
replace
(
/
(
\
/
\
*
\
*
)
+
/
"
"
)
;
t
=
new
a
(
e
)
}
return
{
matcher
:
new
a
(
n
)
gmatcher
:
t
}
}
function
f
(
n
t
)
{
return
"
/
"
=
=
=
t
.
charAt
(
0
)
?
s
.
join
(
n
.
root
t
)
:
e
(
t
)
|
|
"
"
=
=
=
t
?
t
:
n
.
changedCwd
?
s
.
resolve
(
n
.
cwd
t
)
:
s
.
resolve
(
t
)
}
function
h
(
n
t
)
{
return
!
!
n
.
ignore
.
length
&
&
n
.
ignore
.
some
(
function
(
n
)
{
return
n
.
matcher
.
match
(
t
)
|
|
!
(
!
n
.
gmatcher
|
|
!
n
.
gmatcher
.
match
(
t
)
)
}
)
}
p
.
deprecationWarned
}
)
.
call
(
this
t
(
"
_process
"
)
)
}
{
_process
:
24
minimatch
:
20
path
:
22
"
path
-
is
-
absolute
"
:
23
}
]
16
:
[
function
(
_
w
n
)
{
(
function
(
s
)
{
w
.
exports
=
i
;
var
u
=
_
(
"
fs
"
)
l
=
_
(
"
minimatch
"
)
n
=
(
l
.
Minimatch
_
(
"
inherits
"
)
)
t
=
_
(
"
events
"
)
.
EventEmitter
g
=
_
(
"
path
"
)
f
=
_
(
"
assert
"
)
h
=
_
(
"
path
-
is
-
absolute
"
)
r
=
_
(
"
.
/
sync
.
js
"
)
e
=
_
(
"
.
/
common
.
js
"
)
a
=
(
e
.
alphasort
e
.
alphasorti
e
.
setopts
)
p
=
e
.
ownProp
d
=
_
(
"
inflight
"
)
o
=
_
(
"
util
"
)
v
=
e
.
childrenIgnored
c
=
e
.
isIgnored
m
=
_
(
"
once
"
)
;
function
i
(
n
t
e
)
{
if
(
"
function
"
=
=
typeof
t
&
&
(
e
=
t
t
=
{
}
)
t
|
|
(
t
=
{
}
)
t
.
sync
)
{
if
(
e
)
throw
new
TypeError
(
"
callback
provided
to
sync
glob
"
)
;
return
r
(
n
t
)
}
return
new
b
(
n
t
e
)
}
i
.
sync
=
r
;
var
y
=
i
.
GlobSync
=
r
.
GlobSync
;
function
b
(
n
t
e
)
{
if
(
"
function
"
=
=
typeof
t
&
&
(
e
=
t
t
=
null
)
t
&
&
t
.
sync
)
{
if
(
e
)
throw
new
TypeError
(
"
callback
provided
to
sync
glob
"
)
;
return
new
y
(
n
t
)
}
if
(
!
(
this
instanceof
b
)
)
return
new
b
(
n
t
e
)
;
a
(
this
n
t
)
this
.
_didRealPath
=
!
1
;
var
r
=
this
.
minimatch
.
set
.
length
;
this
.
matches
=
new
Array
(
r
)
"
function
"
=
=
typeof
e
&
&
(
e
=
m
(
e
)
this
.
on
(
"
error
"
e
)
this
.
on
(
"
end
"
function
(
n
)
{
e
(
null
n
)
}
)
)
;
var
i
=
this
;
r
=
this
.
minimatch
.
set
.
length
;
if
(
this
.
_processing
=
0
this
.
matches
=
new
Array
(
r
)
this
.
_emitQueue
=
[
]
this
.
_processQueue
=
[
]
this
.
paused
=
!
1
this
.
noprocess
)
return
this
;
if
(
0
=
=
=
r
)
return
s
(
)
;
for
(
var
o
=
0
;
o
<
r
;
o
+
+
)
this
.
_process
(
this
.
minimatch
.
set
[
o
]
o
!
1
s
)
;
function
s
(
)
{
-
-
i
.
_processing
i
.
_processing
<
=
0
&
&
i
.
_finish
(
)
}
}
(
i
.
glob
=
i
)
.
hasMagic
=
function
(
n
t
)
{
var
e
=
o
.
_extend
(
{
}
t
)
;
e
.
noprocess
=
!
0
;
var
r
=
new
b
(
n
e
)
.
minimatch
.
set
;
if
(
1
<
r
.
length
)
return
!
0
;
for
(
var
i
=
0
;
i
<
r
[
0
]
.
length
;
i
+
+
)
if
(
"
string
"
!
=
typeof
r
[
0
]
[
i
]
)
return
!
0
;
return
!
1
}
n
(
i
.
Glob
=
b
t
)
b
.
prototype
.
_finish
=
function
(
)
{
if
(
f
(
this
instanceof
b
)
!
this
.
aborted
)
{
if
(
this
.
realpath
&
&
!
this
.
_didRealpath
)
return
this
.
_realpath
(
)
;
e
.
finish
(
this
)
this
.
emit
(
"
end
"
this
.
found
)
}
}
b
.
prototype
.
_realpath
=
function
(
)
{
if
(
!
this
.
_didRealpath
)
{
this
.
_didRealpath
=
!
0
;
var
n
=
this
.
matches
.
length
;
if
(
0
=
=
=
n
)
return
this
.
_finish
(
)
;
for
(
var
t
=
this
e
=
0
;
e
<
this
.
matches
.
length
;
e
+
+
)
this
.
_realpathSet
(
e
r
)
}
function
r
(
)
{
0
=
=
-
-
n
&
&
t
.
_finish
(
)
}
}
b
.
prototype
.
_realpathSet
=
function
(
r
i
)
{
var
n
=
this
.
matches
[
r
]
;
if
(
!
n
)
return
i
(
)
;
var
t
=
Object
.
keys
(
n
)
o
=
this
s
=
t
.
length
;
if
(
0
=
=
=
s
)
return
i
(
)
;
var
a
=
this
.
matches
[
r
]
=
Object
.
create
(
null
)
;
t
.
forEach
(
function
(
e
n
)
{
e
=
o
.
_makeAbs
(
e
)
u
.
realpath
(
e
o
.
realpathCache
function
(
n
t
)
{
n
?
"
stat
"
=
=
=
n
.
syscall
?
a
[
e
]
=
!
0
:
o
.
emit
(
"
error
"
n
)
:
a
[
t
]
=
!
0
0
=
=
-
-
s
&
&
(
o
.
matches
[
r
]
=
a
i
(
)
)
}
)
}
)
}
b
.
prototype
.
_mark
=
function
(
n
)
{
return
e
.
mark
(
this
n
)
}
b
.
prototype
.
_makeAbs
=
function
(
n
)
{
return
e
.
makeAbs
(
this
n
)
}
b
.
prototype
.
abort
=
function
(
)
{
this
.
aborted
=
!
0
this
.
emit
(
"
abort
"
)
}
b
.
prototype
.
pause
=
function
(
)
{
this
.
paused
|
|
(
this
.
paused
=
!
0
this
.
emit
(
"
pause
"
)
)
}
b
.
prototype
.
resume
=
function
(
)
{
if
(
this
.
paused
)
{
if
(
this
.
emit
(
"
resume
"
)
this
.
paused
=
!
1
this
.
_emitQueue
.
length
)
for
(
var
n
=
this
.
_emitQueue
.
slice
(
0
)
t
=
this
.
_emitQueue
.
length
=
0
;
t
<
n
.
length
;
t
+
+
)
{
var
e
=
n
[
t
]
;
this
.
_emitMatch
(
e
[
0
]
e
[
1
]
)
}
if
(
this
.
_processQueue
.
length
)
{
var
r
=
this
.
_processQueue
.
slice
(
0
)
;
for
(
t
=
this
.
_processQueue
.
length
=
0
;
t
<
r
.
length
;
t
+
+
)
{
var
i
=
r
[
t
]
;
this
.
_processing
-
-
this
.
_process
(
i
[
0
]
i
[
1
]
i
[
2
]
i
[
3
]
)
}
}
}
}
b
.
prototype
.
_process
=
function
(
n
t
e
r
)
{
if
(
f
(
this
instanceof
b
)
f
(
"
function
"
=
=
typeof
r
)
!
this
.
aborted
)
if
(
this
.
_processing
+
+
this
.
paused
)
this
.
_processQueue
.
push
(
[
n
t
e
r
]
)
;
else
{
for
(
var
i
o
=
0
;
"
string
"
=
=
typeof
n
[
o
]
;
)
o
+
+
;
switch
(
o
)
{
case
n
.
length
:
return
void
this
.
_processSimple
(
n
.
join
(
"
/
"
)
t
r
)
;
case
0
:
i
=
null
;
break
;
default
:
i
=
n
.
slice
(
0
o
)
.
join
(
"
/
"
)
}
var
s
a
=
n
.
slice
(
o
)
;
s
=
null
=
=
=
i
?
"
.
"
:
(
(
h
(
i
)
|
|
h
(
n
.
join
(
"
/
"
)
)
)
&
&
(
i
&
&
h
(
i
)
|
|
(
i
=
"
/
"
+
i
)
)
i
)
;
var
c
=
this
.
_makeAbs
(
s
)
;
if
(
v
(
this
s
)
)
return
r
(
)
;
a
[
0
]
=
=
=
l
.
GLOBSTAR
?
this
.
_processGlobStar
(
i
s
c
a
t
e
r
)
:
this
.
_processReaddir
(
i
s
c
a
t
e
r
)
}
}
b
.
prototype
.
_processReaddir
=
function
(
e
r
i
o
s
a
c
)
{
var
u
=
this
;
this
.
_readdir
(
i
a
function
(
n
t
)
{
return
u
.
_processReaddir2
(
e
r
i
o
s
a
t
c
)
}
)
}
b
.
prototype
.
_processReaddir2
=
function
(
n
t
e
r
i
o
s
a
)
{
if
(
!
s
)
return
a
(
)
;
for
(
var
c
=
r
[
0
]
u
=
!
!
this
.
minimatch
.
negate
l
=
c
.
_glob
f
=
this
.
dot
|
|
"
.
"
=
=
=
l
.
charAt
(
0
)
h
=
[
]
p
=
0
;
p
<
s
.
length
;
p
+
+
)
{
if
(
"
.
"
!
=
=
(
v
=
s
[
p
]
)
.
charAt
(
0
)
|
|
f
)
(
u
&
&
!
n
?
!
v
.
match
(
c
)
:
v
.
match
(
c
)
)
&
&
h
.
push
(
v
)
}
var
d
=
h
.
length
;
if
(
0
=
=
=
d
)
return
a
(
)
;
if
(
1
=
=
=
r
.
length
&
&
!
this
.
mark
&
&
!
this
.
stat
)
{
this
.
matches
[
i
]
|
|
(
this
.
matches
[
i
]
=
Object
.
create
(
null
)
)
;
for
(
p
=
0
;
p
<
d
;
p
+
+
)
{
var
v
=
h
[
p
]
;
n
&
&
(
v
=
"
/
"
!
=
=
n
?
n
+
"
/
"
+
v
:
n
+
v
)
"
/
"
!
=
=
v
.
charAt
(
0
)
|
|
this
.
nomount
|
|
(
v
=
g
.
join
(
this
.
root
v
)
)
this
.
_emitMatch
(
i
v
)
}
return
a
(
)
}
r
.
shift
(
)
;
for
(
p
=
0
;
p
<
d
;
p
+
+
)
{
v
=
h
[
p
]
;
n
&
&
(
v
=
"
/
"
!
=
=
n
?
n
+
"
/
"
+
v
:
n
+
v
)
this
.
_process
(
[
v
]
.
concat
(
r
)
i
o
a
)
}
a
(
)
}
b
.
prototype
.
_emitMatch
=
function
(
n
t
)
{
if
(
!
this
.
aborted
&
&
!
this
.
matches
[
n
]
[
t
]
&
&
!
c
(
this
t
)
)
if
(
this
.
paused
)
this
.
_emitQueue
.
push
(
[
n
t
]
)
;
else
{
var
e
=
this
.
_makeAbs
(
t
)
;
if
(
this
.
nodir
)
{
var
r
=
this
.
cache
[
e
]
;
if
(
"
DIR
"
=
=
=
r
|
|
Array
.
isArray
(
r
)
)
return
}
this
.
mark
&
&
(
t
=
this
.
_mark
(
t
)
)
this
.
matches
[
n
]
[
t
]
=
!
0
;
var
i
=
this
.
statCache
[
e
]
;
i
&
&
this
.
emit
(
"
stat
"
t
i
)
this
.
emit
(
"
match
"
t
)
}
}
b
.
prototype
.
_readdirInGlobStar
=
function
(
r
i
)
{
if
(
!
this
.
aborted
)
{
if
(
this
.
follow
)
return
this
.
_readdir
(
r
!
1
i
)
;
var
o
=
this
n
=
d
(
"
lstat
\
0
"
+
r
function
(
n
t
)
{
if
(
n
)
return
i
(
)
;
var
e
=
t
.
isSymbolicLink
(
)
;
(
o
.
symlinks
[
r
]
=
e
)
|
|
t
.
isDirectory
(
)
?
o
.
_readdir
(
r
!
1
i
)
:
(
o
.
cache
[
r
]
=
"
FILE
"
i
(
)
)
}
)
;
n
&
&
u
.
lstat
(
r
n
)
}
}
b
.
prototype
.
_readdir
=
function
(
n
t
e
)
{
if
(
!
this
.
aborted
&
&
(
e
=
d
(
"
readdir
\
0
"
+
n
+
"
\
0
"
+
t
e
)
)
)
{
if
(
t
&
&
!
p
(
this
.
symlinks
n
)
)
return
this
.
_readdirInGlobStar
(
n
e
)
;
if
(
p
(
this
.
cache
n
)
)
{
var
r
=
this
.
cache
[
n
]
;
if
(
!
r
|
|
"
FILE
"
=
=
=
r
)
return
e
(
)
;
if
(
Array
.
isArray
(
r
)
)
return
e
(
null
r
)
}
var
i
o
s
;
u
.
readdir
(
n
(
i
=
this
o
=
n
s
=
e
function
(
n
t
)
{
n
?
i
.
_readdirError
(
o
n
s
)
:
i
.
_readdirEntries
(
o
t
s
)
}
)
)
}
}
b
.
prototype
.
_readdirEntries
=
function
(
n
t
e
)
{
if
(
!
this
.
aborted
)
{
if
(
!
this
.
mark
&
&
!
this
.
stat
)
for
(
var
r
=
0
;
r
<
t
.
length
;
r
+
+
)
{
var
i
=
t
[
r
]
;
i
=
"
/
"
=
=
=
n
?
n
+
i
:
n
+
"
/
"
+
i
this
.
cache
[
i
]
=
!
0
}
return
e
(
null
this
.
cache
[
n
]
=
t
)
}
}
b
.
prototype
.
_readdirError
=
function
(
n
t
e
)
{
if
(
!
this
.
aborted
)
{
switch
(
t
.
code
)
{
case
"
ENOTSUP
"
:
case
"
ENOTDIR
"
:
this
.
cache
[
this
.
_makeAbs
(
n
)
]
=
"
FILE
"
;
break
;
case
"
ENOENT
"
:
case
"
ELOOP
"
:
case
"
ENAMETOOLONG
"
:
case
"
UNKNOWN
"
:
this
.
cache
[
this
.
_makeAbs
(
n
)
]
=
!
1
;
break
;
default
:
this
.
cache
[
this
.
_makeAbs
(
n
)
]
=
!
1
this
.
strict
&
&
(
this
.
emit
(
"
error
"
t
)
this
.
abort
(
)
)
this
.
silent
|
|
console
.
error
(
"
glob
error
"
t
)
}
return
e
(
)
}
}
b
.
prototype
.
_processGlobStar
=
function
(
e
r
i
o
s
a
c
)
{
var
u
=
this
;
this
.
_readdir
(
i
a
function
(
n
t
)
{
u
.
_processGlobStar2
(
e
r
i
o
s
a
t
c
)
}
)
}
b
.
prototype
.
_processGlobStar2
=
function
(
n
t
e
r
i
o
s
a
)
{
if
(
!
s
)
return
a
(
)
;
var
c
=
r
.
slice
(
1
)
u
=
n
?
[
n
]
:
[
]
l
=
u
.
concat
(
c
)
;
this
.
_process
(
l
i
!
1
a
)
;
var
f
=
this
.
symlinks
[
e
]
h
=
s
.
length
;
if
(
f
&
&
o
)
return
a
(
)
;
for
(
var
p
=
0
;
p
<
h
;
p
+
+
)
{
if
(
"
.
"
!
=
=
s
[
p
]
.
charAt
(
0
)
|
|
this
.
dot
)
{
var
d
=
u
.
concat
(
s
[
p
]
c
)
;
this
.
_process
(
d
i
!
0
a
)
;
var
v
=
u
.
concat
(
s
[
p
]
r
)
;
this
.
_process
(
v
i
!
0
a
)
}
}
a
(
)
}
b
.
prototype
.
_processSimple
=
function
(
e
r
i
)
{
var
o
=
this
;
this
.
_stat
(
e
function
(
n
t
)
{
o
.
_processSimple2
(
e
r
n
t
i
)
}
)
}
b
.
prototype
.
_processSimple2
=
function
(
n
t
e
r
i
)
{
if
(
this
.
matches
[
t
]
|
|
(
this
.
matches
[
t
]
=
Object
.
create
(
null
)
)
!
r
)
return
i
(
)
;
if
(
n
&
&
h
(
n
)
&
&
!
this
.
nomount
)
{
var
o
=
/
[
\
/
\
\
]
/
.
test
(
n
)
;
"
/
"
=
=
=
n
.
charAt
(
0
)
?
n
=
g
.
join
(
this
.
root
n
)
:
(
n
=
g
.
resolve
(
this
.
root
n
)
o
&
&
(
n
+
=
"
/
"
)
)
}
"
win32
"
=
=
=
s
.
platform
&
&
(
n
=
n
.
replace
(
/
\
\
/
g
"
/
"
)
)
this
.
_emitMatch
(
t
n
)
i
(
)
}
b
.
prototype
.
_stat
=
function
(
r
i
)
{
var
o
=
this
.
_makeAbs
(
r
)
n
=
"
/
"
=
=
=
r
.
slice
(
-
1
)
;
if
(
r
.
length
>
this
.
maxLength
)
return
i
(
)
;
if
(
!
this
.
stat
&
&
p
(
this
.
cache
o
)
)
{
var
t
=
this
.
cache
[
o
]
;
if
(
Array
.
isArray
(
t
)
&
&
(
t
=
"
DIR
"
)
!
n
|
|
"
DIR
"
=
=
=
t
)
return
i
(
null
t
)
;
if
(
n
&
&
"
FILE
"
=
=
=
t
)
return
i
(
)
}
var
e
=
this
.
statCache
[
o
]
;
if
(
void
0
!
=
=
e
)
{
if
(
!
1
=
=
=
e
)
return
i
(
null
e
)
;
var
s
=
e
.
isDirectory
(
)
?
"
DIR
"
:
"
FILE
"
;
return
n
&
&
"
FILE
"
=
=
=
s
?
i
(
)
:
i
(
null
s
e
)
}
var
a
=
this
c
=
d
(
"
stat
\
0
"
+
o
function
(
n
e
)
{
{
if
(
e
&
&
e
.
isSymbolicLink
(
)
)
return
u
.
stat
(
o
function
(
n
t
)
{
n
?
a
.
_stat2
(
r
o
null
e
i
)
:
a
.
_stat2
(
r
o
n
t
i
)
}
)
;
a
.
_stat2
(
r
o
n
e
i
)
}
}
)
;
c
&
&
u
.
lstat
(
o
c
)
}
b
.
prototype
.
_stat2
=
function
(
n
t
e
r
i
)
{
if
(
e
)
return
this
.
statCache
[
t
]
=
!
1
i
(
)
;
var
o
=
"
/
"
=
=
=
n
.
slice
(
-
1
)
;
if
(
this
.
statCache
[
t
]
=
r
"
/
"
=
=
=
t
.
slice
(
-
1
)
&
&
!
r
.
isDirectory
(
)
)
return
i
(
null
!
1
r
)
;
var
s
=
r
.
isDirectory
(
)
?
"
DIR
"
:
"
FILE
"
;
return
this
.
cache
[
t
]
=
this
.
cache
[
t
]
|
|
s
o
&
&
"
DIR
"
!
=
=
s
?
i
(
)
:
i
(
null
s
r
)
}
}
)
.
call
(
this
_
(
"
_process
"
)
)
}
{
"
.
/
common
.
js
"
:
15
"
.
/
sync
.
js
"
:
17
_process
:
24
assert
:
9
events
:
14
fs
:
12
inflight
:
18
inherits
:
19
minimatch
:
20
once
:
21
path
:
22
"
path
-
is
-
absolute
"
:
23
util
:
28
}
]
17
:
[
function
(
e
r
n
)
{
(
function
(
i
)
{
(
r
.
exports
=
n
)
.
GlobSync
=
h
;
var
s
=
e
(
"
fs
"
)
c
=
e
(
"
minimatch
"
)
g
=
(
c
.
Minimatch
e
(
"
.
/
glob
.
js
"
)
.
Glob
e
(
"
util
"
)
e
(
"
path
"
)
)
u
=
e
(
"
assert
"
)
l
=
e
(
"
path
-
is
-
absolute
"
)
t
=
e
(
"
.
/
common
.
js
"
)
o
=
(
t
.
alphasort
t
.
alphasorti
t
.
setopts
)
a
=
t
.
ownProp
f
=
t
.
childrenIgnored
;
function
n
(
n
t
)
{
if
(
"
function
"
=
=
typeof
t
|
|
3
=
=
=
arguments
.
length
)
throw
new
TypeError
(
"
callback
provided
to
sync
glob
\
nSee
:
https
:
/
/
github
.
com
/
isaacs
/
node
-
glob
/
issues
/
167
"
)
;
return
new
h
(
n
t
)
.
found
}
function
h
(
n
t
)
{
if
(
!
n
)
throw
new
Error
(
"
must
provide
pattern
"
)
;
if
(
"
function
"
=
=
typeof
t
|
|
3
=
=
=
arguments
.
length
)
throw
new
TypeError
(
"
callback
provided
to
sync
glob
\
nSee
:
https
:
/
/
github
.
com
/
isaacs
/
node
-
glob
/
issues
/
167
"
)
;
if
(
!
(
this
instanceof
h
)
)
return
new
h
(
n
t
)
;
if
(
o
(
this
n
t
)
this
.
noprocess
)
return
this
;
var
e
=
this
.
minimatch
.
set
.
length
;
this
.
matches
=
new
Array
(
e
)
;
for
(
var
r
=
0
;
r
<
e
;
r
+
+
)
this
.
_process
(
this
.
minimatch
.
set
[
r
]
r
!
1
)
;
this
.
_finish
(
)
}
h
.
prototype
.
_finish
=
function
(
)
{
if
(
u
(
this
instanceof
h
)
this
.
realpath
)
{
var
i
=
this
;
this
.
matches
.
forEach
(
function
(
n
t
)
{
var
e
=
i
.
matches
[
t
]
=
Object
.
create
(
null
)
;
for
(
var
r
in
n
)
try
{
r
=
i
.
_makeAbs
(
r
)
e
[
s
.
realpathSync
(
r
i
.
realpathCache
)
]
=
!
0
}
catch
(
n
)
{
if
(
"
stat
"
!
=
=
n
.
syscall
)
throw
n
;
e
[
i
.
_makeAbs
(
r
)
]
=
!
0
}
}
)
}
t
.
finish
(
this
)
}
h
.
prototype
.
_process
=
function
(
n
t
e
)
{
u
(
this
instanceof
h
)
;
for
(
var
r
i
=
0
;
"
string
"
=
=
typeof
n
[
i
]
;
)
i
+
+
;
switch
(
i
)
{
case
n
.
length
:
return
void
this
.
_processSimple
(
n
.
join
(
"
/
"
)
t
)
;
case
0
:
r
=
null
;
break
;
default
:
r
=
n
.
slice
(
0
i
)
.
join
(
"
/
"
)
}
var
o
s
=
n
.
slice
(
i
)
;
o
=
null
=
=
=
r
?
"
.
"
:
(
(
l
(
r
)
|
|
l
(
n
.
join
(
"
/
"
)
)
)
&
&
(
r
&
&
l
(
r
)
|
|
(
r
=
"
/
"
+
r
)
)
r
)
;
var
a
=
this
.
_makeAbs
(
o
)
;
f
(
this
o
)
|
|
(
s
[
0
]
=
=
=
c
.
GLOBSTAR
?
this
.
_processGlobStar
(
r
o
a
s
t
e
)
:
this
.
_processReaddir
(
r
o
a
s
t
e
)
)
}
h
.
prototype
.
_processReaddir
=
function
(
n
t
e
r
i
o
)
{
var
s
=
this
.
_readdir
(
e
o
)
;
if
(
s
)
{
for
(
var
a
=
r
[
0
]
c
=
!
!
this
.
minimatch
.
negate
u
=
a
.
_glob
l
=
this
.
dot
|
|
"
.
"
=
=
=
u
.
charAt
(
0
)
f
=
[
]
h
=
0
;
h
<
s
.
length
;
h
+
+
)
{
if
(
"
.
"
!
=
=
(
v
=
s
[
h
]
)
.
charAt
(
0
)
|
|
l
)
(
c
&
&
!
n
?
!
v
.
match
(
a
)
:
v
.
match
(
a
)
)
&
&
f
.
push
(
v
)
}
var
p
=
f
.
length
;
if
(
0
!
=
=
p
)
if
(
1
!
=
=
r
.
length
|
|
this
.
mark
|
|
this
.
stat
)
{
r
.
shift
(
)
;
for
(
h
=
0
;
h
<
p
;
h
+
+
)
{
var
d
;
v
=
f
[
h
]
;
d
=
n
?
[
n
v
]
:
[
v
]
this
.
_process
(
d
.
concat
(
r
)
i
o
)
}
}
else
{
this
.
matches
[
i
]
|
|
(
this
.
matches
[
i
]
=
Object
.
create
(
null
)
)
;
for
(
var
h
=
0
;
h
<
p
;
h
+
+
)
{
var
v
=
f
[
h
]
;
n
&
&
(
v
=
"
/
"
!
=
=
n
.
slice
(
-
1
)
?
n
+
"
/
"
+
v
:
n
+
v
)
"
/
"
!
=
=
v
.
charAt
(
0
)
|
|
this
.
nomount
|
|
(
v
=
g
.
join
(
this
.
root
v
)
)
this
.
matches
[
i
]
[
v
]
=
!
0
}
}
}
}
h
.
prototype
.
_emitMatch
=
function
(
n
t
)
{
this
.
_makeAbs
(
t
)
;
if
(
this
.
mark
&
&
(
t
=
this
.
_mark
(
t
)
)
!
this
.
matches
[
n
]
[
t
]
)
{
if
(
this
.
nodir
)
{
var
e
=
this
.
cache
[
this
.
_makeAbs
(
t
)
]
;
if
(
"
DIR
"
=
=
=
e
|
|
Array
.
isArray
(
e
)
)
return
}
this
.
matches
[
n
]
[
t
]
=
!
0
this
.
stat
&
&
this
.
_stat
(
t
)
}
}
h
.
prototype
.
_readdirInGlobStar
=
function
(
n
)
{
if
(
this
.
follow
)
return
this
.
_readdir
(
n
!
1
)
;
var
t
e
;
try
{
e
=
s
.
lstatSync
(
n
)
}
catch
(
n
)
{
return
null
}
var
r
=
e
.
isSymbolicLink
(
)
;
return
(
this
.
symlinks
[
n
]
=
r
)
|
|
e
.
isDirectory
(
)
?
t
=
this
.
_readdir
(
n
!
1
)
:
this
.
cache
[
n
]
=
"
FILE
"
t
}
h
.
prototype
.
_readdir
=
function
(
t
n
)
{
if
(
n
&
&
!
a
(
this
.
symlinks
t
)
)
return
this
.
_readdirInGlobStar
(
t
)
;
if
(
a
(
this
.
cache
t
)
)
{
var
e
=
this
.
cache
[
t
]
;
if
(
!
e
|
|
"
FILE
"
=
=
=
e
)
return
null
;
if
(
Array
.
isArray
(
e
)
)
return
e
}
try
{
return
this
.
_readdirEntries
(
t
s
.
readdirSync
(
t
)
)
}
catch
(
n
)
{
return
this
.
_readdirError
(
t
n
)
null
}
}
h
.
prototype
.
_readdirEntries
=
function
(
n
t
)
{
if
(
!
this
.
mark
&
&
!
this
.
stat
)
for
(
var
e
=
0
;
e
<
t
.
length
;
e
+
+
)
{
var
r
=
t
[
e
]
;
r
=
"
/
"
=
=
=
n
?
n
+
r
:
n
+
"
/
"
+
r
this
.
cache
[
r
]
=
!
0
}
return
this
.
cache
[
n
]
=
t
}
h
.
prototype
.
_readdirError
=
function
(
n
t
)
{
switch
(
t
.
code
)
{
case
"
ENOTSUP
"
:
case
"
ENOTDIR
"
:
this
.
cache
[
this
.
_makeAbs
(
n
)
]
=
"
FILE
"
;
break
;
case
"
ENOENT
"
:
case
"
ELOOP
"
:
case
"
ENAMETOOLONG
"
:
case
"
UNKNOWN
"
:
this
.
cache
[
this
.
_makeAbs
(
n
)
]
=
!
1
;
break
;
default
:
if
(
this
.
cache
[
this
.
_makeAbs
(
n
)
]
=
!
1
this
.
strict
)
throw
t
;
this
.
silent
|
|
console
.
error
(
"
glob
error
"
t
)
}
}
h
.
prototype
.
_processGlobStar
=
function
(
n
t
e
r
i
o
)
{
var
s
=
this
.
_readdir
(
e
o
)
;
if
(
s
)
{
var
a
=
r
.
slice
(
1
)
c
=
n
?
[
n
]
:
[
]
u
=
c
.
concat
(
a
)
;
this
.
_process
(
u
i
!
1
)
;
var
l
=
s
.
length
;
if
(
!
this
.
symlinks
[
e
]
|
|
!
o
)
for
(
var
f
=
0
;
f
<
l
;
f
+
+
)
{
if
(
"
.
"
!
=
=
s
[
f
]
.
charAt
(
0
)
|
|
this
.
dot
)
{
var
h
=
c
.
concat
(
s
[
f
]
a
)
;
this
.
_process
(
h
i
!
0
)
;
var
p
=
c
.
concat
(
s
[
f
]
r
)
;
this
.
_process
(
p
i
!
0
)
}
}
}
}
h
.
prototype
.
_processSimple
=
function
(
n
t
)
{
var
e
=
this
.
_stat
(
n
)
;
if
(
this
.
matches
[
t
]
|
|
(
this
.
matches
[
t
]
=
Object
.
create
(
null
)
)
e
)
{
if
(
n
&
&
l
(
n
)
&
&
!
this
.
nomount
)
{
var
r
=
/
[
\
/
\
\
]
/
.
test
(
n
)
;
"
/
"
=
=
=
n
.
charAt
(
0
)
?
n
=
g
.
join
(
this
.
root
n
)
:
(
n
=
g
.
resolve
(
this
.
root
n
)
r
&
&
(
n
+
=
"
/
"
)
)
}
"
win32
"
=
=
=
i
.
platform
&
&
(
n
=
n
.
replace
(
/
\
\
/
g
"
/
"
)
)
this
.
matches
[
t
]
[
n
]
=
!
0
}
}
h
.
prototype
.
_stat
=
function
(
n
)
{
var
t
=
this
.
_makeAbs
(
n
)
e
=
"
/
"
=
=
=
n
.
slice
(
-
1
)
;
if
(
n
.
length
>
this
.
maxLength
)
return
!
1
;
if
(
!
this
.
stat
&
&
a
(
this
.
cache
t
)
)
{
var
r
=
this
.
cache
[
t
]
;
if
(
Array
.
isArray
(
r
)
&
&
(
r
=
"
DIR
"
)
!
e
|
|
"
DIR
"
=
=
=
r
)
return
r
;
if
(
e
&
&
"
FILE
"
=
=
=
r
)
return
!
1
}
var
i
=
this
.
statCache
[
t
]
;
if
(
!
i
)
{
var
o
;
try
{
o
=
s
.
lstatSync
(
t
)
}
catch
(
n
)
{
return
!
1
}
if
(
o
.
isSymbolicLink
(
)
)
try
{
i
=
s
.
statSync
(
t
)
}
catch
(
n
)
{
i
=
o
}
else
i
=
o
}
r
=
(
this
.
statCache
[
t
]
=
i
)
.
isDirectory
(
)
?
"
DIR
"
:
"
FILE
"
;
return
this
.
cache
[
t
]
=
this
.
cache
[
t
]
|
|
r
(
!
e
|
|
"
DIR
"
=
=
=
r
)
&
&
r
}
h
.
prototype
.
_mark
=
function
(
n
)
{
return
t
.
mark
(
this
n
)
}
h
.
prototype
.
_makeAbs
=
function
(
n
)
{
return
t
.
makeAbs
(
this
n
)
}
}
)
.
call
(
this
e
(
"
_process
"
)
)
}
{
"
.
/
common
.
js
"
:
15
"
.
/
glob
.
js
"
:
16
_process
:
24
assert
:
9
fs
:
12
minimatch
:
20
path
:
22
"
path
-
is
-
absolute
"
:
23
util
:
28
}
]
18
:
[
function
(
t
r
n
)
{
(
function
(
s
)
{
var
n
=
t
(
"
wrappy
"
)
a
=
Object
.
create
(
null
)
e
=
t
(
"
once
"
)
;
r
.
exports
=
n
(
function
(
n
t
)
{
return
a
[
n
]
?
(
a
[
n
]
.
push
(
t
)
null
)
:
(
a
[
n
]
=
[
t
]
o
=
n
e
(
function
n
(
)
{
var
t
=
a
[
o
]
e
=
t
.
length
r
=
function
(
n
)
{
for
(
var
t
=
n
.
length
e
=
[
]
r
=
0
;
r
<
t
;
r
+
+
)
e
[
r
]
=
n
[
r
]
;
return
e
}
(
arguments
)
;
try
{
for
(
var
i
=
0
;
i
<
e
;
i
+
+
)
t
[
i
]
.
apply
(
null
r
)
}
finally
{
t
.
length
>
e
?
(
t
.
splice
(
0
e
)
s
.
nextTick
(
function
(
)
{
n
.
apply
(
null
r
)
}
)
)
:
delete
a
[
o
]
}
}
)
)
;
var
o
}
)
}
)
.
call
(
this
t
(
"
_process
"
)
)
}
{
_process
:
24
once
:
21
wrappy
:
29
}
]
19
:
[
function
(
n
t
e
)
{
"
function
"
=
=
typeof
Object
.
create
?
t
.
exports
=
function
(
n
t
)
{
n
.
super_
=
t
n
.
prototype
=
Object
.
create
(
t
.
prototype
{
constructor
:
{
value
:
n
enumerable
:
!
1
writable
:
!
0
configurable
:
!
0
}
}
)
}
:
t
.
exports
=
function
(
n
t
)
{
n
.
super_
=
t
;
var
e
=
function
(
)
{
}
;
e
.
prototype
=
t
.
prototype
n
.
prototype
=
new
e
n
.
prototype
.
constructor
=
n
}
}
{
}
]
20
:
[
function
(
n
t
e
)
{
(
t
.
exports
=
s
)
.
Minimatch
=
i
;
var
u
=
{
sep
:
"
/
"
}
;
try
{
u
=
n
(
"
path
"
)
}
catch
(
n
)
{
}
var
M
=
s
.
GLOBSTAR
=
i
.
GLOBSTAR
=
{
}
r
=
n
(
"
brace
-
expansion
"
)
C
=
{
"
!
"
:
{
open
:
"
(
?
:
(
?
!
(
?
:
"
close
:
"
)
)
[
^
/
]
*
?
)
"
}
"
?
"
:
{
open
:
"
(
?
:
"
close
:
"
)
?
"
}
"
+
"
:
{
open
:
"
(
?
:
"
close
:
"
)
+
"
}
"
*
"
:
{
open
:
"
(
?
:
"
close
:
"
)
*
"
}
"
"
:
{
open
:
"
(
?
:
"
close
:
"
)
"
}
}
P
=
"
[
^
/
]
"
z
=
P
+
"
*
?
"
B
=
"
(
)
.
*
{
}
+
?
[
]
^
\
\
!
"
.
split
(
"
"
)
.
reduce
(
function
(
n
t
)
{
return
n
[
t
]
=
!
0
n
}
{
}
)
;
var
l
=
/
\
/
+
/
;
function
o
(
t
e
)
{
t
=
t
|
|
{
}
e
=
e
|
|
{
}
;
var
r
=
{
}
;
return
Object
.
keys
(
e
)
.
forEach
(
function
(
n
)
{
r
[
n
]
=
e
[
n
]
}
)
Object
.
keys
(
t
)
.
forEach
(
function
(
n
)
{
r
[
n
]
=
t
[
n
]
}
)
r
}
function
s
(
n
t
e
)
{
if
(
"
string
"
!
=
typeof
t
)
throw
new
TypeError
(
"
glob
pattern
string
required
"
)
;
return
e
|
|
(
e
=
{
}
)
!
(
!
e
.
nocomment
&
&
"
#
"
=
=
=
t
.
charAt
(
0
)
)
&
&
(
"
"
=
=
=
t
.
trim
(
)
?
"
"
=
=
=
n
:
new
i
(
t
e
)
.
match
(
n
)
)
}
function
i
(
n
t
)
{
if
(
!
(
this
instanceof
i
)
)
return
new
i
(
n
t
)
;
if
(
"
string
"
!
=
typeof
n
)
throw
new
TypeError
(
"
glob
pattern
string
required
"
)
;
t
|
|
(
t
=
{
}
)
n
=
n
.
trim
(
)
"
/
"
!
=
=
u
.
sep
&
&
(
n
=
n
.
split
(
u
.
sep
)
.
join
(
"
/
"
)
)
this
.
options
=
t
this
.
set
=
[
]
this
.
pattern
=
n
this
.
regexp
=
null
this
.
negate
=
!
1
this
.
comment
=
!
1
this
.
empty
=
!
1
this
.
make
(
)
}
function
a
(
n
t
)
{
if
(
t
|
|
(
t
=
this
instanceof
i
?
this
.
options
:
{
}
)
void
0
=
=
=
(
n
=
void
0
=
=
=
n
?
this
.
pattern
:
n
)
)
throw
new
TypeError
(
"
undefined
pattern
"
)
;
return
t
.
nobrace
|
|
!
n
.
match
(
/
\
{
.
*
\
}
/
)
?
[
n
]
:
r
(
n
)
}
s
.
filter
=
function
(
r
i
)
{
return
i
=
i
|
|
{
}
function
(
n
t
e
)
{
return
s
(
n
r
i
)
}
}
s
.
defaults
=
function
(
r
)
{
if
(
!
r
|
|
!
Object
.
keys
(
r
)
.
length
)
return
s
;
var
i
=
s
n
=
function
(
n
t
e
)
{
return
i
.
minimatch
(
n
t
o
(
r
e
)
)
}
;
return
n
.
Minimatch
=
function
(
n
t
)
{
return
new
i
.
Minimatch
(
n
o
(
r
t
)
)
}
n
}
i
.
defaults
=
function
(
n
)
{
return
n
&
&
Object
.
keys
(
n
)
.
length
?
s
.
defaults
(
n
)
.
Minimatch
:
i
}
i
.
prototype
.
debug
=
function
(
)
{
}
i
.
prototype
.
make
=
function
(
)
{
if
(
this
.
_made
)
return
;
var
n
=
this
.
pattern
t
=
this
.
options
;
if
(
!
t
.
nocomment
&
&
"
#
"
=
=
=
n
.
charAt
(
0
)
)
return
void
(
this
.
comment
=
!
0
)
;
if
(
!
n
)
return
void
(
this
.
empty
=
!
0
)
;
this
.
parseNegate
(
)
;
var
e
=
this
.
globSet
=
this
.
braceExpand
(
)
;
t
.
debug
&
&
(
this
.
debug
=
console
.
error
)
;
this
.
debug
(
this
.
pattern
e
)
e
=
this
.
globParts
=
e
.
map
(
function
(
n
)
{
return
n
.
split
(
l
)
}
)
this
.
debug
(
this
.
pattern
e
)
e
=
e
.
map
(
function
(
n
t
e
)
{
return
n
.
map
(
this
.
parse
this
)
}
this
)
this
.
debug
(
this
.
pattern
e
)
e
=
e
.
filter
(
function
(
n
)
{
return
-
1
=
=
=
n
.
indexOf
(
!
1
)
}
)
this
.
debug
(
this
.
pattern
e
)
this
.
set
=
e
}
i
.
prototype
.
parseNegate
=
function
(
)
{
var
n
=
this
.
pattern
t
=
!
1
e
=
this
.
options
r
=
0
;
if
(
e
.
nonegate
)
return
;
for
(
var
i
=
0
o
=
n
.
length
;
i
<
o
&
&
"
!
"
=
=
=
n
.
charAt
(
i
)
;
i
+
+
)
t
=
!
t
r
+
+
;
r
&
&
(
this
.
pattern
=
n
.
substr
(
r
)
)
;
this
.
negate
=
t
}
s
.
braceExpand
=
function
(
n
t
)
{
return
a
(
n
t
)
}
i
.
prototype
.
braceExpand
=
a
i
.
prototype
.
parse
=
function
(
n
t
)
{
if
(
65536
<
n
.
length
)
throw
new
TypeError
(
"
pattern
is
too
long
"
)
;
var
e
=
this
.
options
;
if
(
!
e
.
noglobstar
&
&
"
*
*
"
=
=
=
n
)
return
M
;
if
(
"
"
=
=
=
n
)
return
"
"
;
var
r
i
=
"
"
o
=
!
!
e
.
nocase
s
=
!
1
a
=
[
]
c
=
[
]
u
=
!
1
l
=
-
1
f
=
-
1
h
=
"
.
"
=
=
=
n
.
charAt
(
0
)
?
"
"
:
e
.
dot
?
"
(
?
!
(
?
:
^
|
\
\
/
)
\
\
.
{
1
2
}
(
?
:
|
\
\
/
)
)
"
:
"
(
?
!
\
\
.
)
"
p
=
this
;
function
d
(
)
{
if
(
r
)
{
switch
(
r
)
{
case
"
*
"
:
i
+
=
z
o
=
!
0
;
break
;
case
"
?
"
:
i
+
=
P
o
=
!
0
;
break
;
default
:
i
+
=
"
\
\
"
+
r
}
p
.
debug
(
"
clearStateChar
%
j
%
j
"
r
i
)
r
=
!
1
}
}
for
(
var
v
g
=
0
m
=
n
.
length
;
g
<
m
&
&
(
v
=
n
.
charAt
(
g
)
)
;
g
+
+
)
if
(
this
.
debug
(
"
%
s
\
t
%
s
%
s
%
j
"
n
g
i
v
)
s
&
&
B
[
v
]
)
i
+
=
"
\
\
"
+
v
s
=
!
1
;
else
switch
(
v
)
{
case
"
/
"
:
return
!
1
;
case
"
\
\
"
:
d
(
)
s
=
!
0
;
continue
;
case
"
?
"
:
case
"
*
"
:
case
"
+
"
:
case
"
"
:
case
"
!
"
:
if
(
this
.
debug
(
"
%
s
\
t
%
s
%
s
%
j
<
-
-
stateChar
"
n
g
i
v
)
u
)
{
this
.
debug
(
"
in
class
"
)
"
!
"
=
=
=
v
&
&
g
=
=
=
f
+
1
&
&
(
v
=
"
^
"
)
i
+
=
v
;
continue
}
p
.
debug
(
"
call
clearStateChar
%
j
"
r
)
d
(
)
r
=
v
e
.
noext
&
&
d
(
)
;
continue
;
case
"
(
"
:
if
(
u
)
{
i
+
=
"
(
"
;
continue
}
if
(
!
r
)
{
i
+
=
"
\
\
(
"
;
continue
}
a
.
push
(
{
type
:
r
start
:
g
-
1
reStart
:
i
.
length
open
:
C
[
r
]
.
open
close
:
C
[
r
]
.
close
}
)
i
+
=
"
!
"
=
=
=
r
?
"
(
?
:
(
?
!
(
?
:
"
:
"
(
?
:
"
this
.
debug
(
"
plType
%
j
%
j
"
r
i
)
r
=
!
1
;
continue
;
case
"
)
"
:
if
(
u
|
|
!
a
.
length
)
{
i
+
=
"
\
\
)
"
;
continue
}
d
(
)
o
=
!
0
;
var
y
=
a
.
pop
(
)
;
i
+
=
y
.
close
"
!
"
=
=
=
y
.
type
&
&
c
.
push
(
y
)
y
.
reEnd
=
i
.
length
;
continue
;
case
"
|
"
:
if
(
u
|
|
!
a
.
length
|
|
s
)
{
i
+
=
"
\
\
|
"
s
=
!
1
;
continue
}
d
(
)
i
+
=
"
|
"
;
continue
;
case
"
[
"
:
if
(
d
(
)
u
)
{
i
+
=
"
\
\
"
+
v
;
continue
}
u
=
!
0
f
=
g
l
=
i
.
length
i
+
=
v
;
continue
;
case
"
]
"
:
if
(
g
=
=
=
f
+
1
|
|
!
u
)
{
i
+
=
"
\
\
"
+
v
s
=
!
1
;
continue
}
if
(
u
)
{
var
b
=
n
.
substring
(
f
+
1
g
)
;
try
{
RegExp
(
"
[
"
+
b
+
"
]
"
)
}
catch
(
n
)
{
var
_
=
this
.
parse
(
b
U
)
;
i
=
i
.
substr
(
0
l
)
+
"
\
\
[
"
+
_
[
0
]
+
"
\
\
]
"
o
=
o
|
|
_
[
1
]
u
=
!
1
;
continue
}
}
u
=
!
(
o
=
!
0
)
i
+
=
v
;
continue
;
default
:
d
(
)
s
?
s
=
!
1
:
!
B
[
v
]
|
|
"
^
"
=
=
=
v
&
&
u
|
|
(
i
+
=
"
\
\
"
)
i
+
=
v
}
u
&
&
(
b
=
n
.
substr
(
f
+
1
)
_
=
this
.
parse
(
b
U
)
i
=
i
.
substr
(
0
l
)
+
"
\
\
[
"
+
_
[
0
]
o
=
o
|
|
_
[
1
]
)
;
for
(
y
=
a
.
pop
(
)
;
y
;
y
=
a
.
pop
(
)
)
{
var
w
=
i
.
slice
(
y
.
reStart
+
y
.
open
.
length
)
;
this
.
debug
(
"
setting
tail
"
i
y
)
w
=
w
.
replace
(
/
(
(
?
:
\
\
{
2
}
)
{
0
64
}
)
(
\
\
?
)
\
|
/
g
function
(
n
t
e
)
{
return
e
|
|
(
e
=
"
\
\
"
)
t
+
t
+
e
+
"
|
"
}
)
this
.
debug
(
"
tail
=
%
j
\
n
%
s
"
w
w
y
i
)
;
var
E
=
"
*
"
=
=
=
y
.
type
?
z
:
"
?
"
=
=
=
y
.
type
?
P
:
"
\
\
"
+
y
.
type
;
o
=
!
0
i
=
i
.
slice
(
0
y
.
reStart
)
+
E
+
"
\
\
(
"
+
w
}
d
(
)
s
&
&
(
i
+
=
"
\
\
\
\
"
)
;
var
O
=
!
1
;
switch
(
i
.
charAt
(
0
)
)
{
case
"
.
"
:
case
"
[
"
:
case
"
(
"
:
O
=
!
0
}
for
(
var
A
=
c
.
length
-
1
;
-
1
<
A
;
A
-
-
)
{
var
x
=
c
[
A
]
j
=
i
.
slice
(
0
x
.
reStart
)
k
=
i
.
slice
(
x
.
reStart
x
.
reEnd
-
8
)
S
=
i
.
slice
(
x
.
reEnd
-
8
x
.
reEnd
)
R
=
i
.
slice
(
x
.
reEnd
)
;
S
+
=
R
;
var
L
=
j
.
split
(
"
(
"
)
.
length
-
1
T
=
R
;
for
(
g
=
0
;
g
<
L
;
g
+
+
)
T
=
T
.
replace
(
/
\
)
[
+
*
?
]
?
/
"
"
)
;
var
I
=
"
"
;
"
"
=
=
=
(
R
=
T
)
&
&
t
!
=
=
U
&
&
(
I
=
"
"
)
;
var
N
=
j
+
k
+
R
+
I
+
S
;
i
=
N
}
"
"
!
=
=
i
&
&
o
&
&
(
i
=
"
(
?
=
.
)
"
+
i
)
;
O
&
&
(
i
=
h
+
i
)
;
if
(
t
=
=
=
U
)
return
[
i
o
]
;
if
(
!
o
)
return
n
.
replace
(
/
\
\
(
.
)
/
g
"
1
"
)
;
var
D
=
e
.
nocase
?
"
i
"
:
"
"
;
try
{
var
F
=
new
RegExp
(
"
^
"
+
i
+
"
"
D
)
}
catch
(
n
)
{
return
new
RegExp
(
"
.
"
)
}
return
F
.
_glob
=
n
F
.
_src
=
i
F
}
;
var
U
=
{
}
;
s
.
makeRe
=
function
(
n
t
)
{
return
new
i
(
n
t
|
|
{
}
)
.
makeRe
(
)
}
i
.
prototype
.
makeRe
=
function
(
)
{
if
(
this
.
regexp
|
|
!
1
=
=
=
this
.
regexp
)
return
this
.
regexp
;
var
n
=
this
.
set
;
if
(
!
n
.
length
)
return
this
.
regexp
=
!
1
this
.
regexp
;
var
t
=
this
.
options
e
=
t
.
noglobstar
?
z
:
t
.
dot
?
"
(
?
:
(
?
!
(
?
:
\
\
/
|
^
)
(
?
:
\
\
.
{
1
2
}
)
(
|
\
\
/
)
)
.
)
*
?
"
:
"
(
?
:
(
?
!
(
?
:
\
\
/
|
^
)
\
\
.
)
.
)
*
?
"
r
=
t
.
nocase
?
"
i
"
:
"
"
i
=
n
.
map
(
function
(
n
)
{
return
n
.
map
(
function
(
n
)
{
return
n
=
=
=
M
?
e
:
"
string
"
=
=
typeof
n
?
n
.
replace
(
/
[
-
[
\
]
{
}
(
)
*
+
?
.
\
\
^
|
#
\
s
]
/
g
"
\
\
&
"
)
:
n
.
_src
}
)
.
join
(
"
\
\
/
"
)
}
)
.
join
(
"
|
"
)
;
i
=
"
^
(
?
:
"
+
i
+
"
)
"
this
.
negate
&
&
(
i
=
"
^
(
?
!
"
+
i
+
"
)
.
*
"
)
;
try
{
this
.
regexp
=
new
RegExp
(
i
r
)
}
catch
(
n
)
{
this
.
regexp
=
!
1
}
return
this
.
regexp
}
s
.
match
=
function
(
n
t
e
)
{
var
r
=
new
i
(
t
e
=
e
|
|
{
}
)
;
return
n
=
n
.
filter
(
function
(
n
)
{
return
r
.
match
(
n
)
}
)
r
.
options
.
nonull
&
&
!
n
.
length
&
&
n
.
push
(
t
)
n
}
i
.
prototype
.
match
=
function
(
n
t
)
{
if
(
this
.
debug
(
"
match
"
n
this
.
pattern
)
this
.
comment
)
return
!
1
;
if
(
this
.
empty
)
return
"
"
=
=
=
n
;
if
(
"
/
"
=
=
=
n
&
&
t
)
return
!
0
;
var
e
=
this
.
options
;
"
/
"
!
=
=
u
.
sep
&
&
(
n
=
n
.
split
(
u
.
sep
)
.
join
(
"
/
"
)
)
;
n
=
n
.
split
(
l
)
this
.
debug
(
this
.
pattern
"
split
"
n
)
;
var
r
i
o
=
this
.
set
;
for
(
this
.
debug
(
this
.
pattern
"
set
"
o
)
i
=
n
.
length
-
1
;
0
<
=
i
&
&
!
(
r
=
n
[
i
]
)
;
i
-
-
)
;
for
(
i
=
0
;
i
<
o
.
length
;
i
+
+
)
{
var
s
=
o
[
i
]
a
=
n
;
e
.
matchBase
&
&
1
=
=
=
s
.
length
&
&
(
a
=
[
r
]
)
;
var
c
=
this
.
matchOne
(
a
s
t
)
;
if
(
c
)
return
!
!
e
.
flipNegate
|
|
!
this
.
negate
}
return
!
e
.
flipNegate
&
&
this
.
negate
}
i
.
prototype
.
matchOne
=
function
(
n
t
e
)
{
var
r
=
this
.
options
;
this
.
debug
(
"
matchOne
"
{
this
:
this
file
:
n
pattern
:
t
}
)
this
.
debug
(
"
matchOne
"
n
.
length
t
.
length
)
;
for
(
var
i
=
0
o
=
0
s
=
n
.
length
a
=
t
.
length
;
i
<
s
&
&
o
<
a
;
i
+
+
o
+
+
)
{
this
.
debug
(
"
matchOne
loop
"
)
;
var
c
u
=
t
[
o
]
l
=
n
[
i
]
;
if
(
this
.
debug
(
t
u
l
)
!
1
=
=
=
u
)
return
!
1
;
if
(
u
=
=
=
M
)
{
this
.
debug
(
"
GLOBSTAR
"
[
t
u
l
]
)
;
var
f
=
i
h
=
o
+
1
;
if
(
h
=
=
=
a
)
{
for
(
this
.
debug
(
"
*
*
at
the
end
"
)
;
i
<
s
;
i
+
+
)
if
(
"
.
"
=
=
=
n
[
i
]
|
|
"
.
.
"
=
=
=
n
[
i
]
|
|
!
r
.
dot
&
&
"
.
"
=
=
=
n
[
i
]
.
charAt
(
0
)
)
return
!
1
;
return
!
0
}
for
(
;
f
<
s
;
)
{
var
p
=
n
[
f
]
;
if
(
this
.
debug
(
"
\
nglobstar
while
"
n
f
t
h
p
)
this
.
matchOne
(
n
.
slice
(
f
)
t
.
slice
(
h
)
e
)
)
return
this
.
debug
(
"
globstar
found
match
!
"
f
s
p
)
!
0
;
if
(
"
.
"
=
=
=
p
|
|
"
.
.
"
=
=
=
p
|
|
!
r
.
dot
&
&
"
.
"
=
=
=
p
.
charAt
(
0
)
)
{
this
.
debug
(
"
dot
detected
!
"
n
f
t
h
)
;
break
}
this
.
debug
(
"
globstar
swallow
a
segment
and
continue
"
)
f
+
+
}
return
!
(
!
e
|
|
(
this
.
debug
(
"
\
n
>
>
>
no
match
partial
?
"
n
f
t
h
)
f
!
=
=
s
)
)
}
if
(
"
string
"
=
=
typeof
u
?
(
c
=
r
.
nocase
?
l
.
toLowerCase
(
)
=
=
=
u
.
toLowerCase
(
)
:
l
=
=
=
u
this
.
debug
(
"
string
match
"
u
l
c
)
)
:
(
c
=
l
.
match
(
u
)
this
.
debug
(
"
pattern
match
"
u
l
c
)
)
!
c
)
return
!
1
}
if
(
i
=
=
=
s
&
&
o
=
=
=
a
)
return
!
0
;
if
(
i
=
=
=
s
)
return
e
;
if
(
o
=
=
=
a
)
return
i
=
=
=
s
-
1
&
&
"
"
=
=
=
n
[
i
]
;
throw
new
Error
(
"
wtf
?
"
)
}
}
{
"
brace
-
expansion
"
:
11
path
:
22
}
]
21
:
[
function
(
n
t
e
)
{
var
r
=
n
(
"
wrappy
"
)
;
function
i
(
n
)
{
var
t
=
function
(
)
{
return
t
.
called
?
t
.
value
:
(
t
.
called
=
!
0
t
.
value
=
n
.
apply
(
this
arguments
)
)
}
;
return
t
.
called
=
!
1
t
}
function
o
(
n
)
{
var
t
=
function
(
)
{
if
(
t
.
called
)
throw
new
Error
(
t
.
onceError
)
;
return
t
.
called
=
!
0
t
.
value
=
n
.
apply
(
this
arguments
)
}
e
=
n
.
name
|
|
"
Function
wrapped
with
once
"
;
return
t
.
onceError
=
e
+
"
shouldn
'
t
be
called
more
than
once
"
t
.
called
=
!
1
t
}
t
.
exports
=
r
(
i
)
t
.
exports
.
strict
=
r
(
o
)
i
.
proto
=
i
(
function
(
)
{
Object
.
defineProperty
(
Function
.
prototype
"
once
"
{
value
:
function
(
)
{
return
i
(
this
)
}
configurable
:
!
0
}
)
Object
.
defineProperty
(
Function
.
prototype
"
onceStrict
"
{
value
:
function
(
)
{
return
o
(
this
)
}
configurable
:
!
0
}
)
}
)
}
{
wrappy
:
29
}
]
22
:
[
function
(
n
t
u
)
{
(
function
(
i
)
{
function
o
(
n
t
)
{
for
(
var
e
=
0
r
=
n
.
length
-
1
;
0
<
=
r
;
r
-
-
)
{
var
i
=
n
[
r
]
;
"
.
"
=
=
=
i
?
n
.
splice
(
r
1
)
:
"
.
.
"
=
=
=
i
?
(
n
.
splice
(
r
1
)
e
+
+
)
:
e
&
&
(
n
.
splice
(
r
1
)
e
-
-
)
}
if
(
t
)
for
(
;
e
-
-
;
e
)
n
.
unshift
(
"
.
.
"
)
;
return
n
}
var
t
=
/
^
(
\
/
?
|
)
(
[
\
s
\
S
]
*
?
)
(
(
?
:
\
.
{
1
2
}
|
[
^
\
/
]
+
?
|
)
(
\
.
[
^
.
\
/
]
*
|
)
)
(
?
:
[
\
/
]
*
)
/
s
=
function
(
n
)
{
return
t
.
exec
(
n
)
.
slice
(
1
)
}
;
function
a
(
n
t
)
{
if
(
n
.
filter
)
return
n
.
filter
(
t
)
;
for
(
var
e
=
[
]
r
=
0
;
r
<
n
.
length
;
r
+
+
)
t
(
n
[
r
]
r
n
)
&
&
e
.
push
(
n
[
r
]
)
;
return
e
}
u
.
resolve
=
function
(
)
{
for
(
var
n
=
"
"
t
=
!
1
e
=
arguments
.
length
-
1
;
-
1
<
=
e
&
&
!
t
;
e
-
-
)
{
var
r
=
0
<
=
e
?
arguments
[
e
]
:
i
.
cwd
(
)
;
if
(
"
string
"
!
=
typeof
r
)
throw
new
TypeError
(
"
Arguments
to
path
.
resolve
must
be
strings
"
)
;
r
&
&
(
n
=
r
+
"
/
"
+
n
t
=
"
/
"
=
=
=
r
.
charAt
(
0
)
)
}
return
(
t
?
"
/
"
:
"
"
)
+
(
n
=
o
(
a
(
n
.
split
(
"
/
"
)
function
(
n
)
{
return
!
!
n
}
)
!
t
)
.
join
(
"
/
"
)
)
|
|
"
.
"
}
u
.
normalize
=
function
(
n
)
{
var
t
=
u
.
isAbsolute
(
n
)
e
=
"
/
"
=
=
=
r
(
n
-
1
)
;
return
(
n
=
o
(
a
(
n
.
split
(
"
/
"
)
function
(
n
)
{
return
!
!
n
}
)
!
t
)
.
join
(
"
/
"
)
)
|
|
t
|
|
(
n
=
"
.
"
)
n
&
&
e
&
&
(
n
+
=
"
/
"
)
(
t
?
"
/
"
:
"
"
)
+
n
}
u
.
isAbsolute
=
function
(
n
)
{
return
"
/
"
=
=
=
n
.
charAt
(
0
)
}
u
.
join
=
function
(
)
{
var
n
=
Array
.
prototype
.
slice
.
call
(
arguments
0
)
;
return
u
.
normalize
(
a
(
n
function
(
n
t
)
{
if
(
"
string
"
!
=
typeof
n
)
throw
new
TypeError
(
"
Arguments
to
path
.
join
must
be
strings
"
)
;
return
n
}
)
.
join
(
"
/
"
)
)
}
u
.
relative
=
function
(
n
t
)
{
function
e
(
n
)
{
for
(
var
t
=
0
;
t
<
n
.
length
&
&
"
"
=
=
=
n
[
t
]
;
t
+
+
)
;
for
(
var
e
=
n
.
length
-
1
;
0
<
=
e
&
&
"
"
=
=
=
n
[
e
]
;
e
-
-
)
;
return
e
<
t
?
[
]
:
n
.
slice
(
t
e
-
t
+
1
)
}
n
=
u
.
resolve
(
n
)
.
substr
(
1
)
t
=
u
.
resolve
(
t
)
.
substr
(
1
)
;
for
(
var
r
=
e
(
n
.
split
(
"
/
"
)
)
i
=
e
(
t
.
split
(
"
/
"
)
)
o
=
Math
.
min
(
r
.
length
i
.
length
)
s
=
o
a
=
0
;
a
<
o
;
a
+
+
)
if
(
r
[
a
]
!
=
=
i
[
a
]
)
{
s
=
a
;
break
}
var
c
=
[
]
;
for
(
a
=
s
;
a
<
r
.
length
;
a
+
+
)
c
.
push
(
"
.
.
"
)
;
return
(
c
=
c
.
concat
(
i
.
slice
(
s
)
)
)
.
join
(
"
/
"
)
}
u
.
sep
=
"
/
"
u
.
delimiter
=
"
:
"
u
.
dirname
=
function
(
n
)
{
var
t
=
s
(
n
)
e
=
t
[
0
]
r
=
t
[
1
]
;
return
e
|
|
r
?
(
r
&
&
(
r
=
r
.
substr
(
0
r
.
length
-
1
)
)
e
+
r
)
:
"
.
"
}
u
.
basename
=
function
(
n
t
)
{
var
e
=
s
(
n
)
[
2
]
;
return
t
&
&
e
.
substr
(
-
1
*
t
.
length
)
=
=
=
t
&
&
(
e
=
e
.
substr
(
0
e
.
length
-
t
.
length
)
)
e
}
u
.
extname
=
function
(
n
)
{
return
s
(
n
)
[
3
]
}
;
var
r
=
"
b
"
=
=
=
"
ab
"
.
substr
(
-
1
)
?
function
(
n
t
e
)
{
return
n
.
substr
(
t
e
)
}
:
function
(
n
t
e
)
{
return
t
<
0
&
&
(
t
=
n
.
length
+
t
)
n
.
substr
(
t
e
)
}
}
)
.
call
(
this
n
(
"
_process
"
)
)
}
{
_process
:
24
}
]
23
:
[
function
(
n
r
t
)
{
(
function
(
n
)
{
"
use
strict
"
;
function
t
(
n
)
{
return
"
/
"
=
=
=
n
.
charAt
(
0
)
}
function
e
(
n
)
{
var
t
=
/
^
(
[
a
-
zA
-
Z
]
:
|
[
\
\
\
/
]
{
2
}
[
^
\
\
\
/
]
+
[
\
\
\
/
]
+
[
^
\
\
\
/
]
+
)
?
(
[
\
\
\
/
]
)
?
(
[
\
s
\
S
]
*
?
)
/
.
exec
(
n
)
e
=
t
[
1
]
|
|
"
"
r
=
Boolean
(
e
&
&
"
:
"
!
=
=
e
.
charAt
(
1
)
)
;
return
Boolean
(
t
[
2
]
|
|
r
)
}
r
.
exports
=
"
win32
"
=
=
=
n
.
platform
?
e
:
t
r
.
exports
.
posix
=
t
r
.
exports
.
win32
=
e
}
)
.
call
(
this
n
(
"
_process
"
)
)
}
{
_process
:
24
}
]
24
:
[
function
(
n
t
e
)
{
var
r
i
o
=
t
.
exports
=
{
}
;
function
s
(
)
{
throw
new
Error
(
"
setTimeout
has
not
been
defined
"
)
}
function
a
(
)
{
throw
new
Error
(
"
clearTimeout
has
not
been
defined
"
)
}
function
c
(
t
)
{
if
(
r
=
=
=
setTimeout
)
return
setTimeout
(
t
0
)
;
if
(
(
r
=
=
=
s
|
|
!
r
)
&
&
setTimeout
)
return
r
=
setTimeout
setTimeout
(
t
0
)
;
try
{
return
r
(
t
0
)
}
catch
(
n
)
{
try
{
return
r
.
call
(
null
t
0
)
}
catch
(
n
)
{
return
r
.
call
(
this
t
0
)
}
}
}
!
function
(
)
{
try
{
r
=
"
function
"
=
=
typeof
setTimeout
?
setTimeout
:
s
}
catch
(
n
)
{
r
=
s
}
try
{
i
=
"
function
"
=
=
typeof
clearTimeout
?
clearTimeout
:
a
}
catch
(
n
)
{
i
=
a
}
}
(
)
;
var
u
l
=
[
]
f
=
!
1
h
=
-
1
;
function
p
(
)
{
f
&
&
u
&
&
(
f
=
!
1
u
.
length
?
l
=
u
.
concat
(
l
)
:
h
=
-
1
l
.
length
&
&
d
(
)
)
}
function
d
(
)
{
if
(
!
f
)
{
var
n
=
c
(
p
)
;
f
=
!
0
;
for
(
var
t
=
l
.
length
;
t
;
)
{
for
(
u
=
l
l
=
[
]
;
+
+
h
<
t
;
)
u
&
&
u
[
h
]
.
run
(
)
;
h
=
-
1
t
=
l
.
length
}
u
=
null
f
=
!
1
function
(
t
)
{
if
(
i
=
=
=
clearTimeout
)
return
clearTimeout
(
t
)
;
if
(
(
i
=
=
=
a
|
|
!
i
)
&
&
clearTimeout
)
return
i
=
clearTimeout
clearTimeout
(
t
)
;
try
{
i
(
t
)
}
catch
(
n
)
{
try
{
return
i
.
call
(
null
t
)
}
catch
(
n
)
{
return
i
.
call
(
this
t
)
}
}
}
(
n
)
}
}
function
v
(
n
t
)
{
this
.
fun
=
n
this
.
array
=
t
}
function
g
(
)
{
}
o
.
nextTick
=
function
(
n
)
{
var
t
=
new
Array
(
arguments
.
length
-
1
)
;
if
(
1
<
arguments
.
length
)
for
(
var
e
=
1
;
e
<
arguments
.
length
;
e
+
+
)
t
[
e
-
1
]
=
arguments
[
e
]
;
l
.
push
(
new
v
(
n
t
)
)
1
!
=
=
l
.
length
|
|
f
|
|
c
(
d
)
}
v
.
prototype
.
run
=
function
(
)
{
this
.
fun
.
apply
(
null
this
.
array
)
}
o
.
title
=
"
browser
"
o
.
browser
=
!
0
o
.
env
=
{
}
o
.
argv
=
[
]
o
.
version
=
"
"
o
.
versions
=
{
}
o
.
on
=
g
o
.
addListener
=
g
o
.
once
=
g
o
.
off
=
g
o
.
removeListener
=
g
o
.
removeAllListeners
=
g
o
.
emit
=
g
o
.
prependListener
=
g
o
.
prependOnceListener
=
g
o
.
listeners
=
function
(
n
)
{
return
[
]
}
o
.
binding
=
function
(
n
)
{
throw
new
Error
(
"
process
.
binding
is
not
supported
"
)
}
o
.
cwd
=
function
(
)
{
return
"
/
"
}
o
.
chdir
=
function
(
n
)
{
throw
new
Error
(
"
process
.
chdir
is
not
supported
"
)
}
o
.
umask
=
function
(
)
{
return
0
}
}
{
}
]
25
:
[
function
(
n
q
)
{
(
function
(
)
{
var
n
=
this
t
=
n
.
_
r
=
Array
.
prototype
s
=
Object
.
prototype
e
=
Function
.
prototype
i
=
r
.
push
c
=
r
.
slice
f
=
s
.
toString
o
=
s
.
hasOwnProperty
a
=
Array
.
isArray
u
=
Object
.
keys
l
=
e
.
bind
h
=
Object
.
create
p
=
function
(
)
{
}
d
=
function
(
n
)
{
return
n
instanceof
d
?
n
:
this
instanceof
d
?
void
(
this
.
_wrapped
=
n
)
:
new
d
(
n
)
}
;
void
0
!
=
=
?
(
void
0
!
=
=
q
&
&
q
.
exports
&
&
(
=
q
.
exports
=
d
)
.
_
=
d
)
:
n
.
_
=
d
d
.
VERSION
=
"
1
.
8
.
3
"
;
var
v
=
function
(
i
o
n
)
{
if
(
void
0
=
=
=
o
)
return
i
;
switch
(
null
=
=
n
?
3
:
n
)
{
case
1
:
return
function
(
n
)
{
return
i
.
call
(
o
n
)
}
;
case
2
:
return
function
(
n
t
)
{
return
i
.
call
(
o
n
t
)
}
;
case
3
:
return
function
(
n
t
e
)
{
return
i
.
call
(
o
n
t
e
)
}
;
case
4
:
return
function
(
n
t
e
r
)
{
return
i
.
call
(
o
n
t
e
r
)
}
}
return
function
(
)
{
return
i
.
apply
(
o
arguments
)
}
}
g
=
function
(
n
t
e
)
{
return
null
=
=
n
?
d
.
identity
:
d
.
isFunction
(
n
)
?
v
(
n
t
e
)
:
d
.
isObject
(
n
)
?
d
.
matcher
(
n
)
:
d
.
property
(
n
)
}
;
d
.
iteratee
=
function
(
n
t
)
{
return
g
(
n
t
1
/
0
)
}
;
var
m
=
function
(
c
u
)
{
return
function
(
n
)
{
var
t
=
arguments
.
length
;
if
(
t
<
2
|
|
null
=
=
n
)
return
n
;
for
(
var
e
=
1
;
e
<
t
;
e
+
+
)
for
(
var
r
=
arguments
[
e
]
i
=
c
(
r
)
o
=
i
.
length
s
=
0
;
s
<
o
;
s
+
+
)
{
var
a
=
i
[
s
]
;
u
&
&
void
0
!
=
=
n
[
a
]
|
|
(
n
[
a
]
=
r
[
a
]
)
}
return
n
}
}
y
=
function
(
n
)
{
if
(
!
d
.
isObject
(
n
)
)
return
{
}
;
if
(
h
)
return
h
(
n
)
;
p
.
prototype
=
n
;
var
t
=
new
p
;
return
p
.
prototype
=
null
t
}
b
=
function
(
t
)
{
return
function
(
n
)
{
return
null
=
=
n
?
void
0
:
n
[
t
]
}
}
_
=
Math
.
pow
(
2
53
)
-
1
w
=
b
(
"
length
"
)
E
=
function
(
n
)
{
var
t
=
w
(
n
)
;
return
"
number
"
=
=
typeof
t
&
&
0
<
=
t
&
&
t
<
=
_
}
;
function
O
(
a
)
{
return
function
(
n
t
e
r
)
{
t
=
v
(
t
r
4
)
;
var
i
=
!
E
(
n
)
&
&
d
.
keys
(
n
)
o
=
(
i
|
|
n
)
.
length
s
=
0
<
a
?
0
:
o
-
1
;
return
arguments
.
length
<
3
&
&
(
e
=
n
[
i
?
i
[
s
]
:
s
]
s
+
=
a
)
function
(
n
t
e
r
i
o
)
{
for
(
;
0
<
=
i
&
&
i
<
o
;
i
+
=
a
)
{
var
s
=
r
?
r
[
i
]
:
i
;
e
=
t
(
e
n
[
s
]
s
n
)
}
return
e
}
(
n
t
e
i
s
o
)
}
}
d
.
each
=
d
.
forEach
=
function
(
n
t
e
)
{
var
r
i
;
if
(
t
=
v
(
t
e
)
E
(
n
)
)
for
(
r
=
0
i
=
n
.
length
;
r
<
i
;
r
+
+
)
t
(
n
[
r
]
r
n
)
;
else
{
var
o
=
d
.
keys
(
n
)
;
for
(
r
=
0
i
=
o
.
length
;
r
<
i
;
r
+
+
)
t
(
n
[
o
[
r
]
]
o
[
r
]
n
)
}
return
n
}
d
.
map
=
d
.
collect
=
function
(
n
t
e
)
{
t
=
g
(
t
e
)
;
for
(
var
r
=
!
E
(
n
)
&
&
d
.
keys
(
n
)
i
=
(
r
|
|
n
)
.
length
o
=
Array
(
i
)
s
=
0
;
s
<
i
;
s
+
+
)
{
var
a
=
r
?
r
[
s
]
:
s
;
o
[
s
]
=
t
(
n
[
a
]
a
n
)
}
return
o
}
d
.
reduce
=
d
.
foldl
=
d
.
inject
=
O
(
1
)
d
.
reduceRight
=
d
.
foldr
=
O
(
-
1
)
d
.
find
=
d
.
detect
=
function
(
n
t
e
)
{
var
r
;
if
(
void
0
!
=
=
(
r
=
E
(
n
)
?
d
.
findIndex
(
n
t
e
)
:
d
.
findKey
(
n
t
e
)
)
&
&
-
1
!
=
=
r
)
return
n
[
r
]
}
d
.
filter
=
d
.
select
=
function
(
n
r
t
)
{
var
i
=
[
]
;
return
r
=
g
(
r
t
)
d
.
each
(
n
function
(
n
t
e
)
{
r
(
n
t
e
)
&
&
i
.
push
(
n
)
}
)
i
}
d
.
reject
=
function
(
n
t
e
)
{
return
d
.
filter
(
n
d
.
negate
(
g
(
t
)
)
e
)
}
d
.
every
=
d
.
all
=
function
(
n
t
e
)
{
t
=
g
(
t
e
)
;
for
(
var
r
=
!
E
(
n
)
&
&
d
.
keys
(
n
)
i
=
(
r
|
|
n
)
.
length
o
=
0
;
o
<
i
;
o
+
+
)
{
var
s
=
r
?
r
[
o
]
:
o
;
if
(
!
t
(
n
[
s
]
s
n
)
)
return
!
1
}
return
!
0
}
d
.
some
=
d
.
any
=
function
(
n
t
e
)
{
t
=
g
(
t
e
)
;
for
(
var
r
=
!
E
(
n
)
&
&
d
.
keys
(
n
)
i
=
(
r
|
|
n
)
.
length
o
=
0
;
o
<
i
;
o
+
+
)
{
var
s
=
r
?
r
[
o
]
:
o
;
if
(
t
(
n
[
s
]
s
n
)
)
return
!
0
}
return
!
1
}
d
.
contains
=
d
.
includes
=
d
.
include
=
function
(
n
t
e
r
)
{
return
E
(
n
)
|
|
(
n
=
d
.
values
(
n
)
)
(
"
number
"
!
=
typeof
e
|
|
r
)
&
&
(
e
=
0
)
0
<
=
d
.
indexOf
(
n
t
e
)
}
d
.
invoke
=
function
(
n
e
)
{
var
r
=
c
.
call
(
arguments
2
)
i
=
d
.
isFunction
(
e
)
;
return
d
.
map
(
n
function
(
n
)
{
var
t
=
i
?
e
:
n
[
e
]
;
return
null
=
=
t
?
t
:
t
.
apply
(
n
r
)
}
)
}
d
.
pluck
=
function
(
n
t
)
{
return
d
.
map
(
n
d
.
property
(
t
)
)
}
d
.
where
=
function
(
n
t
)
{
return
d
.
filter
(
n
d
.
matcher
(
t
)
)
}
d
.
findWhere
=
function
(
n
t
)
{
return
d
.
find
(
n
d
.
matcher
(
t
)
)
}
d
.
max
=
function
(
n
r
t
)
{
var
e
i
o
=
-
1
/
0
s
=
-
1
/
0
;
if
(
null
=
=
r
&
&
null
!
=
n
)
for
(
var
a
=
0
c
=
(
n
=
E
(
n
)
?
n
:
d
.
values
(
n
)
)
.
length
;
a
<
c
;
a
+
+
)
e
=
n
[
a
]
o
<
e
&
&
(
o
=
e
)
;
else
r
=
g
(
r
t
)
d
.
each
(
n
function
(
n
t
e
)
{
i
=
r
(
n
t
e
)
(
s
<
i
|
|
i
=
=
=
-
1
/
0
&
&
o
=
=
=
-
1
/
0
)
&
&
(
o
=
n
s
=
i
)
}
)
;
return
o
}
d
.
min
=
function
(
n
r
t
)
{
var
e
i
o
=
1
/
0
s
=
1
/
0
;
if
(
null
=
=
r
&
&
null
!
=
n
)
for
(
var
a
=
0
c
=
(
n
=
E
(
n
)
?
n
:
d
.
values
(
n
)
)
.
length
;
a
<
c
;
a
+
+
)
(
e
=
n
[
a
]
)
<
o
&
&
(
o
=
e
)
;
else
r
=
g
(
r
t
)
d
.
each
(
n
function
(
n
t
e
)
{
(
(
i
=
r
(
n
t
e
)
)
<
s
|
|
i
=
=
=
1
/
0
&
&
o
=
=
=
1
/
0
)
&
&
(
o
=
n
s
=
i
)
}
)
;
return
o
}
d
.
shuffle
=
function
(
n
)
{
for
(
var
t
e
=
E
(
n
)
?
n
:
d
.
values
(
n
)
r
=
e
.
length
i
=
Array
(
r
)
o
=
0
;
o
<
r
;
o
+
+
)
(
t
=
d
.
random
(
0
o
)
)
!
=
=
o
&
&
(
i
[
o
]
=
i
[
t
]
)
i
[
t
]
=
e
[
o
]
;
return
i
}
d
.
sample
=
function
(
n
t
e
)
{
return
null
=
=
t
|
|
e
?
(
E
(
n
)
|
|
(
n
=
d
.
values
(
n
)
)
n
[
d
.
random
(
n
.
length
-
1
)
]
)
:
d
.
shuffle
(
n
)
.
slice
(
0
Math
.
max
(
0
t
)
)
}
d
.
sortBy
=
function
(
n
r
t
)
{
return
r
=
g
(
r
t
)
d
.
pluck
(
d
.
map
(
n
function
(
n
t
e
)
{
return
{
value
:
n
index
:
t
criteria
:
r
(
n
t
e
)
}
}
)
.
sort
(
function
(
n
t
)
{
var
e
=
n
.
criteria
r
=
t
.
criteria
;
if
(
e
!
=
=
r
)
{
if
(
r
<
e
|
|
void
0
=
=
=
e
)
return
1
;
if
(
e
<
r
|
|
void
0
=
=
=
r
)
return
-
1
}
return
n
.
index
-
t
.
index
}
)
"
value
"
)
}
;
var
A
=
function
(
s
)
{
return
function
(
r
i
n
)
{
var
o
=
{
}
;
return
i
=
g
(
i
n
)
d
.
each
(
r
function
(
n
t
)
{
var
e
=
i
(
n
t
r
)
;
s
(
o
n
e
)
}
)
o
}
}
;
d
.
groupBy
=
A
(
function
(
n
t
e
)
{
d
.
has
(
n
e
)
?
n
[
e
]
.
push
(
t
)
:
n
[
e
]
=
[
t
]
}
)
d
.
indexBy
=
A
(
function
(
n
t
e
)
{
n
[
e
]
=
t
}
)
d
.
countBy
=
A
(
function
(
n
t
e
)
{
d
.
has
(
n
e
)
?
n
[
e
]
+
+
:
n
[
e
]
=
1
}
)
d
.
toArray
=
function
(
n
)
{
return
n
?
d
.
isArray
(
n
)
?
c
.
call
(
n
)
:
E
(
n
)
?
d
.
map
(
n
d
.
identity
)
:
d
.
values
(
n
)
:
[
]
}
d
.
size
=
function
(
n
)
{
return
null
=
=
n
?
0
:
E
(
n
)
?
n
.
length
:
d
.
keys
(
n
)
.
length
}
d
.
partition
=
function
(
n
r
t
)
{
r
=
g
(
r
t
)
;
var
i
=
[
]
o
=
[
]
;
return
d
.
each
(
n
function
(
n
t
e
)
{
(
r
(
n
t
e
)
?
i
:
o
)
.
push
(
n
)
}
)
[
i
o
]
}
d
.
first
=
d
.
head
=
d
.
take
=
function
(
n
t
e
)
{
if
(
null
!
=
n
)
return
null
=
=
t
|
|
e
?
n
[
0
]
:
d
.
initial
(
n
n
.
length
-
t
)
}
d
.
initial
=
function
(
n
t
e
)
{
return
c
.
call
(
n
0
Math
.
max
(
0
n
.
length
-
(
null
=
=
t
|
|
e
?
1
:
t
)
)
)
}
d
.
last
=
function
(
n
t
e
)
{
if
(
null
!
=
n
)
return
null
=
=
t
|
|
e
?
n
[
n
.
length
-
1
]
:
d
.
rest
(
n
Math
.
max
(
0
n
.
length
-
t
)
)
}
d
.
rest
=
d
.
tail
=
d
.
drop
=
function
(
n
t
e
)
{
return
c
.
call
(
n
null
=
=
t
|
|
e
?
1
:
t
)
}
d
.
compact
=
function
(
n
)
{
return
d
.
filter
(
n
d
.
identity
)
}
;
var
x
=
function
(
n
t
e
r
)
{
for
(
var
i
=
[
]
o
=
0
s
=
r
|
|
0
a
=
w
(
n
)
;
s
<
a
;
s
+
+
)
{
var
c
=
n
[
s
]
;
if
(
E
(
c
)
&
&
(
d
.
isArray
(
c
)
|
|
d
.
isArguments
(
c
)
)
)
{
t
|
|
(
c
=
x
(
c
t
e
)
)
;
var
u
=
0
l
=
c
.
length
;
for
(
i
.
length
+
=
l
;
u
<
l
;
)
i
[
o
+
+
]
=
c
[
u
+
+
]
}
else
e
|
|
(
i
[
o
+
+
]
=
c
)
}
return
i
}
;
function
j
(
o
)
{
return
function
(
n
t
e
)
{
t
=
g
(
t
e
)
;
for
(
var
r
=
w
(
n
)
i
=
0
<
o
?
0
:
r
-
1
;
0
<
=
i
&
&
i
<
r
;
i
+
=
o
)
if
(
t
(
n
[
i
]
i
n
)
)
return
i
;
return
-
1
}
}
function
k
(
o
s
a
)
{
return
function
(
n
t
e
)
{
var
r
=
0
i
=
w
(
n
)
;
if
(
"
number
"
=
=
typeof
e
)
0
<
o
?
r
=
0
<
=
e
?
e
:
Math
.
max
(
e
+
i
r
)
:
i
=
0
<
=
e
?
Math
.
min
(
e
+
1
i
)
:
e
+
i
+
1
;
else
if
(
a
&
&
e
&
&
i
)
return
n
[
e
=
a
(
n
t
)
]
=
=
=
t
?
e
:
-
1
;
if
(
t
!
=
t
)
return
0
<
=
(
e
=
s
(
c
.
call
(
n
r
i
)
d
.
isNaN
)
)
?
e
+
r
:
-
1
;
for
(
e
=
0
<
o
?
r
:
i
-
1
;
0
<
=
e
&
&
e
<
i
;
e
+
=
o
)
if
(
n
[
e
]
=
=
=
t
)
return
e
;
return
-
1
}
}
d
.
flatten
=
function
(
n
t
)
{
return
x
(
n
t
!
1
)
}
d
.
without
=
function
(
n
)
{
return
d
.
difference
(
n
c
.
call
(
arguments
1
)
)
}
d
.
uniq
=
d
.
unique
=
function
(
n
t
e
r
)
{
d
.
isBoolean
(
t
)
|
|
(
r
=
e
e
=
t
t
=
!
1
)
null
!
=
e
&
&
(
e
=
g
(
e
r
)
)
;
for
(
var
i
=
[
]
o
=
[
]
s
=
0
a
=
w
(
n
)
;
s
<
a
;
s
+
+
)
{
var
c
=
n
[
s
]
u
=
e
?
e
(
c
s
n
)
:
c
;
t
?
(
s
&
&
o
=
=
=
u
|
|
i
.
push
(
c
)
o
=
u
)
:
e
?
d
.
contains
(
o
u
)
|
|
(
o
.
push
(
u
)
i
.
push
(
c
)
)
:
d
.
contains
(
i
c
)
|
|
i
.
push
(
c
)
}
return
i
}
d
.
union
=
function
(
)
{
return
d
.
uniq
(
x
(
arguments
!
0
!
0
)
)
}
d
.
intersection
=
function
(
n
)
{
for
(
var
t
=
[
]
e
=
arguments
.
length
r
=
0
i
=
w
(
n
)
;
r
<
i
;
r
+
+
)
{
var
o
=
n
[
r
]
;
if
(
!
d
.
contains
(
t
o
)
)
{
for
(
var
s
=
1
;
s
<
e
&
&
d
.
contains
(
arguments
[
s
]
o
)
;
s
+
+
)
;
s
=
=
=
e
&
&
t
.
push
(
o
)
}
}
return
t
}
d
.
difference
=
function
(
n
)
{
var
t
=
x
(
arguments
!
0
!
0
1
)
;
return
d
.
filter
(
n
function
(
n
)
{
return
!
d
.
contains
(
t
n
)
}
)
}
d
.
zip
=
function
(
)
{
return
d
.
unzip
(
arguments
)
}
d
.
unzip
=
function
(
n
)
{
for
(
var
t
=
n
&
&
d
.
max
(
n
w
)
.
length
|
|
0
e
=
Array
(
t
)
r
=
0
;
r
<
t
;
r
+
+
)
e
[
r
]
=
d
.
pluck
(
n
r
)
;
return
e
}
d
.
object
=
function
(
n
t
)
{
for
(
var
e
=
{
}
r
=
0
i
=
w
(
n
)
;
r
<
i
;
r
+
+
)
t
?
e
[
n
[
r
]
]
=
t
[
r
]
:
e
[
n
[
r
]
[
0
]
]
=
n
[
r
]
[
1
]
;
return
e
}
d
.
findIndex
=
j
(
1
)
d
.
findLastIndex
=
j
(
-
1
)
d
.
sortedIndex
=
function
(
n
t
e
r
)
{
for
(
var
i
=
(
e
=
g
(
e
r
1
)
)
(
t
)
o
=
0
s
=
w
(
n
)
;
o
<
s
;
)
{
var
a
=
Math
.
floor
(
(
o
+
s
)
/
2
)
;
e
(
n
[
a
]
)
<
i
?
o
=
a
+
1
:
s
=
a
}
return
o
}
d
.
indexOf
=
k
(
1
d
.
findIndex
d
.
sortedIndex
)
d
.
lastIndexOf
=
k
(
-
1
d
.
findLastIndex
)
d
.
range
=
function
(
n
t
e
)
{
null
=
=
t
&
&
(
t
=
n
|
|
0
n
=
0
)
e
=
e
|
|
1
;
for
(
var
r
=
Math
.
max
(
Math
.
ceil
(
(
t
-
n
)
/
e
)
0
)
i
=
Array
(
r
)
o
=
0
;
o
<
r
;
o
+
+
n
+
=
e
)
i
[
o
]
=
n
;
return
i
}
;
var
S
=
function
(
n
t
e
r
i
)
{
if
(
!
(
r
instanceof
t
)
)
return
n
.
apply
(
e
i
)
;
var
o
=
y
(
n
.
prototype
)
s
=
n
.
apply
(
o
i
)
;
return
d
.
isObject
(
s
)
?
s
:
o
}
;
d
.
bind
=
function
(
n
t
)
{
if
(
l
&
&
n
.
bind
=
=
=
l
)
return
l
.
apply
(
n
c
.
call
(
arguments
1
)
)
;
if
(
!
d
.
isFunction
(
n
)
)
throw
new
TypeError
(
"
Bind
must
be
called
on
a
function
"
)
;
var
e
=
c
.
call
(
arguments
2
)
r
=
function
(
)
{
return
S
(
n
r
t
this
e
.
concat
(
c
.
call
(
arguments
)
)
)
}
;
return
r
}
d
.
partial
=
function
(
i
)
{
var
o
=
c
.
call
(
arguments
1
)
s
=
function
(
)
{
for
(
var
n
=
0
t
=
o
.
length
e
=
Array
(
t
)
r
=
0
;
r
<
t
;
r
+
+
)
e
[
r
]
=
o
[
r
]
=
=
=
d
?
arguments
[
n
+
+
]
:
o
[
r
]
;
for
(
;
n
<
arguments
.
length
;
)
e
.
push
(
arguments
[
n
+
+
]
)
;
return
S
(
i
s
this
this
e
)
}
;
return
s
}
d
.
bindAll
=
function
(
n
)
{
var
t
e
r
=
arguments
.
length
;
if
(
r
<
=
1
)
throw
new
Error
(
"
bindAll
must
be
passed
function
names
"
)
;
for
(
t
=
1
;
t
<
r
;
t
+
+
)
n
[
e
=
arguments
[
t
]
]
=
d
.
bind
(
n
[
e
]
n
)
;
return
n
}
d
.
memoize
=
function
(
r
i
)
{
var
o
=
function
(
n
)
{
var
t
=
o
.
cache
e
=
"
"
+
(
i
?
i
.
apply
(
this
arguments
)
:
n
)
;
return
d
.
has
(
t
e
)
|
|
(
t
[
e
]
=
r
.
apply
(
this
arguments
)
)
t
[
e
]
}
;
return
o
.
cache
=
{
}
o
}
d
.
delay
=
function
(
n
t
)
{
var
e
=
c
.
call
(
arguments
2
)
;
return
setTimeout
(
function
(
)
{
return
n
.
apply
(
null
e
)
}
t
)
}
d
.
defer
=
d
.
partial
(
d
.
delay
d
1
)
d
.
throttle
=
function
(
e
r
i
)
{
var
o
s
a
c
=
null
u
=
0
;
i
|
|
(
i
=
{
}
)
;
var
l
=
function
(
)
{
u
=
!
1
=
=
=
i
.
leading
?
0
:
d
.
now
(
)
c
=
null
a
=
e
.
apply
(
o
s
)
c
|
|
(
o
=
s
=
null
)
}
;
return
function
(
)
{
var
n
=
d
.
now
(
)
;
u
|
|
!
1
!
=
=
i
.
leading
|
|
(
u
=
n
)
;
var
t
=
r
-
(
n
-
u
)
;
return
o
=
this
s
=
arguments
t
<
=
0
|
|
r
<
t
?
(
c
&
&
(
clearTimeout
(
c
)
c
=
null
)
u
=
n
a
=
e
.
apply
(
o
s
)
c
|
|
(
o
=
s
=
null
)
)
:
c
|
|
!
1
=
=
=
i
.
trailing
|
|
(
c
=
setTimeout
(
l
t
)
)
a
}
}
d
.
debounce
=
function
(
t
e
r
)
{
var
i
o
s
a
c
u
=
function
(
)
{
var
n
=
d
.
now
(
)
-
a
;
n
<
e
&
&
0
<
=
n
?
i
=
setTimeout
(
u
e
-
n
)
:
(
i
=
null
r
|
|
(
c
=
t
.
apply
(
s
o
)
i
|
|
(
s
=
o
=
null
)
)
)
}
;
return
function
(
)
{
s
=
this
o
=
arguments
a
=
d
.
now
(
)
;
var
n
=
r
&
&
!
i
;
return
i
|
|
(
i
=
setTimeout
(
u
e
)
)
n
&
&
(
c
=
t
.
apply
(
s
o
)
s
=
o
=
null
)
c
}
}
d
.
wrap
=
function
(
n
t
)
{
return
d
.
partial
(
t
n
)
}
d
.
negate
=
function
(
n
)
{
return
function
(
)
{
return
!
n
.
apply
(
this
arguments
)
}
}
d
.
compose
=
function
(
)
{
var
e
=
arguments
r
=
e
.
length
-
1
;
return
function
(
)
{
for
(
var
n
=
r
t
=
e
[
r
]
.
apply
(
this
arguments
)
;
n
-
-
;
)
t
=
e
[
n
]
.
call
(
this
t
)
;
return
t
}
}
d
.
after
=
function
(
n
t
)
{
return
function
(
)
{
if
(
-
-
n
<
1
)
return
t
.
apply
(
this
arguments
)
}
}
d
.
before
=
function
(
n
t
)
{
var
e
;
return
function
(
)
{
return
0
<
-
-
n
&
&
(
e
=
t
.
apply
(
this
arguments
)
)
n
<
=
1
&
&
(
t
=
null
)
e
}
}
d
.
once
=
d
.
partial
(
d
.
before
2
)
;
var
R
=
!
{
toString
:
null
}
.
propertyIsEnumerable
(
"
toString
"
)
L
=
[
"
valueOf
"
"
isPrototypeOf
"
"
toString
"
"
propertyIsEnumerable
"
"
hasOwnProperty
"
"
toLocaleString
"
]
;
function
T
(
n
t
)
{
var
e
=
L
.
length
r
=
n
.
constructor
i
=
d
.
isFunction
(
r
)
&
&
r
.
prototype
|
|
s
o
=
"
constructor
"
;
for
(
d
.
has
(
n
o
)
&
&
!
d
.
contains
(
t
o
)
&
&
t
.
push
(
o
)
;
e
-
-
;
)
(
o
=
L
[
e
]
)
in
n
&
&
n
[
o
]
!
=
=
i
[
o
]
&
&
!
d
.
contains
(
t
o
)
&
&
t
.
push
(
o
)
}
d
.
keys
=
function
(
n
)
{
if
(
!
d
.
isObject
(
n
)
)
return
[
]
;
if
(
u
)
return
u
(
n
)
;
var
t
=
[
]
;
for
(
var
e
in
n
)
d
.
has
(
n
e
)
&
&
t
.
push
(
e
)
;
return
R
&
&
T
(
n
t
)
t
}
d
.
allKeys
=
function
(
n
)
{
if
(
!
d
.
isObject
(
n
)
)
return
[
]
;
var
t
=
[
]
;
for
(
var
e
in
n
)
t
.
push
(
e
)
;
return
R
&
&
T
(
n
t
)
t
}
d
.
values
=
function
(
n
)
{
for
(
var
t
=
d
.
keys
(
n
)
e
=
t
.
length
r
=
Array
(
e
)
i
=
0
;
i
<
e
;
i
+
+
)
r
[
i
]
=
n
[
t
[
i
]
]
;
return
r
}
d
.
mapObject
=
function
(
n
t
e
)
{
t
=
g
(
t
e
)
;
for
(
var
r
i
=
d
.
keys
(
n
)
o
=
i
.
length
s
=
{
}
a
=
0
;
a
<
o
;
a
+
+
)
s
[
r
=
i
[
a
]
]
=
t
(
n
[
r
]
r
n
)
;
return
s
}
d
.
pairs
=
function
(
n
)
{
for
(
var
t
=
d
.
keys
(
n
)
e
=
t
.
length
r
=
Array
(
e
)
i
=
0
;
i
<
e
;
i
+
+
)
r
[
i
]
=
[
t
[
i
]
n
[
t
[
i
]
]
]
;
return
r
}
d
.
invert
=
function
(
n
)
{
for
(
var
t
=
{
}
e
=
d
.
keys
(
n
)
r
=
0
i
=
e
.
length
;
r
<
i
;
r
+
+
)
t
[
n
[
e
[
r
]
]
]
=
e
[
r
]
;
return
t
}
d
.
functions
=
d
.
methods
=
function
(
n
)
{
var
t
=
[
]
;
for
(
var
e
in
n
)
d
.
isFunction
(
n
[
e
]
)
&
&
t
.
push
(
e
)
;
return
t
.
sort
(
)
}
d
.
extend
=
m
(
d
.
allKeys
)
d
.
extendOwn
=
d
.
assign
=
m
(
d
.
keys
)
d
.
findKey
=
function
(
n
t
e
)
{
t
=
g
(
t
e
)
;
for
(
var
r
i
=
d
.
keys
(
n
)
o
=
0
s
=
i
.
length
;
o
<
s
;
o
+
+
)
if
(
t
(
n
[
r
=
i
[
o
]
]
r
n
)
)
return
r
}
d
.
pick
=
function
(
n
t
e
)
{
var
r
i
o
=
{
}
s
=
n
;
if
(
null
=
=
s
)
return
o
;
d
.
isFunction
(
t
)
?
(
i
=
d
.
allKeys
(
s
)
r
=
v
(
t
e
)
)
:
(
i
=
x
(
arguments
!
1
!
1
1
)
r
=
function
(
n
t
e
)
{
return
t
in
e
}
s
=
Object
(
s
)
)
;
for
(
var
a
=
0
c
=
i
.
length
;
a
<
c
;
a
+
+
)
{
var
u
=
i
[
a
]
l
=
s
[
u
]
;
r
(
l
u
s
)
&
&
(
o
[
u
]
=
l
)
}
return
o
}
d
.
omit
=
function
(
n
t
e
)
{
if
(
d
.
isFunction
(
t
)
)
t
=
d
.
negate
(
t
)
;
else
{
var
r
=
d
.
map
(
x
(
arguments
!
1
!
1
1
)
String
)
;
t
=
function
(
n
t
)
{
return
!
d
.
contains
(
r
t
)
}
}
return
d
.
pick
(
n
t
e
)
}
d
.
defaults
=
m
(
d
.
allKeys
!
0
)
d
.
create
=
function
(
n
t
)
{
var
e
=
y
(
n
)
;
return
t
&
&
d
.
extendOwn
(
e
t
)
e
}
d
.
clone
=
function
(
n
)
{
return
d
.
isObject
(
n
)
?
d
.
isArray
(
n
)
?
n
.
slice
(
)
:
d
.
extend
(
{
}
n
)
:
n
}
d
.
tap
=
function
(
n
t
)
{
return
t
(
n
)
n
}
d
.
isMatch
=
function
(
n
t
)
{
var
e
=
d
.
keys
(
t
)
r
=
e
.
length
;
if
(
null
=
=
n
)
return
!
r
;
for
(
var
i
=
Object
(
n
)
o
=
0
;
o
<
r
;
o
+
+
)
{
var
s
=
e
[
o
]
;
if
(
t
[
s
]
!
=
=
i
[
s
]
|
|
!
(
s
in
i
)
)
return
!
1
}
return
!
0
}
;
var
I
=
function
(
n
t
e
r
)
{
if
(
n
=
=
=
t
)
return
0
!
=
=
n
|
|
1
/
n
=
=
1
/
t
;
if
(
null
=
=
n
|
|
null
=
=
t
)
return
n
=
=
=
t
;
n
instanceof
d
&
&
(
n
=
n
.
_wrapped
)
t
instanceof
d
&
&
(
t
=
t
.
_wrapped
)
;
var
i
=
f
.
call
(
n
)
;
if
(
i
!
=
=
f
.
call
(
t
)
)
return
!
1
;
switch
(
i
)
{
case
"
[
object
RegExp
]
"
:
case
"
[
object
String
]
"
:
return
"
"
+
n
=
=
"
"
+
t
;
case
"
[
object
Number
]
"
:
return
+
n
!
=
+
n
?
+
t
!
=
+
t
:
0
=
=
+
n
?
1
/
+
n
=
=
1
/
t
:
+
n
=
=
+
t
;
case
"
[
object
Date
]
"
:
case
"
[
object
Boolean
]
"
:
return
+
n
=
=
+
t
}
var
o
=
"
[
object
Array
]
"
=
=
=
i
;
if
(
!
o
)
{
if
(
"
object
"
!
=
typeof
n
|
|
"
object
"
!
=
typeof
t
)
return
!
1
;
var
s
=
n
.
constructor
a
=
t
.
constructor
;
if
(
s
!
=
=
a
&
&
!
(
d
.
isFunction
(
s
)
&
&
s
instanceof
s
&
&
d
.
isFunction
(
a
)
&
&
a
instanceof
a
)
&
&
"
constructor
"
in
n
&
&
"
constructor
"
in
t
)
return
!
1
}
r
=
r
|
|
[
]
;
for
(
var
c
=
(
e
=
e
|
|
[
]
)
.
length
;
c
-
-
;
)
if
(
e
[
c
]
=
=
=
n
)
return
r
[
c
]
=
=
=
t
;
if
(
e
.
push
(
n
)
r
.
push
(
t
)
o
)
{
if
(
(
c
=
n
.
length
)
!
=
=
t
.
length
)
return
!
1
;
for
(
;
c
-
-
;
)
if
(
!
I
(
n
[
c
]
t
[
c
]
e
r
)
)
return
!
1
}
else
{
var
u
l
=
d
.
keys
(
n
)
;
if
(
c
=
l
.
length
d
.
keys
(
t
)
.
length
!
=
=
c
)
return
!
1
;
for
(
;
c
-
-
;
)
if
(
u
=
l
[
c
]
!
d
.
has
(
t
u
)
|
|
!
I
(
n
[
u
]
t
[
u
]
e
r
)
)
return
!
1
}
return
e
.
pop
(
)
r
.
pop
(
)
!
0
}
;
d
.
isEqual
=
function
(
n
t
)
{
return
I
(
n
t
)
}
d
.
isEmpty
=
function
(
n
)
{
return
null
=
=
n
|
|
(
E
(
n
)
&
&
(
d
.
isArray
(
n
)
|
|
d
.
isString
(
n
)
|
|
d
.
isArguments
(
n
)
)
?
0
=
=
=
n
.
length
:
0
=
=
=
d
.
keys
(
n
)
.
length
)
}
d
.
isElement
=
function
(
n
)
{
return
!
(
!
n
|
|
1
!
=
=
n
.
nodeType
)
}
d
.
isArray
=
a
|
|
function
(
n
)
{
return
"
[
object
Array
]
"
=
=
=
f
.
call
(
n
)
}
d
.
isObject
=
function
(
n
)
{
var
t
=
typeof
n
;
return
"
function
"
=
=
=
t
|
|
"
object
"
=
=
=
t
&
&
!
!
n
}
d
.
each
(
[
"
Arguments
"
"
Function
"
"
String
"
"
Number
"
"
Date
"
"
RegExp
"
"
Error
"
]
function
(
t
)
{
d
[
"
is
"
+
t
]
=
function
(
n
)
{
return
f
.
call
(
n
)
=
=
=
"
[
object
"
+
t
+
"
]
"
}
}
)
d
.
isArguments
(
arguments
)
|
|
(
d
.
isArguments
=
function
(
n
)
{
return
d
.
has
(
n
"
callee
"
)
}
)
"
function
"
!
=
typeof
/
.
/
&
&
"
object
"
!
=
typeof
Int8Array
&
&
(
d
.
isFunction
=
function
(
n
)
{
return
"
function
"
=
=
typeof
n
|
|
!
1
}
)
d
.
isFinite
=
function
(
n
)
{
return
isFinite
(
n
)
&
&
!
isNaN
(
parseFloat
(
n
)
)
}
d
.
isNaN
=
function
(
n
)
{
return
d
.
isNumber
(
n
)
&
&
n
!
=
=
+
n
}
d
.
isBoolean
=
function
(
n
)
{
return
!
0
=
=
=
n
|
|
!
1
=
=
=
n
|
|
"
[
object
Boolean
]
"
=
=
=
f
.
call
(
n
)
}
d
.
isNull
=
function
(
n
)
{
return
null
=
=
=
n
}
d
.
isUndefined
=
function
(
n
)
{
return
void
0
=
=
=
n
}
d
.
has
=
function
(
n
t
)
{
return
null
!
=
n
&
&
o
.
call
(
n
t
)
}
d
.
noConflict
=
function
(
)
{
return
n
.
_
=
t
this
}
d
.
identity
=
function
(
n
)
{
return
n
}
d
.
constant
=
function
(
n
)
{
return
function
(
)
{
return
n
}
}
d
.
noop
=
function
(
)
{
}
d
.
property
=
b
d
.
propertyOf
=
function
(
t
)
{
return
null
=
=
t
?
function
(
)
{
}
:
function
(
n
)
{
return
t
[
n
]
}
}
d
.
matcher
=
d
.
matches
=
function
(
t
)
{
return
t
=
d
.
extendOwn
(
{
}
t
)
function
(
n
)
{
return
d
.
isMatch
(
n
t
)
}
}
d
.
times
=
function
(
n
t
e
)
{
var
r
=
Array
(
Math
.
max
(
0
n
)
)
;
t
=
v
(
t
e
1
)
;
for
(
var
i
=
0
;
i
<
n
;
i
+
+
)
r
[
i
]
=
t
(
i
)
;
return
r
}
d
.
random
=
function
(
n
t
)
{
return
null
=
=
t
&
&
(
t
=
n
n
=
0
)
n
+
Math
.
floor
(
Math
.
random
(
)
*
(
t
-
n
+
1
)
)
}
d
.
now
=
Date
.
now
|
|
function
(
)
{
return
(
new
Date
)
.
getTime
(
)
}
;
var
N
=
{
"
&
"
:
"
&
amp
;
"
"
<
"
:
"
&
lt
;
"
"
>
"
:
"
&
gt
;
"
'
"
'
:
"
&
quot
;
"
"
'
"
:
"
&
#
x27
;
"
"
"
:
"
&
#
x60
;
"
}
D
=
d
.
invert
(
N
)
F
=
function
(
t
)
{
var
e
=
function
(
n
)
{
return
t
[
n
]
}
n
=
"
(
?
:
"
+
d
.
keys
(
t
)
.
join
(
"
|
"
)
+
"
)
"
r
=
RegExp
(
n
)
i
=
RegExp
(
n
"
g
"
)
;
return
function
(
n
)
{
return
n
=
null
=
=
n
?
"
"
:
"
"
+
n
r
.
test
(
n
)
?
n
.
replace
(
i
e
)
:
n
}
}
;
d
.
escape
=
F
(
N
)
d
.
unescape
=
F
(
D
)
d
.
result
=
function
(
n
t
e
)
{
var
r
=
null
=
=
n
?
void
0
:
n
[
t
]
;
return
void
0
=
=
=
r
&
&
(
r
=
e
)
d
.
isFunction
(
r
)
?
r
.
call
(
n
)
:
r
}
;
var
M
=
0
;
d
.
uniqueId
=
function
(
n
)
{
var
t
=
+
+
M
+
"
"
;
return
n
?
n
+
t
:
t
}
d
.
templateSettings
=
{
evaluate
:
/
<
%
(
[
\
s
\
S
]
+
?
)
%
>
/
g
interpolate
:
/
<
%
=
(
[
\
s
\
S
]
+
?
)
%
>
/
g
escape
:
/
<
%
-
(
[
\
s
\
S
]
+
?
)
%
>
/
g
}
;
var
C
=
/
(
.
)
^
/
P
=
{
"
'
"
:
"
'
"
"
\
\
"
:
"
\
\
"
"
\
r
"
:
"
r
"
"
\
n
"
:
"
n
"
"
\
u2028
"
:
"
u2028
"
"
\
u2029
"
:
"
u2029
"
}
z
=
/
\
\
|
'
|
\
r
|
\
n
|
\
u2028
|
\
u2029
/
g
B
=
function
(
n
)
{
return
"
\
\
"
+
P
[
n
]
}
;
d
.
template
=
function
(
o
n
t
)
{
!
n
&
&
t
&
&
(
n
=
t
)
n
=
d
.
defaults
(
{
}
n
d
.
templateSettings
)
;
var
e
=
RegExp
(
[
(
n
.
escape
|
|
C
)
.
source
(
n
.
interpolate
|
|
C
)
.
source
(
n
.
evaluate
|
|
C
)
.
source
]
.
join
(
"
|
"
)
+
"
|
"
"
g
"
)
s
=
0
a
=
"
__p
+
=
'
"
;
o
.
replace
(
e
function
(
n
t
e
r
i
)
{
return
a
+
=
o
.
slice
(
s
i
)
.
replace
(
z
B
)
s
=
i
+
n
.
length
t
?
a
+
=
"
'
+
\
n
(
(
__t
=
(
"
+
t
+
"
)
)
=
=
null
?
'
'
:
_
.
escape
(
__t
)
)
+
\
n
'
"
:
e
?
a
+
=
"
'
+
\
n
(
(
__t
=
(
"
+
e
+
"
)
)
=
=
null
?
'
'
:
__t
)
+
\
n
'
"
:
r
&
&
(
a
+
=
"
'
;
\
n
"
+
r
+
"
\
n__p
+
=
'
"
)
n
}
)
a
+
=
"
'
;
\
n
"
n
.
variable
|
|
(
a
=
"
with
(
obj
|
|
{
}
)
{
\
n
"
+
a
+
"
}
\
n
"
)
a
=
"
var
__t
__p
=
'
'
__j
=
Array
.
prototype
.
join
print
=
function
(
)
{
__p
+
=
__j
.
call
(
arguments
'
'
)
;
}
;
\
n
"
+
a
+
"
return
__p
;
\
n
"
;
try
{
var
r
=
new
Function
(
n
.
variable
|
|
"
obj
"
"
_
"
a
)
}
catch
(
n
)
{
throw
n
.
source
=
a
n
}
var
i
=
function
(
n
)
{
return
r
.
call
(
this
n
d
)
}
c
=
n
.
variable
|
|
"
obj
"
;
return
i
.
source
=
"
function
(
"
+
c
+
"
)
{
\
n
"
+
a
+
"
}
"
i
}
d
.
chain
=
function
(
n
)
{
var
t
=
d
(
n
)
;
return
t
.
_chain
=
!
0
t
}
;
var
U
=
function
(
n
t
)
{
return
n
.
_chain
?
d
(
t
)
.
chain
(
)
:
t
}
;
d
.
mixin
=
function
(
e
)
{
d
.
each
(
d
.
functions
(
e
)
function
(
n
)
{
var
t
=
d
[
n
]
=
e
[
n
]
;
d
.
prototype
[
n
]
=
function
(
)
{
var
n
=
[
this
.
_wrapped
]
;
return
i
.
apply
(
n
arguments
)
U
(
this
t
.
apply
(
d
n
)
)
}
}
)
}
d
.
mixin
(
d
)
d
.
each
(
[
"
pop
"
"
push
"
"
reverse
"
"
shift
"
"
sort
"
"
splice
"
"
unshift
"
]
function
(
t
)
{
var
e
=
r
[
t
]
;
d
.
prototype
[
t
]
=
function
(
)
{
var
n
=
this
.
_wrapped
;
return
e
.
apply
(
n
arguments
)
"
shift
"
!
=
=
t
&
&
"
splice
"
!
=
=
t
|
|
0
!
=
=
n
.
length
|
|
delete
n
[
0
]
U
(
this
n
)
}
}
)
d
.
each
(
[
"
concat
"
"
join
"
"
slice
"
]
function
(
n
)
{
var
t
=
r
[
n
]
;
d
.
prototype
[
n
]
=
function
(
)
{
return
U
(
this
t
.
apply
(
this
.
_wrapped
arguments
)
)
}
}
)
d
.
prototype
.
value
=
function
(
)
{
return
this
.
_wrapped
}
d
.
prototype
.
valueOf
=
d
.
prototype
.
toJSON
=
d
.
prototype
.
value
d
.
prototype
.
toString
=
function
(
)
{
return
"
"
+
this
.
_wrapped
}
}
)
.
call
(
this
)
}
{
}
]
26
:
[
function
(
n
t
e
)
{
arguments
[
4
]
[
19
]
[
0
]
.
apply
(
e
arguments
)
}
{
dup
:
19
}
]
27
:
[
function
(
n
t
e
)
{
t
.
exports
=
function
(
n
)
{
return
n
&
&
"
object
"
=
=
typeof
n
&
&
"
function
"
=
=
typeof
n
.
copy
&
&
"
function
"
=
=
typeof
n
.
fill
&
&
"
function
"
=
=
typeof
n
.
readUInt8
}
}
{
}
]
28
:
[
function
(
h
n
k
)
{
(
function
(
r
i
)
{
var
a
=
/
%
[
sdj
%
]
/
g
;
k
.
format
=
function
(
n
)
{
if
(
!
_
(
n
)
)
{
for
(
var
t
=
[
]
e
=
0
;
e
<
arguments
.
length
;
e
+
+
)
t
.
push
(
c
(
arguments
[
e
]
)
)
;
return
t
.
join
(
"
"
)
}
e
=
1
;
for
(
var
r
=
arguments
i
=
r
.
length
o
=
String
(
n
)
.
replace
(
a
function
(
n
)
{
if
(
"
%
%
"
=
=
=
n
)
return
"
%
"
;
if
(
i
<
=
e
)
return
n
;
switch
(
n
)
{
case
"
%
s
"
:
return
String
(
r
[
e
+
+
]
)
;
case
"
%
d
"
:
return
Number
(
r
[
e
+
+
]
)
;
case
"
%
j
"
:
try
{
return
JSON
.
stringify
(
r
[
e
+
+
]
)
}
catch
(
n
)
{
return
"
[
Circular
]
"
}
default
:
return
n
}
}
)
s
=
r
[
e
]
;
e
<
i
;
s
=
r
[
+
+
e
]
)
y
(
s
)
|
|
!
l
(
s
)
?
o
+
=
"
"
+
s
:
o
+
=
"
"
+
c
(
s
)
;
return
o
}
k
.
deprecate
=
function
(
n
t
)
{
if
(
w
(
i
.
process
)
)
return
function
(
)
{
return
k
.
deprecate
(
n
t
)
.
apply
(
this
arguments
)
}
;
if
(
!
0
=
=
=
r
.
noDeprecation
)
return
n
;
var
e
=
!
1
;
return
function
(
)
{
if
(
!
e
)
{
if
(
r
.
throwDeprecation
)
throw
new
Error
(
t
)
;
r
.
traceDeprecation
?
console
.
trace
(
t
)
:
console
.
error
(
t
)
e
=
!
0
}
return
n
.
apply
(
this
arguments
)
}
}
;
var
n
o
=
{
}
;
function
c
(
n
t
)
{
var
e
=
{
seen
:
[
]
stylize
:
u
}
;
return
3
<
=
arguments
.
length
&
&
(
e
.
depth
=
arguments
[
2
]
)
4
<
=
arguments
.
length
&
&
(
e
.
colors
=
arguments
[
3
]
)
m
(
t
)
?
e
.
showHidden
=
t
:
t
&
&
k
.
_extend
(
e
t
)
w
(
e
.
showHidden
)
&
&
(
e
.
showHidden
=
!
1
)
w
(
e
.
depth
)
&
&
(
e
.
depth
=
2
)
w
(
e
.
colors
)
&
&
(
e
.
colors
=
!
1
)
w
(
e
.
customInspect
)
&
&
(
e
.
customInspect
=
!
0
)
e
.
colors
&
&
(
e
.
stylize
=
s
)
p
(
e
n
e
.
depth
)
}
function
s
(
n
t
)
{
var
e
=
c
.
styles
[
t
]
;
return
e
?
"
[
"
+
c
.
colors
[
e
]
[
0
]
+
"
m
"
+
n
+
"
[
"
+
c
.
colors
[
e
]
[
1
]
+
"
m
"
:
n
}
function
u
(
n
t
)
{
return
n
}
function
p
(
t
e
r
)
{
if
(
t
.
customInspect
&
&
e
&
&
x
(
e
.
inspect
)
&
&
e
.
inspect
!
=
=
k
.
inspect
&
&
(
!
e
.
constructor
|
|
e
.
constructor
.
prototype
!
=
=
e
)
)
{
var
n
=
e
.
inspect
(
r
t
)
;
return
_
(
n
)
|
|
(
n
=
p
(
t
n
r
)
)
n
}
var
i
=
function
(
n
t
)
{
if
(
w
(
t
)
)
return
n
.
stylize
(
"
undefined
"
"
undefined
"
)
;
if
(
_
(
t
)
)
{
var
e
=
"
'
"
+
JSON
.
stringify
(
t
)
.
replace
(
/
^
"
|
"
/
g
"
"
)
.
replace
(
/
'
/
g
"
\
\
'
"
)
.
replace
(
/
\
\
"
/
g
'
"
'
)
+
"
'
"
;
return
n
.
stylize
(
e
"
string
"
)
}
if
(
b
(
t
)
)
return
n
.
stylize
(
"
"
+
t
"
number
"
)
;
if
(
m
(
t
)
)
return
n
.
stylize
(
"
"
+
t
"
boolean
"
)
;
if
(
y
(
t
)
)
return
n
.
stylize
(
"
null
"
"
null
"
)
}
(
t
e
)
;
if
(
i
)
return
i
;
var
o
s
=
Object
.
keys
(
e
)
a
=
(
o
=
{
}
s
.
forEach
(
function
(
n
t
)
{
o
[
n
]
=
!
0
}
)
o
)
;
if
(
t
.
showHidden
&
&
(
s
=
Object
.
getOwnPropertyNames
(
e
)
)
A
(
e
)
&
&
(
0
<
=
s
.
indexOf
(
"
message
"
)
|
|
0
<
=
s
.
indexOf
(
"
description
"
)
)
)
return
d
(
e
)
;
if
(
0
=
=
=
s
.
length
)
{
if
(
x
(
e
)
)
{
var
c
=
e
.
name
?
"
:
"
+
e
.
name
:
"
"
;
return
t
.
stylize
(
"
[
Function
"
+
c
+
"
]
"
"
special
"
)
}
if
(
E
(
e
)
)
return
t
.
stylize
(
RegExp
.
prototype
.
toString
.
call
(
e
)
"
regexp
"
)
;
if
(
O
(
e
)
)
return
t
.
stylize
(
Date
.
prototype
.
toString
.
call
(
e
)
"
date
"
)
;
if
(
A
(
e
)
)
return
d
(
e
)
}
var
u
l
=
"
"
f
=
!
1
h
=
[
"
{
"
"
}
"
]
;
(
g
(
e
)
&
&
(
f
=
!
0
h
=
[
"
[
"
"
]
"
]
)
x
(
e
)
)
&
&
(
l
=
"
[
Function
"
+
(
e
.
name
?
"
:
"
+
e
.
name
:
"
"
)
+
"
]
"
)
;
return
E
(
e
)
&
&
(
l
=
"
"
+
RegExp
.
prototype
.
toString
.
call
(
e
)
)
O
(
e
)
&
&
(
l
=
"
"
+
Date
.
prototype
.
toUTCString
.
call
(
e
)
)
A
(
e
)
&
&
(
l
=
"
"
+
d
(
e
)
)
0
!
=
=
s
.
length
|
|
f
&
&
0
!
=
e
.
length
?
r
<
0
?
E
(
e
)
?
t
.
stylize
(
RegExp
.
prototype
.
toString
.
call
(
e
)
"
regexp
"
)
:
t
.
stylize
(
"
[
Object
]
"
"
special
"
)
:
(
t
.
seen
.
push
(
e
)
u
=
f
?
function
(
t
e
r
i
n
)
{
for
(
var
o
=
[
]
s
=
0
a
=
e
.
length
;
s
<
a
;
+
+
s
)
j
(
e
String
(
s
)
)
?
o
.
push
(
v
(
t
e
r
i
String
(
s
)
!
0
)
)
:
o
.
push
(
"
"
)
;
return
n
.
forEach
(
function
(
n
)
{
n
.
match
(
/
^
\
d
+
/
)
|
|
o
.
push
(
v
(
t
e
r
i
n
!
0
)
)
}
)
o
}
(
t
e
r
a
s
)
:
s
.
map
(
function
(
n
)
{
return
v
(
t
e
r
a
n
f
)
}
)
t
.
seen
.
pop
(
)
function
(
n
t
e
)
{
if
(
60
<
n
.
reduce
(
function
(
n
t
)
{
return
0
0
<
=
t
.
indexOf
(
"
\
n
"
)
&
&
0
n
+
t
.
replace
(
/
\
u001b
\
[
\
d
\
d
?
m
/
g
"
"
)
.
length
+
1
}
0
)
)
return
e
[
0
]
+
(
"
"
=
=
=
t
?
"
"
:
t
+
"
\
n
"
)
+
"
"
+
n
.
join
(
"
\
n
"
)
+
"
"
+
e
[
1
]
;
return
e
[
0
]
+
t
+
"
"
+
n
.
join
(
"
"
)
+
"
"
+
e
[
1
]
}
(
u
l
h
)
)
:
h
[
0
]
+
l
+
h
[
1
]
}
function
d
(
n
)
{
return
"
[
"
+
Error
.
prototype
.
toString
.
call
(
n
)
+
"
]
"
}
function
v
(
n
t
e
r
i
o
)
{
var
s
a
c
;
if
(
(
c
=
Object
.
getOwnPropertyDescriptor
(
t
i
)
|
|
{
value
:
t
[
i
]
}
)
.
get
?
a
=
c
.
set
?
n
.
stylize
(
"
[
Getter
/
Setter
]
"
"
special
"
)
:
n
.
stylize
(
"
[
Getter
]
"
"
special
"
)
:
c
.
set
&
&
(
a
=
n
.
stylize
(
"
[
Setter
]
"
"
special
"
)
)
j
(
r
i
)
|
|
(
s
=
"
[
"
+
i
+
"
]
"
)
a
|
|
(
n
.
seen
.
indexOf
(
c
.
value
)
<
0
?
-
1
<
(
a
=
y
(
e
)
?
p
(
n
c
.
value
null
)
:
p
(
n
c
.
value
e
-
1
)
)
.
indexOf
(
"
\
n
"
)
&
&
(
a
=
o
?
a
.
split
(
"
\
n
"
)
.
map
(
function
(
n
)
{
return
"
"
+
n
}
)
.
join
(
"
\
n
"
)
.
substr
(
2
)
:
"
\
n
"
+
a
.
split
(
"
\
n
"
)
.
map
(
function
(
n
)
{
return
"
"
+
n
}
)
.
join
(
"
\
n
"
)
)
:
a
=
n
.
stylize
(
"
[
Circular
]
"
"
special
"
)
)
w
(
s
)
)
{
if
(
o
&
&
i
.
match
(
/
^
\
d
+
/
)
)
return
a
;
s
=
(
s
=
JSON
.
stringify
(
"
"
+
i
)
)
.
match
(
/
^
"
(
[
a
-
zA
-
Z_
]
[
a
-
zA
-
Z_0
-
9
]
*
)
"
/
)
?
(
s
=
s
.
substr
(
1
s
.
length
-
2
)
n
.
stylize
(
s
"
name
"
)
)
:
(
s
=
s
.
replace
(
/
'
/
g
"
\
\
'
"
)
.
replace
(
/
\
\
"
/
g
'
"
'
)
.
replace
(
/
(
^
"
|
"
)
/
g
"
'
"
)
n
.
stylize
(
s
"
string
"
)
)
}
return
s
+
"
:
"
+
a
}
function
g
(
n
)
{
return
Array
.
isArray
(
n
)
}
function
m
(
n
)
{
return
"
boolean
"
=
=
typeof
n
}
function
y
(
n
)
{
return
null
=
=
=
n
}
function
b
(
n
)
{
return
"
number
"
=
=
typeof
n
}
function
_
(
n
)
{
return
"
string
"
=
=
typeof
n
}
function
w
(
n
)
{
return
void
0
=
=
=
n
}
function
E
(
n
)
{
return
l
(
n
)
&
&
"
[
object
RegExp
]
"
=
=
=
t
(
n
)
}
function
l
(
n
)
{
return
"
object
"
=
=
typeof
n
&
&
null
!
=
=
n
}
function
O
(
n
)
{
return
l
(
n
)
&
&
"
[
object
Date
]
"
=
=
=
t
(
n
)
}
function
A
(
n
)
{
return
l
(
n
)
&
&
(
"
[
object
Error
]
"
=
=
=
t
(
n
)
|
|
n
instanceof
Error
)
}
function
x
(
n
)
{
return
"
function
"
=
=
typeof
n
}
function
t
(
n
)
{
return
Object
.
prototype
.
toString
.
call
(
n
)
}
function
e
(
n
)
{
return
n
<
10
?
"
0
"
+
n
.
toString
(
10
)
:
n
.
toString
(
10
)
}
k
.
debuglog
=
function
(
t
)
{
if
(
w
(
n
)
&
&
(
n
=
r
.
env
.
NODE_DEBUG
|
|
"
"
)
t
=
t
.
toUpperCase
(
)
!
o
[
t
]
)
if
(
new
RegExp
(
"
\
\
b
"
+
t
+
"
\
\
b
"
"
i
"
)
.
test
(
n
)
)
{
var
e
=
r
.
pid
;
o
[
t
]
=
function
(
)
{
var
n
=
k
.
format
.
apply
(
k
arguments
)
;
console
.
error
(
"
%
s
%
d
:
%
s
"
t
e
n
)
}
}
else
o
[
t
]
=
function
(
)
{
}
;
return
o
[
t
]
}
(
k
.
inspect
=
c
)
.
colors
=
{
bold
:
[
1
22
]
italic
:
[
3
23
]
underline
:
[
4
24
]
inverse
:
[
7
27
]
white
:
[
37
39
]
grey
:
[
90
39
]
black
:
[
30
39
]
blue
:
[
34
39
]
cyan
:
[
36
39
]
green
:
[
32
39
]
magenta
:
[
35
39
]
red
:
[
31
39
]
yellow
:
[
33
39
]
}
c
.
styles
=
{
special
:
"
cyan
"
number
:
"
yellow
"
boolean
:
"
yellow
"
undefined
:
"
grey
"
null
:
"
bold
"
string
:
"
green
"
date
:
"
magenta
"
regexp
:
"
red
"
}
k
.
isArray
=
g
k
.
isBoolean
=
m
k
.
isNull
=
y
k
.
isNullOrUndefined
=
function
(
n
)
{
return
null
=
=
n
}
k
.
isNumber
=
b
k
.
isString
=
_
k
.
isSymbol
=
function
(
n
)
{
return
"
symbol
"
=
=
typeof
n
}
k
.
isUndefined
=
w
k
.
isRegExp
=
E
k
.
isObject
=
l
k
.
isDate
=
O
k
.
isError
=
A
k
.
isFunction
=
x
k
.
isPrimitive
=
function
(
n
)
{
return
null
=
=
=
n
|
|
"
boolean
"
=
=
typeof
n
|
|
"
number
"
=
=
typeof
n
|
|
"
string
"
=
=
typeof
n
|
|
"
symbol
"
=
=
typeof
n
|
|
void
0
=
=
=
n
}
k
.
isBuffer
=
h
(
"
.
/
support
/
isBuffer
"
)
;
var
f
=
[
"
Jan
"
"
Feb
"
"
Mar
"
"
Apr
"
"
May
"
"
Jun
"
"
Jul
"
"
Aug
"
"
Sep
"
"
Oct
"
"
Nov
"
"
Dec
"
]
;
function
j
(
n
t
)
{
return
Object
.
prototype
.
hasOwnProperty
.
call
(
n
t
)
}
k
.
log
=
function
(
)
{
var
n
t
;
console
.
log
(
"
%
s
-
%
s
"
(
n
=
new
Date
t
=
[
e
(
n
.
getHours
(
)
)
e
(
n
.
getMinutes
(
)
)
e
(
n
.
getSeconds
(
)
)
]
.
join
(
"
:
"
)
[
n
.
getDate
(
)
f
[
n
.
getMonth
(
)
]
t
]
.
join
(
"
"
)
)
k
.
format
.
apply
(
k
arguments
)
)
}
k
.
inherits
=
h
(
"
inherits
"
)
k
.
_extend
=
function
(
n
t
)
{
if
(
!
t
|
|
!
l
(
t
)
)
return
n
;
for
(
var
e
=
Object
.
keys
(
t
)
r
=
e
.
length
;
r
-
-
;
)
n
[
e
[
r
]
]
=
t
[
e
[
r
]
]
;
return
n
}
}
)
.
call
(
this
h
(
"
_process
"
)
"
undefined
"
!
=
typeof
global
?
global
:
"
undefined
"
!
=
typeof
self
?
self
:
"
undefined
"
!
=
typeof
window
?
window
:
{
}
)
}
{
"
.
/
support
/
isBuffer
"
:
27
_process
:
24
inherits
:
26
}
]
29
:
[
function
(
n
t
e
)
{
t
.
exports
=
function
n
(
i
t
)
{
if
(
i
&
&
t
)
return
n
(
i
)
(
t
)
;
if
(
"
function
"
!
=
typeof
i
)
throw
new
TypeError
(
"
need
wrapper
function
"
)
;
Object
.
keys
(
i
)
.
forEach
(
function
(
n
)
{
e
[
n
]
=
i
[
n
]
}
)
;
return
e
;
function
e
(
)
{
for
(
var
n
=
new
Array
(
arguments
.
length
)
t
=
0
;
t
<
n
.
length
;
t
+
+
)
n
[
t
]
=
arguments
[
t
]
;
var
e
=
i
.
apply
(
this
n
)
r
=
n
[
n
.
length
-
1
]
;
return
"
function
"
=
=
typeof
e
&
&
e
!
=
=
r
&
&
Object
.
keys
(
r
)
.
forEach
(
function
(
n
)
{
e
[
n
]
=
r
[
n
]
}
)
e
}
}
}
{
}
]
}
{
}
[
7
]
)
(
7
)
}
)
;
