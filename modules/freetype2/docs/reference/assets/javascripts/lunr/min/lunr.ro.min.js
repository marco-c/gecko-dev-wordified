/
*
!
*
Lunr
languages
Romanian
language
*
https
:
/
/
github
.
com
/
MihaiValentin
/
lunr
-
languages
*
*
Copyright
2014
Mihai
Valentin
*
http
:
/
/
www
.
mozilla
.
org
/
MPL
/
*
/
/
*
!
*
based
on
*
Snowball
JavaScript
Library
v0
.
3
*
http
:
/
/
code
.
google
.
com
/
p
/
urim
/
*
http
:
/
/
snowball
.
tartarus
.
org
/
*
*
Copyright
2010
Oleg
Mazko
*
http
:
/
/
www
.
mozilla
.
org
/
MPL
/
*
/
!
function
(
e
i
)
{
"
function
"
=
=
typeof
define
&
&
define
.
amd
?
define
(
i
)
:
"
object
"
=
=
typeof
exports
?
module
.
exports
=
i
(
)
:
i
(
)
(
e
.
lunr
)
}
(
this
function
(
)
{
return
function
(
e
)
{
if
(
void
0
=
=
=
e
)
throw
new
Error
(
"
Lunr
is
not
present
.
Please
include
/
require
Lunr
before
this
script
.
"
)
;
if
(
void
0
=
=
=
e
.
stemmerSupport
)
throw
new
Error
(
"
Lunr
stemmer
support
is
not
present
.
Please
include
/
require
Lunr
stemmer
support
before
this
script
.
"
)
;
e
.
ro
=
function
(
)
{
this
.
pipeline
.
reset
(
)
this
.
pipeline
.
add
(
e
.
ro
.
trimmer
e
.
ro
.
stopWordFilter
e
.
ro
.
stemmer
)
this
.
searchPipeline
&
&
(
this
.
searchPipeline
.
reset
(
)
this
.
searchPipeline
.
add
(
e
.
ro
.
stemmer
)
)
}
e
.
ro
.
wordCharacters
=
"
A
-
Za
-
z
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
"
e
.
ro
.
trimmer
=
e
.
trimmerSupport
.
generateTrimmer
(
e
.
ro
.
wordCharacters
)
e
.
Pipeline
.
registerFunction
(
e
.
ro
.
trimmer
"
trimmer
-
ro
"
)
e
.
ro
.
stemmer
=
function
(
)
{
var
i
=
e
.
stemmerSupport
.
Among
r
=
e
.
stemmerSupport
.
SnowballProgram
n
=
new
function
(
)
{
function
e
(
e
i
)
{
L
.
eq_s
(
1
e
)
&
&
(
L
.
ket
=
L
.
cursor
L
.
in_grouping
(
W
97
259
)
&
&
L
.
slice_from
(
i
)
)
}
function
n
(
)
{
for
(
var
i
r
;
;
)
{
if
(
i
=
L
.
cursor
L
.
in_grouping
(
W
97
259
)
&
&
(
r
=
L
.
cursor
L
.
bra
=
r
e
(
"
u
"
"
U
"
)
L
.
cursor
=
r
e
(
"
i
"
"
I
"
)
)
L
.
cursor
=
i
L
.
cursor
>
=
L
.
limit
)
break
;
L
.
cursor
+
+
}
}
function
t
(
)
{
if
(
L
.
out_grouping
(
W
97
259
)
)
{
for
(
;
!
L
.
in_grouping
(
W
97
259
)
;
)
{
if
(
L
.
cursor
>
=
L
.
limit
)
return
!
0
;
L
.
cursor
+
+
}
return
!
1
}
return
!
0
}
function
a
(
)
{
if
(
L
.
in_grouping
(
W
97
259
)
)
for
(
;
!
L
.
out_grouping
(
W
97
259
)
;
)
{
if
(
L
.
cursor
>
=
L
.
limit
)
return
!
0
;
L
.
cursor
+
+
}
return
!
1
}
function
o
(
)
{
var
e
i
r
=
L
.
cursor
;
if
(
L
.
in_grouping
(
W
97
259
)
)
{
if
(
e
=
L
.
cursor
!
t
(
)
)
return
void
(
h
=
L
.
cursor
)
;
if
(
L
.
cursor
=
e
!
a
(
)
)
return
void
(
h
=
L
.
cursor
)
}
L
.
cursor
=
r
L
.
out_grouping
(
W
97
259
)
&
&
(
i
=
L
.
cursor
t
(
)
&
&
(
L
.
cursor
=
i
L
.
in_grouping
(
W
97
259
)
&
&
L
.
cursor
<
L
.
limit
&
&
L
.
cursor
+
+
)
h
=
L
.
cursor
)
}
function
u
(
)
{
for
(
;
!
L
.
in_grouping
(
W
97
259
)
;
)
{
if
(
L
.
cursor
>
=
L
.
limit
)
return
!
1
;
L
.
cursor
+
+
}
for
(
;
!
L
.
out_grouping
(
W
97
259
)
;
)
{
if
(
L
.
cursor
>
=
L
.
limit
)
return
!
1
;
L
.
cursor
+
+
}
return
!
0
}
function
c
(
)
{
var
e
=
L
.
cursor
;
h
=
L
.
limit
k
=
h
g
=
h
o
(
)
L
.
cursor
=
e
u
(
)
&
&
(
k
=
L
.
cursor
u
(
)
&
&
(
g
=
L
.
cursor
)
)
}
function
s
(
)
{
for
(
var
e
;
;
)
{
if
(
L
.
bra
=
L
.
cursor
e
=
L
.
find_among
(
z
3
)
)
switch
(
L
.
ket
=
L
.
cursor
e
)
{
case
1
:
L
.
slice_from
(
"
i
"
)
;
continue
;
case
2
:
L
.
slice_from
(
"
u
"
)
;
continue
;
case
3
:
if
(
L
.
cursor
>
=
L
.
limit
)
break
;
L
.
cursor
+
+
;
continue
}
break
}
}
function
w
(
)
{
return
h
<
=
L
.
cursor
}
function
m
(
)
{
return
k
<
=
L
.
cursor
}
function
l
(
)
{
return
g
<
=
L
.
cursor
}
function
f
(
)
{
var
e
i
;
if
(
L
.
ket
=
L
.
cursor
(
e
=
L
.
find_among_b
(
C
16
)
)
&
&
(
L
.
bra
=
L
.
cursor
m
(
)
)
)
switch
(
e
)
{
case
1
:
L
.
slice_del
(
)
;
break
;
case
2
:
L
.
slice_from
(
"
a
"
)
;
break
;
case
3
:
L
.
slice_from
(
"
e
"
)
;
break
;
case
4
:
L
.
slice_from
(
"
i
"
)
;
break
;
case
5
:
i
=
L
.
limit
-
L
.
cursor
L
.
eq_s_b
(
2
"
ab
"
)
|
|
(
L
.
cursor
=
L
.
limit
-
i
L
.
slice_from
(
"
i
"
)
)
;
break
;
case
6
:
L
.
slice_from
(
"
at
"
)
;
break
;
case
7
:
L
.
slice_from
(
"
a
i
"
)
}
}
function
p
(
)
{
var
e
i
=
L
.
limit
-
L
.
cursor
;
if
(
L
.
ket
=
L
.
cursor
(
e
=
L
.
find_among_b
(
P
46
)
)
&
&
(
L
.
bra
=
L
.
cursor
m
(
)
)
)
{
switch
(
e
)
{
case
1
:
L
.
slice_from
(
"
abil
"
)
;
break
;
case
2
:
L
.
slice_from
(
"
ibil
"
)
;
break
;
case
3
:
L
.
slice_from
(
"
iv
"
)
;
break
;
case
4
:
L
.
slice_from
(
"
ic
"
)
;
break
;
case
5
:
L
.
slice_from
(
"
at
"
)
;
break
;
case
6
:
L
.
slice_from
(
"
it
"
)
}
return
_
=
!
0
L
.
cursor
=
L
.
limit
-
i
!
0
}
return
!
1
}
function
d
(
)
{
var
e
i
;
for
(
_
=
!
1
;
;
)
if
(
i
=
L
.
limit
-
L
.
cursor
!
p
(
)
)
{
L
.
cursor
=
L
.
limit
-
i
;
break
}
if
(
L
.
ket
=
L
.
cursor
(
e
=
L
.
find_among_b
(
F
62
)
)
&
&
(
L
.
bra
=
L
.
cursor
l
(
)
)
)
{
switch
(
e
)
{
case
1
:
L
.
slice_del
(
)
;
break
;
case
2
:
L
.
eq_s_b
(
1
"
"
)
&
&
(
L
.
bra
=
L
.
cursor
L
.
slice_from
(
"
t
"
)
)
;
break
;
case
3
:
L
.
slice_from
(
"
ist
"
)
}
_
=
!
0
}
}
function
b
(
)
{
var
e
i
r
;
if
(
L
.
cursor
>
=
h
)
{
if
(
i
=
L
.
limit_backward
L
.
limit_backward
=
h
L
.
ket
=
L
.
cursor
e
=
L
.
find_among_b
(
q
94
)
)
switch
(
L
.
bra
=
L
.
cursor
e
)
{
case
1
:
if
(
r
=
L
.
limit
-
L
.
cursor
!
L
.
out_grouping_b
(
W
97
259
)
&
&
(
L
.
cursor
=
L
.
limit
-
r
!
L
.
eq_s_b
(
1
"
u
"
)
)
)
break
;
case
2
:
L
.
slice_del
(
)
}
L
.
limit_backward
=
i
}
}
function
v
(
)
{
var
e
;
L
.
ket
=
L
.
cursor
(
e
=
L
.
find_among_b
(
S
5
)
)
&
&
(
L
.
bra
=
L
.
cursor
w
(
)
&
&
1
=
=
e
&
&
L
.
slice_del
(
)
)
}
var
_
g
k
h
z
=
[
new
i
(
"
"
-
1
3
)
new
i
(
"
I
"
0
1
)
new
i
(
"
U
"
0
2
)
]
C
=
[
new
i
(
"
ea
"
-
1
3
)
new
i
(
"
a
ia
"
-
1
7
)
new
i
(
"
aua
"
-
1
2
)
new
i
(
"
iua
"
-
1
4
)
new
i
(
"
a
ie
"
-
1
7
)
new
i
(
"
ele
"
-
1
3
)
new
i
(
"
ile
"
-
1
5
)
new
i
(
"
iile
"
6
4
)
new
i
(
"
iei
"
-
1
4
)
new
i
(
"
atei
"
-
1
6
)
new
i
(
"
ii
"
-
1
4
)
new
i
(
"
ului
"
-
1
1
)
new
i
(
"
ul
"
-
1
1
)
new
i
(
"
elor
"
-
1
3
)
new
i
(
"
ilor
"
-
1
4
)
new
i
(
"
iilor
"
14
4
)
]
P
=
[
new
i
(
"
icala
"
-
1
4
)
new
i
(
"
iciva
"
-
1
4
)
new
i
(
"
ativa
"
-
1
5
)
new
i
(
"
itiva
"
-
1
6
)
new
i
(
"
icale
"
-
1
4
)
new
i
(
"
a
iune
"
-
1
5
)
new
i
(
"
i
iune
"
-
1
6
)
new
i
(
"
atoare
"
-
1
5
)
new
i
(
"
itoare
"
-
1
6
)
new
i
(
"
toare
"
-
1
5
)
new
i
(
"
icitate
"
-
1
4
)
new
i
(
"
abilitate
"
-
1
1
)
new
i
(
"
ibilitate
"
-
1
2
)
new
i
(
"
ivitate
"
-
1
3
)
new
i
(
"
icive
"
-
1
4
)
new
i
(
"
ative
"
-
1
5
)
new
i
(
"
itive
"
-
1
6
)
new
i
(
"
icali
"
-
1
4
)
new
i
(
"
atori
"
-
1
5
)
new
i
(
"
icatori
"
18
4
)
new
i
(
"
itori
"
-
1
6
)
new
i
(
"
tori
"
-
1
5
)
new
i
(
"
icitati
"
-
1
4
)
new
i
(
"
abilitati
"
-
1
1
)
new
i
(
"
ivitati
"
-
1
3
)
new
i
(
"
icivi
"
-
1
4
)
new
i
(
"
ativi
"
-
1
5
)
new
i
(
"
itivi
"
-
1
6
)
new
i
(
"
icit
i
"
-
1
4
)
new
i
(
"
abilit
i
"
-
1
1
)
new
i
(
"
ivit
i
"
-
1
3
)
new
i
(
"
icit
i
"
-
1
4
)
new
i
(
"
abilit
i
"
-
1
1
)
new
i
(
"
ivit
i
"
-
1
3
)
new
i
(
"
ical
"
-
1
4
)
new
i
(
"
ator
"
-
1
5
)
new
i
(
"
icator
"
35
4
)
new
i
(
"
itor
"
-
1
6
)
new
i
(
"
tor
"
-
1
5
)
new
i
(
"
iciv
"
-
1
4
)
new
i
(
"
ativ
"
-
1
5
)
new
i
(
"
itiv
"
-
1
6
)
new
i
(
"
ical
"
-
1
4
)
new
i
(
"
iciv
"
-
1
4
)
new
i
(
"
ativ
"
-
1
5
)
new
i
(
"
itiv
"
-
1
6
)
]
F
=
[
new
i
(
"
ica
"
-
1
1
)
new
i
(
"
abila
"
-
1
1
)
new
i
(
"
ibila
"
-
1
1
)
new
i
(
"
oasa
"
-
1
1
)
new
i
(
"
ata
"
-
1
1
)
new
i
(
"
ita
"
-
1
1
)
new
i
(
"
anta
"
-
1
1
)
new
i
(
"
ista
"
-
1
3
)
new
i
(
"
uta
"
-
1
1
)
new
i
(
"
iva
"
-
1
1
)
new
i
(
"
ic
"
-
1
1
)
new
i
(
"
ice
"
-
1
1
)
new
i
(
"
abile
"
-
1
1
)
new
i
(
"
ibile
"
-
1
1
)
new
i
(
"
isme
"
-
1
3
)
new
i
(
"
iune
"
-
1
2
)
new
i
(
"
oase
"
-
1
1
)
new
i
(
"
ate
"
-
1
1
)
new
i
(
"
itate
"
17
1
)
new
i
(
"
ite
"
-
1
1
)
new
i
(
"
ante
"
-
1
1
)
new
i
(
"
iste
"
-
1
3
)
new
i
(
"
ute
"
-
1
1
)
new
i
(
"
ive
"
-
1
1
)
new
i
(
"
ici
"
-
1
1
)
new
i
(
"
abili
"
-
1
1
)
new
i
(
"
ibili
"
-
1
1
)
new
i
(
"
iuni
"
-
1
2
)
new
i
(
"
atori
"
-
1
1
)
new
i
(
"
osi
"
-
1
1
)
new
i
(
"
ati
"
-
1
1
)
new
i
(
"
itati
"
30
1
)
new
i
(
"
iti
"
-
1
1
)
new
i
(
"
anti
"
-
1
1
)
new
i
(
"
isti
"
-
1
3
)
new
i
(
"
uti
"
-
1
1
)
new
i
(
"
i
ti
"
-
1
3
)
new
i
(
"
ivi
"
-
1
1
)
new
i
(
"
it
i
"
-
1
1
)
new
i
(
"
o
i
"
-
1
1
)
new
i
(
"
it
i
"
-
1
1
)
new
i
(
"
abil
"
-
1
1
)
new
i
(
"
ibil
"
-
1
1
)
new
i
(
"
ism
"
-
1
3
)
new
i
(
"
ator
"
-
1
1
)
new
i
(
"
os
"
-
1
1
)
new
i
(
"
at
"
-
1
1
)
new
i
(
"
it
"
-
1
1
)
new
i
(
"
ant
"
-
1
1
)
new
i
(
"
ist
"
-
1
3
)
new
i
(
"
ut
"
-
1
1
)
new
i
(
"
iv
"
-
1
1
)
new
i
(
"
ic
"
-
1
1
)
new
i
(
"
abil
"
-
1
1
)
new
i
(
"
ibil
"
-
1
1
)
new
i
(
"
oas
"
-
1
1
)
new
i
(
"
at
"
-
1
1
)
new
i
(
"
it
"
-
1
1
)
new
i
(
"
ant
"
-
1
1
)
new
i
(
"
ist
"
-
1
3
)
new
i
(
"
ut
"
-
1
1
)
new
i
(
"
iv
"
-
1
1
)
]
q
=
[
new
i
(
"
ea
"
-
1
1
)
new
i
(
"
ia
"
-
1
1
)
new
i
(
"
esc
"
-
1
1
)
new
i
(
"
sc
"
-
1
1
)
new
i
(
"
ind
"
-
1
1
)
new
i
(
"
nd
"
-
1
1
)
new
i
(
"
are
"
-
1
1
)
new
i
(
"
ere
"
-
1
1
)
new
i
(
"
ire
"
-
1
1
)
new
i
(
"
re
"
-
1
1
)
new
i
(
"
se
"
-
1
2
)
new
i
(
"
ase
"
10
1
)
new
i
(
"
sese
"
10
2
)
new
i
(
"
ise
"
10
1
)
new
i
(
"
use
"
10
1
)
new
i
(
"
se
"
10
1
)
new
i
(
"
e
te
"
-
1
1
)
new
i
(
"
te
"
-
1
1
)
new
i
(
"
eze
"
-
1
1
)
new
i
(
"
ai
"
-
1
1
)
new
i
(
"
eai
"
19
1
)
new
i
(
"
iai
"
19
1
)
new
i
(
"
sei
"
-
1
2
)
new
i
(
"
e
ti
"
-
1
1
)
new
i
(
"
ti
"
-
1
1
)
new
i
(
"
ui
"
-
1
1
)
new
i
(
"
ezi
"
-
1
1
)
new
i
(
"
i
"
-
1
1
)
new
i
(
"
a
i
"
-
1
1
)
new
i
(
"
se
i
"
-
1
2
)
new
i
(
"
ase
i
"
29
1
)
new
i
(
"
sese
i
"
29
2
)
new
i
(
"
ise
i
"
29
1
)
new
i
(
"
use
i
"
29
1
)
new
i
(
"
se
i
"
29
1
)
new
i
(
"
i
i
"
-
1
1
)
new
i
(
"
u
i
"
-
1
1
)
new
i
(
"
i
"
-
1
1
)
new
i
(
"
a
i
"
-
1
2
)
new
i
(
"
ea
i
"
38
1
)
new
i
(
"
ia
i
"
38
1
)
new
i
(
"
e
i
"
-
1
2
)
new
i
(
"
i
i
"
-
1
2
)
new
i
(
"
i
"
-
1
2
)
new
i
(
"
ar
i
"
-
1
1
)
new
i
(
"
ser
i
"
-
1
2
)
new
i
(
"
aser
i
"
45
1
)
new
i
(
"
seser
i
"
45
2
)
new
i
(
"
iser
i
"
45
1
)
new
i
(
"
user
i
"
45
1
)
new
i
(
"
ser
i
"
45
1
)
new
i
(
"
ir
i
"
-
1
1
)
new
i
(
"
ur
i
"
-
1
1
)
new
i
(
"
r
i
"
-
1
1
)
new
i
(
"
am
"
-
1
1
)
new
i
(
"
eam
"
54
1
)
new
i
(
"
iam
"
54
1
)
new
i
(
"
em
"
-
1
2
)
new
i
(
"
asem
"
57
1
)
new
i
(
"
sesem
"
57
2
)
new
i
(
"
isem
"
57
1
)
new
i
(
"
usem
"
57
1
)
new
i
(
"
sem
"
57
1
)
new
i
(
"
im
"
-
1
2
)
new
i
(
"
m
"
-
1
2
)
new
i
(
"
m
"
-
1
2
)
new
i
(
"
ar
m
"
65
1
)
new
i
(
"
ser
m
"
65
2
)
new
i
(
"
aser
m
"
67
1
)
new
i
(
"
seser
m
"
67
2
)
new
i
(
"
iser
m
"
67
1
)
new
i
(
"
user
m
"
67
1
)
new
i
(
"
ser
m
"
67
1
)
new
i
(
"
ir
m
"
65
1
)
new
i
(
"
ur
m
"
65
1
)
new
i
(
"
r
m
"
65
1
)
new
i
(
"
au
"
-
1
1
)
new
i
(
"
eau
"
76
1
)
new
i
(
"
iau
"
76
1
)
new
i
(
"
indu
"
-
1
1
)
new
i
(
"
ndu
"
-
1
1
)
new
i
(
"
ez
"
-
1
1
)
new
i
(
"
easc
"
-
1
1
)
new
i
(
"
ar
"
-
1
1
)
new
i
(
"
ser
"
-
1
2
)
new
i
(
"
aser
"
84
1
)
new
i
(
"
seser
"
84
2
)
new
i
(
"
iser
"
84
1
)
new
i
(
"
user
"
84
1
)
new
i
(
"
ser
"
84
1
)
new
i
(
"
ir
"
-
1
1
)
new
i
(
"
ur
"
-
1
1
)
new
i
(
"
r
"
-
1
1
)
new
i
(
"
eaz
"
-
1
1
)
]
S
=
[
new
i
(
"
a
"
-
1
1
)
new
i
(
"
e
"
-
1
1
)
new
i
(
"
ie
"
1
1
)
new
i
(
"
i
"
-
1
1
)
new
i
(
"
"
-
1
1
)
]
W
=
[
17
65
16
0
0
0
0
0
0
0
0
0
0
0
0
0
2
32
0
0
4
]
L
=
new
r
;
this
.
setCurrent
=
function
(
e
)
{
L
.
setCurrent
(
e
)
}
this
.
getCurrent
=
function
(
)
{
return
L
.
getCurrent
(
)
}
this
.
stem
=
function
(
)
{
var
e
=
L
.
cursor
;
return
n
(
)
L
.
cursor
=
e
c
(
)
L
.
limit_backward
=
e
L
.
cursor
=
L
.
limit
f
(
)
L
.
cursor
=
L
.
limit
d
(
)
L
.
cursor
=
L
.
limit
_
|
|
(
L
.
cursor
=
L
.
limit
b
(
)
L
.
cursor
=
L
.
limit
)
v
(
)
L
.
cursor
=
L
.
limit_backward
s
(
)
!
0
}
}
;
return
function
(
e
)
{
return
"
function
"
=
=
typeof
e
.
update
?
e
.
update
(
function
(
e
)
{
return
n
.
setCurrent
(
e
)
n
.
stem
(
)
n
.
getCurrent
(
)
}
)
:
(
n
.
setCurrent
(
e
)
n
.
stem
(
)
n
.
getCurrent
(
)
)
}
}
(
)
e
.
Pipeline
.
registerFunction
(
e
.
ro
.
stemmer
"
stemmer
-
ro
"
)
e
.
ro
.
stopWordFilter
=
e
.
generateStopWordFilter
(
"
acea
aceasta
aceast
aceea
acei
aceia
acel
acela
acele
acelea
acest
acesta
aceste
acestea
ace
ti
ace
tia
acolo
acord
acum
ai
aia
aib
aici
al
ale
alea
altceva
altcineva
am
ar
are
asemenea
asta
astea
ast
zi
asupra
au
avea
avem
ave
i
azi
a
a
adar
a
i
bine
bucur
bun
ca
care
caut
ce
cel
ceva
chiar
cinci
cine
cineva
contra
cu
cum
cumva
cur
nd
cur
nd
c
nd
c
t
c
te
c
tva
c
i
c
nd
c
t
c
te
c
tva
c
i
c
c
ci
c
rei
c
ror
c
rui
c
tre
da
dac
dar
datorit
dat
dau
de
deci
deja
deoarece
departe
de
i
din
dinaintea
dintr
-
dintre
doi
doilea
dou
drept
dup
d
ea
ei
el
ele
eram
este
eu
e
ti
face
fata
fi
fie
fiecare
fii
fim
fiu
fi
i
frumos
f
r
gra
ie
halb
iar
ieri
la
le
li
lor
lui
l
ng
l
ng
mai
mea
mei
mele
mereu
meu
mi
mie
mine
mult
mult
mul
i
mul
umesc
m
ine
m
ine
m
ne
nevoie
nici
nic
ieri
nimeni
nimeri
nimic
ni
te
noastre
noastr
noi
noroc
nostru
nou
no
tri
nu
opt
ori
oricare
orice
oricine
oricum
oric
nd
oric
t
oric
nd
oric
t
oriunde
patra
patru
patrulea
pe
pentru
peste
pic
poate
pot
prea
prima
primul
prin
pu
in
pu
ina
pu
in
p
n
p
n
rog
sa
sale
sau
se
spate
spre
sub
sunt
suntem
sunte
i
sut
s
nt
s
ntem
s
nte
i
s
s
i
s
u
ta
tale
te
timp
tine
toate
toat
tot
totu
i
to
i
trei
treia
treilea
tu
t
i
t
u
un
una
unde
undeva
unei
uneia
unele
uneori
unii
unor
unora
unu
unui
unuia
unul
vi
voastre
voastr
voi
vostru
vou
vo
tri
vreme
vreo
vreun
v
zece
zero
zi
zice
i
l
mi
mpotriva
n
nainte
naintea
ncotro
nc
t
nc
t
ntre
ntruc
t
ntruc
t
i
la
lea
sta
stea
tia
apte
ase
i
tiu
i
ie
"
.
split
(
"
"
)
)
e
.
Pipeline
.
registerFunction
(
e
.
ro
.
stopWordFilter
"
stopWordFilter
-
ro
"
)
}
}
)
;
