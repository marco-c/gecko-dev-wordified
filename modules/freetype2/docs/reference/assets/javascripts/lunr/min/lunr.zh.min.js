!
function
(
e
r
)
{
"
function
"
=
=
typeof
define
&
&
define
.
amd
?
define
(
r
)
:
"
object
"
=
=
typeof
exports
?
module
.
exports
=
r
(
require
(
"
nodejieba
"
)
)
:
r
(
)
(
e
.
lunr
)
}
(
this
function
(
e
)
{
return
function
(
r
t
)
{
if
(
void
0
=
=
=
r
)
throw
new
Error
(
"
Lunr
is
not
present
.
Please
include
/
require
Lunr
before
this
script
.
"
)
;
if
(
void
0
=
=
=
r
.
stemmerSupport
)
throw
new
Error
(
"
Lunr
stemmer
support
is
not
present
.
Please
include
/
require
Lunr
stemmer
support
before
this
script
.
"
)
;
var
i
=
"
2
"
=
=
r
.
version
[
0
]
;
r
.
zh
=
function
(
)
{
this
.
pipeline
.
reset
(
)
this
.
pipeline
.
add
(
r
.
zh
.
trimmer
r
.
zh
.
stopWordFilter
r
.
zh
.
stemmer
)
i
?
this
.
tokenizer
=
r
.
zh
.
tokenizer
:
(
r
.
tokenizer
&
&
(
r
.
tokenizer
=
r
.
zh
.
tokenizer
)
this
.
tokenizerFn
&
&
(
this
.
tokenizerFn
=
r
.
zh
.
tokenizer
)
)
}
r
.
zh
.
tokenizer
=
function
(
n
)
{
if
(
!
arguments
.
length
|
|
null
=
=
n
|
|
void
0
=
=
n
)
return
[
]
;
if
(
Array
.
isArray
(
n
)
)
return
n
.
map
(
function
(
e
)
{
return
i
?
new
r
.
Token
(
e
.
toLowerCase
(
)
)
:
e
.
toLowerCase
(
)
}
)
;
t
&
&
e
.
load
(
t
)
;
var
o
=
n
.
toString
(
)
.
trim
(
)
.
toLowerCase
(
)
s
=
[
]
;
e
.
cut
(
o
!
0
)
.
forEach
(
function
(
e
)
{
s
=
s
.
concat
(
e
.
split
(
"
"
)
)
}
)
s
=
s
.
filter
(
function
(
e
)
{
return
!
!
e
}
)
;
var
u
=
0
;
return
s
.
map
(
function
(
e
t
)
{
if
(
i
)
{
var
n
=
o
.
indexOf
(
e
u
)
s
=
{
}
;
return
s
.
position
=
[
n
e
.
length
]
s
.
index
=
t
u
=
n
new
r
.
Token
(
e
s
)
}
return
e
}
)
}
r
.
zh
.
wordCharacters
=
"
\
\
w
-
"
r
.
zh
.
trimmer
=
r
.
trimmerSupport
.
generateTrimmer
(
r
.
zh
.
wordCharacters
)
r
.
Pipeline
.
registerFunction
(
r
.
zh
.
trimmer
"
trimmer
-
zh
"
)
r
.
zh
.
stemmer
=
function
(
)
{
return
function
(
e
)
{
return
e
}
}
(
)
r
.
Pipeline
.
registerFunction
(
r
.
zh
.
stemmer
"
stemmer
-
zh
"
)
r
.
zh
.
stopWordFilter
=
r
.
generateStopWordFilter
(
"
"
.
split
(
"
"
)
)
r
.
Pipeline
.
registerFunction
(
r
.
zh
.
stopWordFilter
"
stopWordFilter
-
zh
"
)
}
}
)
;
