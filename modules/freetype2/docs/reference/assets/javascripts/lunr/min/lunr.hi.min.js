!
function
(
e
r
)
{
"
function
"
=
=
typeof
define
&
&
define
.
amd
?
define
(
r
)
:
"
object
"
=
=
typeof
exports
?
module
.
exports
=
r
(
)
:
r
(
)
(
e
.
lunr
)
}
(
this
function
(
)
{
return
function
(
e
)
{
if
(
void
0
=
=
=
e
)
throw
new
Error
(
"
Lunr
is
not
present
.
Please
include
/
require
Lunr
before
this
script
.
"
)
;
if
(
void
0
=
=
=
e
.
stemmerSupport
)
throw
new
Error
(
"
Lunr
stemmer
support
is
not
present
.
Please
include
/
require
Lunr
stemmer
support
before
this
script
.
"
)
;
e
.
hi
=
function
(
)
{
this
.
pipeline
.
reset
(
)
this
.
pipeline
.
add
(
e
.
hi
.
trimmer
e
.
hi
.
stopWordFilter
e
.
hi
.
stemmer
)
this
.
searchPipeline
&
&
(
this
.
searchPipeline
.
reset
(
)
this
.
searchPipeline
.
add
(
e
.
hi
.
stemmer
)
)
}
e
.
hi
.
wordCharacters
=
"
-
-
-
-
-
-
-
-
-
a
-
zA
-
Z
-
-
0
-
9
-
"
e
.
hi
.
trimmer
=
e
.
trimmerSupport
.
generateTrimmer
(
e
.
hi
.
wordCharacters
)
e
.
Pipeline
.
registerFunction
(
e
.
hi
.
trimmer
"
trimmer
-
hi
"
)
e
.
hi
.
stopWordFilter
=
e
.
generateStopWordFilter
(
"
"
.
split
(
"
"
)
)
e
.
hi
.
stemmer
=
function
(
)
{
return
function
(
e
)
{
return
"
function
"
=
=
typeof
e
.
update
?
e
.
update
(
function
(
e
)
{
return
e
}
)
:
e
}
}
(
)
;
var
r
=
e
.
wordcut
;
r
.
init
(
)
e
.
hi
.
tokenizer
=
function
(
i
)
{
if
(
!
arguments
.
length
|
|
null
=
=
i
|
|
void
0
=
=
i
)
return
[
]
;
if
(
Array
.
isArray
(
i
)
)
return
i
.
map
(
function
(
r
)
{
return
isLunr2
?
new
e
.
Token
(
r
.
toLowerCase
(
)
)
:
r
.
toLowerCase
(
)
}
)
;
var
t
=
i
.
toString
(
)
.
toLowerCase
(
)
.
replace
(
/
^
\
s
+
/
"
"
)
;
return
r
.
cut
(
t
)
.
split
(
"
|
"
)
}
e
.
Pipeline
.
registerFunction
(
e
.
hi
.
stemmer
"
stemmer
-
hi
"
)
e
.
Pipeline
.
registerFunction
(
e
.
hi
.
stopWordFilter
"
stopWordFilter
-
hi
"
)
}
}
)
;
