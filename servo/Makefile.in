VPATH
=
%
VPATH
%
RUSTC
?
=
rustc
RUSTFLAGS
?
=
ifneq
(
(
DISABLE_OPTIMIZE
)
1
)
RUSTFLAGS
+
=
-
O
endif
UNAME
=
(
shell
uname
)
BUILD_DIR
=
(
shell
pwd
)
ifeq
(
(
UNAME
)
Darwin
)
OSTYPE
=
darwin
endif
ifeq
(
(
UNAME
)
Linux
)
OSTYPE
=
linux
endif
RUSTLIBS
=
\
-
L
src
/
rust
-
harfbuzz
\
-
L
src
/
rust
-
mozjs
\
-
L
src
/
rust
-
azure
\
-
L
src
/
rust
-
cocoa
\
-
L
src
/
rust
-
stb
-
image
\
-
L
src
/
rust
-
geom
\
-
L
src
/
rust
-
opengles
\
-
L
src
/
rust
-
glut
\
-
L
src
/
rust
-
layers
\
-
L
src
/
rust
-
http
-
client
\
(
NULL
)
RUST_SRC
=
(
shell
find
(
VPATH
)
/
src
-
type
f
-
name
'
*
.
rs
'
)
SERVO_DEPS
=
\
src
/
servo
/
servo
.
rc
\
(
RUST_SRC
)
\
(
NULL
)
CHECK_DEPS
=
CLEAN_DEPS
=
AZURE_DEPS
=
\
src
/
rust
-
geom
/
librustgeom
.
dummy
GLUT_DEPS
=
\
src
/
rust
-
opengles
/
librustopengles
.
dummy
LAYERS_DEPS
=
\
src
/
rust
-
geom
/
librustgeom
.
dummy
\
src
/
rust
-
opengles
/
librustopengles
.
dummy
\
src
/
rust
-
glut
/
librustglut
.
dummy
\
src
/
rust
-
azure
/
libazure
.
dummy
ifeq
(
(
OSTYPE
)
darwin
)
SERVO_DEPS
+
=
rust
-
cocoa
#
I
want
the
cocoa
check
to
come
before
the
servo
check
since
if
cocoa
#
doesn
'
t
work
neither
does
servo
CHECK_DEPS
+
=
check
-
rust
-
cocoa
CLEAN_DEPS
+
=
clean
-
rust
-
cocoa
AZURE_DEPS
+
=
rust
-
cocoa
LAYERS_DEPS
+
=
rust
-
cocoa
endif
SERVO_DEPS
+
=
\
src
/
mozjs
/
libjs_static
.
a
\
src
/
rust
-
harfbuzz
/
libharfbuzz
.
dummy
\
src
/
rust
-
mozjs
/
libjs
.
dummy
\
src
/
rust
-
azure
/
libazure
.
dummy
\
src
/
rust
-
stb
-
image
/
libstb
-
image
.
dummy
\
src
/
rust
-
geom
/
librustgeom
.
dummy
\
src
/
rust
-
opengles
/
librustopengles
.
dummy
\
src
/
rust
-
glut
/
librustglut
.
dummy
\
src
/
rust
-
layers
/
librustlayers
.
dummy
\
src
/
rust
-
http
-
client
/
libhttp_client
.
dummy
\
src
/
libparserutils
/
libparserutils
.
dummy
\
src
/
libhubbub
/
libhubbub
.
dummy
\
(
NULL
)
CHECK_DEPS
+
=
\
check
-
rust
-
harfbuzz
\
check
-
rust
-
mozjs
\
check
-
rust
-
azure
\
check
-
rust
-
stb
-
image
\
check
-
rust
-
geom
\
check
-
rust
-
opengles
\
check
-
rust
-
glut
\
check
-
rust
-
layers
\
check
-
rust
-
http
-
client
\
check
-
servo
\
(
NULL
)
CLEAN_DEPS
+
=
\
clean
-
rust
-
harfbuzz
\
clean
-
rust
-
mozjs
\
clean
-
rust
-
azure
\
clean
-
rust
-
stb
-
image
\
clean
-
rust
-
geom
\
clean
-
rust
-
opengles
\
clean
-
rust
-
glut
\
clean
-
rust
-
layers
\
clean
-
rust
-
http
-
client
\
clean
-
servo
\
(
NULL
)
.
PHONY
:
all
all
:
servo
package
#
Servo
binaries
servo
:
(
SERVO_DEPS
)
(
RUSTC
)
(
RUSTFLAGS
)
(
RUSTLIBS
)
-
o
<
-
-
bin
libservo
.
dummy
:
(
SERVO_DEPS
)
(
RUSTC
)
(
RUSTFLAGS
)
(
RUSTLIBS
)
-
o
<
touch
servo
-
test
:
(
SERVO_DEPS
)
(
RUSTC
)
(
RUSTFLAGS
)
(
RUSTLIBS
)
-
-
test
-
o
<
reftest
:
src
/
reftest
/
reftest
.
rs
libservo
.
dummy
(
RUSTC
)
(
RUSTFLAGS
)
(
RUSTLIBS
)
-
o
<
-
L
.
#
Convenient
sub
-
project
targets
.
PHONY
:
mozjs
rust
-
harfbuzz
rust
-
mozjs
rust
-
azure
rust
-
cocoa
\
rust
-
stb
-
image
rust
-
geom
rust
-
opengles
rust
-
glut
rust
-
layers
\
rust
-
http
-
client
mozjs
:
src
/
mozjs
/
libjs_static
.
a
rust
-
harfbuzz
:
src
/
rust
-
harfbuzz
/
libharfbuzz
.
dummy
rust
-
mozjs
:
src
/
rust
-
mozjs
/
libjs
.
dummy
rust
-
azure
:
src
/
rust
-
azure
/
libazure
.
dummy
rust
-
cocoa
:
src
/
rust
-
cocoa
/
libcocoa
.
dummy
rust
-
stb
-
image
:
src
/
rust
-
stb
-
image
/
libstb
-
image
.
dummy
rust
-
geom
:
src
/
rust
-
geom
/
librustgeom
.
dummy
rust
-
opengles
:
src
/
rust
-
opengles
/
librustopengles
.
dummy
rust
-
glut
:
src
/
rust
-
glut
/
librustglut
.
dummy
rust
-
layers
:
src
/
rust
-
layers
/
librustlayers
.
dummy
rust
-
http
-
client
:
src
/
rust
-
http
-
client
/
libhttp_client
.
dummy
libparserutils
:
src
/
libparserutils
/
libparserutils
.
dummy
libhubbub
:
src
/
libhubbub
/
libhubbub
.
dummy
#
Subproject
rules
src
/
mozjs
/
libjs_static
.
a
:
(
MAKE
)
-
C
src
/
mozjs
src
/
rust
-
harfbuzz
/
libharfbuzz
.
dummy
:
(
MAKE
)
-
C
src
/
rust
-
harfbuzz
src
/
rust
-
mozjs
/
libjs
.
dummy
:
src
/
mozjs
/
libjs_static
.
a
RUSTFLAGS
=
"
(
RUSTFLAGS
)
-
L
.
.
/
mozjs
/
"
CFLAGS
=
"
-
I
.
.
/
mozjs
/
dist
/
include
"
\
(
MAKE
)
-
C
src
/
rust
-
mozjs
src
/
rust
-
azure
/
libazure
.
dummy
:
(
AZURE_DEPS
)
RUSTFLAGS
=
"
(
RUSTFLAGS
)
-
L
.
.
/
rust
-
cocoa
-
L
.
.
/
rust
-
geom
"
(
MAKE
)
-
C
src
/
rust
-
azure
src
/
rust
-
cocoa
/
libcocoa
.
dummy
:
(
MAKE
)
-
C
src
/
rust
-
cocoa
src
/
rust
-
stb
-
image
/
libstb
-
image
.
dummy
:
(
MAKE
)
-
C
src
/
rust
-
stb
-
image
src
/
rust
-
geom
/
librustgeom
.
dummy
:
(
MAKE
)
-
C
src
/
rust
-
geom
src
/
rust
-
opengles
/
librustopengles
.
dummy
:
(
MAKE
)
-
C
src
/
rust
-
opengles
src
/
rust
-
glut
/
librustglut
.
dummy
:
(
GLUT_DEPS
)
RUSTFLAGS
=
"
(
RUSTFLAGS
)
-
L
.
.
/
rust
-
opengles
"
(
MAKE
)
-
C
src
/
rust
-
glut
src
/
rust
-
layers
/
librustlayers
.
dummy
:
(
LAYERS_DEPS
)
RUSTFLAGS
=
"
(
RUSTFLAGS
)
-
L
.
.
/
rust
-
geom
-
L
.
.
/
rust
-
opengles
-
L
.
.
/
rust
-
glut
-
L
.
.
/
rust
-
azure
-
L
.
.
/
rust
-
cocoa
"
\
(
MAKE
)
-
C
src
/
rust
-
layers
src
/
rust
-
http
-
client
/
libhttp_client
.
dummy
:
(
MAKE
)
-
C
src
/
rust
-
http
-
client
src
/
libparserutils
/
libparserutils
.
dummy
:
(
MAKE
)
-
C
src
/
libparserutils
src
/
libhubbub
/
libhubbub
.
dummy
:
(
MAKE
)
-
C
src
/
libhubbub
#
Testing
targets
.
PHONY
:
check
(
CHECK_DEPS
)
check
:
(
CHECK_DEPS
)
check
-
servo
:
servo
-
test
.
/
servo
-
test
(
TESTNAME
)
check
-
rust
-
harfbuzz
:
(
MAKE
)
check
-
C
src
/
rust
-
harfbuzz
check
-
rust
-
mozjs
:
mozjs
RUSTFLAGS
=
"
(
RUSTFLAGS
)
-
L
.
.
/
mozjs
/
"
CFLAGS
=
"
-
I
.
.
/
mozjs
/
dist
/
include
"
\
(
MAKE
)
check
-
C
src
/
rust
-
mozjs
check
-
rust
-
azure
:
(
AZURE_DEPS
)
RUSTFLAGS
=
"
(
RUSTFLAGS
)
-
L
.
.
/
rust
-
cocoa
-
L
.
.
/
rust
-
geom
"
(
MAKE
)
check
-
C
src
/
rust
-
azure
check
-
rust
-
cocoa
:
(
MAKE
)
check
-
C
src
/
rust
-
cocoa
check
-
rust
-
stb
-
image
:
(
MAKE
)
check
-
C
src
/
rust
-
stb
-
image
check
-
rust
-
geom
:
(
MAKE
)
check
-
C
src
/
rust
-
geom
check
-
rust
-
opengles
:
(
MAKE
)
check
-
C
src
/
rust
-
opengles
check
-
rust
-
glut
:
(
GLUT_DEPS
)
RUSTFLAGS
=
"
(
RUSTFLAGS
)
-
L
.
.
/
rust
-
opengles
"
(
MAKE
)
check
-
C
src
/
rust
-
glut
check
-
rust
-
layers
:
(
LAYERS_DEPS
)
RUSTFLAGS
=
"
(
RUSTFLAGS
)
-
L
.
.
/
rust
-
geom
-
L
.
.
/
rust
-
opengles
-
L
.
.
/
rust
-
glut
-
L
.
.
/
rust
-
azure
-
L
.
.
/
rust
-
cocoa
"
\
(
MAKE
)
check
-
C
src
/
rust
-
layers
check
-
rust
-
http
-
client
:
(
MAKE
)
check
-
C
src
/
rust
-
http
-
client
#
Clean
targets
.
PHONY
:
clean
(
CLEAN_DEPS
)
clean
:
(
CLEAN_DEPS
)
clean
-
rust
-
harfbuzz
:
(
MAKE
)
clean
-
C
src
/
rust
-
harfbuzz
clean
-
mozjs
:
(
MAKE
)
clean
-
C
src
/
mozjs
clean
-
rust
-
mozjs
:
(
MAKE
)
clean
-
C
src
/
rust
-
mozjs
clean
-
rust
-
azure
:
(
MAKE
)
clean
-
C
src
/
rust
-
azure
clean
-
rust
-
cocoa
:
(
MAKE
)
clean
-
C
src
/
rust
-
cocoa
clean
-
rust
-
stb
-
image
:
(
MAKE
)
clean
-
C
src
/
rust
-
stb
-
image
clean
-
rust
-
geom
:
(
MAKE
)
clean
-
C
src
/
rust
-
geom
clean
-
rust
-
opengles
:
(
MAKE
)
clean
-
C
src
/
rust
-
opengles
clean
-
rust
-
glut
:
(
MAKE
)
clean
-
C
src
/
rust
-
glut
clean
-
rust
-
layers
:
(
MAKE
)
clean
-
C
src
/
rust
-
layers
clean
-
rust
-
http
-
client
:
(
MAKE
)
clean
-
C
src
/
rust
-
http
-
client
clean
-
servo
:
rm
-
f
servo
servo
-
test
#
Darwin
app
packaging
ifeq
(
(
OSTYPE
)
darwin
)
package
:
servo
mkdir
-
p
Servo
.
app
/
Contents
/
MacOS
/
src
/
rust
-
cocoa
mkdir
-
p
Servo
.
app
/
Contents
/
MacOS
/
src
/
rust
-
azure
cp
(
VPATH
)
/
Info
.
plist
Servo
.
app
/
Contents
/
cp
servo
Servo
.
app
/
Contents
/
MacOS
/
cp
src
/
rust
-
cocoa
/
lib
*
.
dylib
Servo
.
app
/
Contents
/
MacOS
/
src
/
rust
-
cocoa
/
cp
src
/
rust
-
azure
/
lib
*
.
dylib
Servo
.
app
/
Contents
/
MacOS
/
src
/
rust
-
azure
/
else
.
PHONY
:
package
package
:
endif
